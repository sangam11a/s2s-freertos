
MUNAL_EM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  08018460  08018460  00028460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a24c  0801a24c  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801a24c  0801a24c  0002a24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a254  0801a254  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a254  0801a254  0002a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a258  0801a258  0002a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801a25c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030234  2**0
                  CONTENTS
 10 .bss          00009d44  20000238  20000238  00030238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009f7c  20009f7c  00030238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046557  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d50  00000000  00000000  000767bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a30  00000000  00000000  0007e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a10  00000000  00000000  00080f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e911  00000000  00000000  00083950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036bd0  00000000  00000000  000b2261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd29f  00000000  00000000  000e8e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e60d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bf58  00000000  00000000  001e6124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018448 	.word	0x08018448

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	08018448 	.word	0x08018448

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b982 	b.w	8000df8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f81a 	bl	8000b34 <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__popcountsi2>:
 8000b0c:	0843      	lsrs	r3, r0, #1
 8000b0e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000b12:	1ac0      	subs	r0, r0, r3
 8000b14:	0883      	lsrs	r3, r0, #2
 8000b16:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000b1a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000b1e:	4418      	add	r0, r3
 8000b20:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000b24:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000b28:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000b2c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000b30:	0e00      	lsrs	r0, r0, #24
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e08:	e002      	b.n	8000e10 <buffersize+0x14>
		i++;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f6      	bne.n	8000e0a <buffersize+0xe>
	return i;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 8000e2c:	b40f      	push	{r0, r1, r2, r3}
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	607b      	str	r3, [r7, #4]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a3a      	ldr	r2, [r7, #32]
 8000e3e:	2164      	movs	r1, #100	; 0x64
 8000e40:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <myprintf+0x88>)
 8000e42:	f016 fe7f 	bl	8017b44 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 8000e46:	481b      	ldr	r0, [pc, #108]	; (8000eb4 <myprintf+0x88>)
 8000e48:	f7ff ffd8 	bl	8000dfc <buffersize>
 8000e4c:	6178      	str	r0, [r7, #20]
#endif
#ifdef UART_DEBUG
	// Add the code here for printing data to serial monitor via software simulated UART
//	while (DEBUG_DATA_TX_FLAG != 0) {
//	}
	uint32_t current_tick = HAL_GetTick();
 8000e4e:	f00a f813 	bl	800ae78 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 8000e54:	e006      	b.n	8000e64 <myprintf+0x38>
		if (HAL_GetTick() - current_tick > 20) {
 8000e56:	f00a f80f 	bl	800ae78 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b14      	cmp	r3, #20
 8000e62:	d806      	bhi.n	8000e72 <myprintf+0x46>
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <myprintf+0x8c>)
 8000e66:	f00e ff4b 	bl	800fd00 <HAL_UART_GetState>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b21      	cmp	r3, #33	; 0x21
 8000e6e:	d0f2      	beq.n	8000e56 <myprintf+0x2a>
 8000e70:	e000      	b.n	8000e74 <myprintf+0x48>
			break;
 8000e72:	bf00      	nop
		}
	}
	uint8_t DEBUG_DATA_TX_FLAG = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
	uint32_t tickstart_ = HAL_GetTick();
 8000e78:	f009 fffe 	bl	800ae78 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit_IT(&DEBUG_STREAM, (uint8_t*) temp, len);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	490b      	ldr	r1, [pc, #44]	; (8000eb4 <myprintf+0x88>)
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <myprintf+0x8c>)
 8000e88:	f00e fc0d 	bl	800f6a6 <HAL_UART_Transmit_IT>

	while (DEBUG_DATA_TX_FLAG != 1 && (HAL_GetTick() - tickstart_ < 200)) {
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d006      	beq.n	8000ea0 <myprintf+0x74>
 8000e92:	f009 fff1 	bl	800ae78 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2bc7      	cmp	r3, #199	; 0xc7
 8000e9e:	d9f5      	bls.n	8000e8c <myprintf+0x60>
	}
	DEBUG_DATA_TX_FLAG = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eae:	b004      	add	sp, #16
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000254 	.word	0x20000254
 8000eb8:	20007928 	.word	0x20007928

08000ebc <ADC_Enable>:
 *
 * @retval 		null
 *
 * @param 		null
 */
void ADC_Enable() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <ADC_Enable+0x1c>)
 8000ec8:	f00b fa70 	bl	800c3ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f009 ffdf 	bl	800ae90 <HAL_Delay>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <ADC1_Enable>:
 *
 * @retval 		null
 *
 * @param 		null
 */
void ADC1_Enable() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ADC1_Enable+0x1c>)
 8000ee8:	f00b fa60 	bl	800c3ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f009 ffcf 	bl	800ae90 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <ADC_Disable>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC_Disable() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <ADC_Disable+0x1c>)
 8000f08:	f00b fa50 	bl	800c3ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f009 ffbf 	bl	800ae90 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <ADC1_Disable>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC1_Disable() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <ADC1_Disable+0x1c>)
 8000f28:	f00b fa40 	bl	800c3ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f009 ffaf 	bl	800ae90 <HAL_Delay>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <MANUAL_Select>:
 *
 * @retval		null
 *
 * @param		null
 */
void MANUAL_Select() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
	uint8_t command[2];
	uint16_t temp;

	temp = MANUAL_MODE;
 8000f42:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 8000f46:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	717b      	strb	r3, [r7, #5]

	ADC1_Enable();
 8000f58:	f7ff ffc0 	bl	8000edc <ADC1_Enable>
	HAL_Delay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f009 ff97 	bl	800ae90 <HAL_Delay>
	HAL_SPI_TransmitReceive(&E_ADC, command, adc_data, 2, 1000);
 8000f62:	1d39      	adds	r1, r7, #4
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <MANUAL_Select+0x50>)
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <MANUAL_Select+0x54>)
 8000f70:	f00d fb08 	bl	800e584 <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f009 ff8b 	bl	800ae90 <HAL_Delay>
	ADC1_Disable();
 8000f7a:	f7ff ffcf 	bl	8000f1c <ADC1_Disable>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f009 ff86 	bl	800ae90 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20007634 	.word	0x20007634
 8000f90:	20007ed8 	.word	0x20007ed8

08000f94 <AUTO_2_Select_ADC>:
 *
 * @retval 		null
 *
 * @param		null
 */
void AUTO_2_Select_ADC(operation_modes mode) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint16_t temp;
	HAL_StatusTypeDef ret;
	switch (mode) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d002      	beq.n	8000faa <AUTO_2_Select_ADC+0x16>
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d023      	beq.n	8000ff0 <AUTO_2_Select_ADC+0x5c>
		HAL_Delay(1);
		ADC_Disable();
		HAL_Delay(1);
		break;
	default:
		break;
 8000fa8:	e047      	b.n	800103a <AUTO_2_Select_ADC+0xa6>
		temp = AUTO_2_MODE;
 8000faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000fae:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	723b      	strb	r3, [r7, #8]
		command[1] = temp & 0xff;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	727b      	strb	r3, [r7, #9]
		ADC_Enable();
 8000fc0:	f7ff ff7c 	bl	8000ebc <ADC_Enable>
		HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f009 ff63 	bl	800ae90 <HAL_Delay>
		ret = HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8000fca:	f107 0108 	add.w	r1, r7, #8
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	481b      	ldr	r0, [pc, #108]	; (8001044 <AUTO_2_Select_ADC+0xb0>)
 8000fd6:	f00d f888 	bl	800e0ea <HAL_SPI_Transmit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	737b      	strb	r3, [r7, #13]
		HAL_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f009 ff56 	bl	800ae90 <HAL_Delay>
		ADC_Disable();
 8000fe4:	f7ff ff8a 	bl	8000efc <ADC_Disable>
		HAL_Delay(1);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f009 ff51 	bl	800ae90 <HAL_Delay>
		break;
 8000fee:	e024      	b.n	800103a <AUTO_2_Select_ADC+0xa6>
		temp = AUTO_2_MODE2;
 8000ff0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ff4:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	723b      	strb	r3, [r7, #8]
		command[1] = temp & 0xff;
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	727b      	strb	r3, [r7, #9]
		ADC_Enable();
 8001006:	f7ff ff59 	bl	8000ebc <ADC_Enable>
		HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f009 ff40 	bl	800ae90 <HAL_Delay>
		ret = HAL_SPI_TransmitReceive(&E_ADC, command, adc_data, 2, 1000);
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <AUTO_2_Select_ADC+0xb4>)
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <AUTO_2_Select_ADC+0xb0>)
 8001020:	f00d fab0 	bl	800e584 <HAL_SPI_TransmitReceive>
 8001024:	4603      	mov	r3, r0
 8001026:	737b      	strb	r3, [r7, #13]
		HAL_Delay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f009 ff31 	bl	800ae90 <HAL_Delay>
		ADC_Disable();
 800102e:	f7ff ff65 	bl	8000efc <ADC_Disable>
		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f009 ff2c 	bl	800ae90 <HAL_Delay>
		break;
 8001038:	bf00      	nop
	}

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20007ed8 	.word	0x20007ed8
 8001048:	20007634 	.word	0x20007634

0800104c <AUTO_2_Select_ADC1>:
 *
 * @retval 		null
 *
 * @param		null
 */
void AUTO_2_Select_ADC1(operation_modes mode) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint16_t temp;
	switch (mode) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d002      	beq.n	8001062 <AUTO_2_Select_ADC1+0x16>
 800105c:	2b02      	cmp	r3, #2
 800105e:	d021      	beq.n	80010a4 <AUTO_2_Select_ADC1+0x58>
		HAL_Delay(1);
		ADC1_Disable();
		HAL_Delay(1);
		break;
	default:
		break;
 8001060:	e043      	b.n	80010ea <AUTO_2_Select_ADC1+0x9e>
		temp = AUTO_2_MODE;
 8001062:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001066:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	733b      	strb	r3, [r7, #12]
		command[1] = temp & 0xff;
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	737b      	strb	r3, [r7, #13]
		ADC1_Enable();
 8001078:	f7ff ff30 	bl	8000edc <ADC1_Enable>
		HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f009 ff07 	bl	800ae90 <HAL_Delay>
		HAL_SPI_Transmit(&E_ADC, command, 2, 1000);	//(to ask) 8 bit ko data type ma change garyo vane data loss hunxa?
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	2202      	movs	r2, #2
 800108c:	4819      	ldr	r0, [pc, #100]	; (80010f4 <AUTO_2_Select_ADC1+0xa8>)
 800108e:	f00d f82c 	bl	800e0ea <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f009 fefc 	bl	800ae90 <HAL_Delay>
		ADC1_Disable();
 8001098:	f7ff ff40 	bl	8000f1c <ADC1_Disable>
		HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f009 fef7 	bl	800ae90 <HAL_Delay>
		break;
 80010a2:	e022      	b.n	80010ea <AUTO_2_Select_ADC1+0x9e>
		temp = AUTO_2_MODE2;
 80010a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010a8:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	733b      	strb	r3, [r7, #12]
		command[1] = temp & 0xff;
 80010b4:	89fb      	ldrh	r3, [r7, #14]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	737b      	strb	r3, [r7, #13]
		ADC1_Enable();
 80010ba:	f7ff ff0f 	bl	8000edc <ADC1_Enable>
		HAL_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fee6 	bl	800ae90 <HAL_Delay>
		HAL_SPI_TransmitReceive(&E_ADC, command, adc1_data, 2, 1000);
 80010c4:	f107 010c 	add.w	r1, r7, #12
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <AUTO_2_Select_ADC1+0xac>)
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <AUTO_2_Select_ADC1+0xa8>)
 80010d4:	f00d fa56 	bl	800e584 <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f009 fed9 	bl	800ae90 <HAL_Delay>
		ADC1_Disable();
 80010de:	f7ff ff1d 	bl	8000f1c <ADC1_Disable>
		HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f009 fed4 	bl	800ae90 <HAL_Delay>
		break;
 80010e8:	bf00      	nop
	}
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20007ed8 	.word	0x20007ed8
 80010f8:	20007630 	.word	0x20007630

080010fc <ADC_AUTO_2_Program>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC_AUTO_2_Program() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint8_t command[2];
	uint16_t temp;

	temp = ADC_AUTO_2_PROGRAM;
 8001102:	f249 13c0 	movw	r3, #37312	; 0x91c0
 8001106:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	b29b      	uxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	717b      	strb	r3, [r7, #5]

	ADC_Enable();
 8001118:	f7ff fed0 	bl	8000ebc <ADC_Enable>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f009 feb7 	bl	800ae90 <HAL_Delay>
	HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8001122:	1d39      	adds	r1, r7, #4
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	2202      	movs	r2, #2
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <ADC_AUTO_2_Program+0x4c>)
 800112c:	f00c ffdd 	bl	800e0ea <HAL_SPI_Transmit>
	HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f009 fead 	bl	800ae90 <HAL_Delay>
	ADC_Disable();
 8001136:	f7ff fee1 	bl	8000efc <ADC_Disable>
	HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f009 fea8 	bl	800ae90 <HAL_Delay>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20007ed8 	.word	0x20007ed8

0800114c <ADC1_AUTO_2_Program>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC1_AUTO_2_Program() {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	uint8_t command[2];
	uint16_t temp;

	temp = ADC1_AUTO_2_PROGRAM;
 8001152:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8001156:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	717b      	strb	r3, [r7, #5]

	ADC1_Enable();
 8001168:	f7ff feb8 	bl	8000edc <ADC1_Enable>
	HAL_Delay(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f009 fe8f 	bl	800ae90 <HAL_Delay>
	HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8001172:	1d39      	adds	r1, r7, #4
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	2202      	movs	r2, #2
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <ADC1_AUTO_2_Program+0x4c>)
 800117c:	f00c ffb5 	bl	800e0ea <HAL_SPI_Transmit>
	HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f009 fe85 	bl	800ae90 <HAL_Delay>
	ADC1_Disable();
 8001186:	f7ff fec9 	bl	8000f1c <ADC1_Disable>
	HAL_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f009 fe80 	bl	800ae90 <HAL_Delay>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20007ed8 	.word	0x20007ed8

0800119c <ADC_CombineData>:
 *
 * @retval		null
 *
 * @param		float pointer to the buffer where the converted data is to be stored
 */
void ADC_CombineData(uint16_t *adc_channels, uint16_t *adc1_channels) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	 int i = 0, j = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]

	if (i < E_ADC_DATA_LEN) {
 80011ae:	2310      	movs	r3, #16
 80011b0:	461a      	mov	r2, r3
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	da3a      	bge.n	800122e <ADC_CombineData+0x92>
		adc_channels[i] = ((adc_data[0] << 8) | adc_data[1]);
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <ADC_CombineData+0x9c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <ADC_CombineData+0x9c>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b219      	sxth	r1, r3
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	b28a      	uxth	r2, r1
 80011d4:	801a      	strh	r2, [r3, #0]
		i++;
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	3301      	adds	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
		if (i == E_ADC_DATA_LEN) {
 80011dc:	2310      	movs	r3, #16
 80011de:	461a      	mov	r2, r3
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d123      	bne.n	800122e <ADC_CombineData+0x92>
			char uart_buf[20] ;
			for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	e01b      	b.n	8001224 <ADC_CombineData+0x88>
				adc_channels[x] = adc_channels[x] & 0x0fff;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	440b      	add	r3, r1
 80011fe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001202:	b292      	uxth	r2, r2
 8001204:	801a      	strh	r2, [r3, #0]
				sprintf(uart_buf, "%d \0", adc_channels[x]);
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4909      	ldr	r1, [pc, #36]	; (800123c <ADC_CombineData+0xa0>)
 8001218:	4618      	mov	r0, r3
 800121a:	f016 fbcb 	bl	80179b4 <siprintf>
			for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
 8001224:	2310      	movs	r3, #16
 8001226:	461a      	mov	r2, r3
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	4293      	cmp	r3, r2
 800122c:	dbde      	blt.n	80011ec <ADC_CombineData+0x50>
//			}
//			i = 0;
//			j = 0;
//		}
//	}
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20007634 	.word	0x20007634
 800123c:	08018460 	.word	0x08018460

08001240 <ADC_Conv_Data>:
 * @retval		null
 *
 * @param		floating pointer to the buffer where the converted data is to be stored,
 * 				uint16_t pointer to the buffer which contains the raw data
 */
void ADC_Conv_Data(float *adc_conv_buf, uint16_t *adc_buf) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
//		adc_conv_buf[x] = (2.5 * adc_buf[x]) / 4095.0;
//	}
	float dummy;
		float root;

		for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e1ac      	b.n	80015aa <ADC_Conv_Data+0x36a>

		  if (x < 8) adc_conv_buf[x] = (2.5 * adc_buf[x]) / 4095.0;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b07      	cmp	r3, #7
 8001254:	dc22      	bgt.n	800129c <ADC_Conv_Data+0x5c>
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f96f 	bl	8000544 <__aeabi_i2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4bab      	ldr	r3, [pc, #684]	; (8001518 <ADC_Conv_Data+0x2d8>)
 800126c:	f7ff f9d4 	bl	8000618 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	a399      	add	r3, pc, #612	; (adr r3, 80014e0 <ADC_Conv_Data+0x2a0>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff faf5 	bl	800086c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	18d4      	adds	r4, r2, r3
 8001292:	f7ff fbd3 	bl	8000a3c <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	e183      	b.n	80015a4 <ADC_Conv_Data+0x364>
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3b08      	subs	r3, #8
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	f200 8143 	bhi.w	800152c <ADC_Conv_Data+0x2ec>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <ADC_Conv_Data+0x6c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	08001347 	.word	0x08001347
 80012b4:	080013d1 	.word	0x080013d1
 80012b8:	080014bf 	.word	0x080014bf

	//	for (int x = number_of_current_channel; x < E_ADC_DATA_LEN; x++) {
			  else{
					switch (x) {
							case 8:		// Solar Panel Total Current
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f93c 	bl	8000544 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b91      	ldr	r3, [pc, #580]	; (8001518 <ADC_Conv_Data+0x2d8>)
 80012d2:	f7ff f9a1 	bl	8000618 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a380      	add	r3, pc, #512	; (adr r3, 80014e0 <ADC_Conv_Data+0x2a0>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fac2 	bl	800086c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fba4 	bl	8000a3c <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = ((dummy - 1.65) / 264) * 1000;//converting voltage to current. In actual code need to keep separate variable for current
 80012f8:	6938      	ldr	r0, [r7, #16]
 80012fa:	f7ff f935 	bl	8000568 <__aeabi_f2d>
 80012fe:	a37a      	add	r3, pc, #488	; (adr r3, 80014e8 <ADC_Conv_Data+0x2a8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7fe ffd0 	bl	80002a8 <__aeabi_dsub>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b81      	ldr	r3, [pc, #516]	; (800151c <ADC_Conv_Data+0x2dc>)
 8001316:	f7ff faa9 	bl	800086c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <ADC_Conv_Data+0x2e0>)
 8001328:	f7ff f976 	bl	8000618 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	18d4      	adds	r4, r2, r3
 800133c:	f7ff fb7e 	bl	8000a3c <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	6023      	str	r3, [r4, #0]
								break;
 8001344:	e12e      	b.n	80015a4 <ADC_Conv_Data+0x364>
							case 9:		// Battery current
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8f7 	bl	8000544 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <ADC_Conv_Data+0x2d8>)
 800135c:	f7ff f95c 	bl	8000618 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a35d      	add	r3, pc, #372	; (adr r3, 80014e0 <ADC_Conv_Data+0x2a0>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff fa7d 	bl	800086c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fb5f 	bl	8000a3c <__aeabi_d2f>
 800137e:	4603      	mov	r3, r0
 8001380:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = ((dummy - 1.65) / 264) * 1000;//converting voltage to current. In actual code need to keep separate variable for current
 8001382:	6938      	ldr	r0, [r7, #16]
 8001384:	f7ff f8f0 	bl	8000568 <__aeabi_f2d>
 8001388:	a357      	add	r3, pc, #348	; (adr r3, 80014e8 <ADC_Conv_Data+0x2a8>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff8b 	bl	80002a8 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b5f      	ldr	r3, [pc, #380]	; (800151c <ADC_Conv_Data+0x2dc>)
 80013a0:	f7ff fa64 	bl	800086c <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <ADC_Conv_Data+0x2e0>)
 80013b2:	f7ff f931 	bl	8000618 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	18d4      	adds	r4, r2, r3
 80013c6:	f7ff fb39 	bl	8000a3c <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	6023      	str	r3, [r4, #0]

								break;
 80013ce:	e0e9      	b.n	80015a4 <ADC_Conv_Data+0x364>
							case 10:  // COM Board Temp data
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b2 	bl	8000544 <__aeabi_i2d>
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <ADC_Conv_Data+0x2d8>)
 80013e6:	f7ff f917 	bl	8000618 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	a33b      	add	r3, pc, #236	; (adr r3, 80014e0 <ADC_Conv_Data+0x2a0>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff fa38 	bl	800086c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb1a 	bl	8000a3c <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	613b      	str	r3, [r7, #16]
								root = sqrtf(
										(5.506 * 5.506) + (4 * 0.00176 * (870.6 - (dummy * 1000))));
 800140c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001410:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001524 <ADC_Conv_Data+0x2e4>
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	ee17 0a90 	vmov	r0, s15
 800141c:	f7ff f8a4 	bl	8000568 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	a132      	add	r1, pc, #200	; (adr r1, 80014f0 <ADC_Conv_Data+0x2b0>)
 8001426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142a:	f7fe ff3d 	bl	80002a8 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a330      	add	r3, pc, #192	; (adr r3, 80014f8 <ADC_Conv_Data+0x2b8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f8ec 	bl	8000618 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	a32d      	add	r3, pc, #180	; (adr r3, 8001500 <ADC_Conv_Data+0x2c0>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7fe ff2d 	bl	80002ac <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
								root = sqrtf(
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff faef 	bl	8000a3c <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	ee00 3a10 	vmov	s0, r3
 8001464:	f016 ffc6 	bl	80183f4 <sqrtf>
 8001468:	ed87 0a03 	vstr	s0, [r7, #12]
								adc_conv_buf[x] = ((5.506 - root) / (2 * (-0.00176))) + 30;
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff f87b 	bl	8000568 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	a124      	add	r1, pc, #144	; (adr r1, 8001508 <ADC_Conv_Data+0x2c8>)
 8001478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147c:	f7fe ff14 	bl	80002a8 <__aeabi_dsub>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	a321      	add	r3, pc, #132	; (adr r3, 8001510 <ADC_Conv_Data+0x2d0>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f9ed 	bl	800086c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <ADC_Conv_Data+0x2e8>)
 80014a0:	f7fe ff04 	bl	80002ac <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	18d4      	adds	r4, r2, r3
 80014b4:	f7ff fac2 	bl	8000a3c <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	6023      	str	r3, [r4, #0]
								break;
 80014bc:	e072      	b.n	80015a4 <ADC_Conv_Data+0x364>
							case 11:	// COM RSSI analog data
								adc_conv_buf[x] = adc_buf[x];
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	8819      	ldrh	r1, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	ee07 1a90 	vmov	s15, r1
 80014d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d8:	edc3 7a00 	vstr	s15, [r3]
								break;
 80014dc:	e062      	b.n	80015a4 <ADC_Conv_Data+0x364>
 80014de:	bf00      	nop
 80014e0:	00000000 	.word	0x00000000
 80014e4:	40affe00 	.word	0x40affe00
 80014e8:	66666666 	.word	0x66666666
 80014ec:	3ffa6666 	.word	0x3ffa6666
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	408b34cc 	.word	0x408b34cc
 80014f8:	9c38b04b 	.word	0x9c38b04b
 80014fc:	3f7cd5f9 	.word	0x3f7cd5f9
 8001500:	bc3c5bd2 	.word	0xbc3c5bd2
 8001504:	403e50e7 	.word	0x403e50e7
 8001508:	dd2f1aa0 	.word	0xdd2f1aa0
 800150c:	40160624 	.word	0x40160624
 8001510:	9c38b04b 	.word	0x9c38b04b
 8001514:	bf6cd5f9 	.word	0xbf6cd5f9
 8001518:	40040000 	.word	0x40040000
 800151c:	40708000 	.word	0x40708000
 8001520:	408f4000 	.word	0x408f4000
 8001524:	447a0000 	.word	0x447a0000
 8001528:	403e0000 	.word	0x403e0000
							default:		// baki sabai
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f804 	bl	8000544 <__aeabi_i2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <ADC_Conv_Data+0x398>)
 8001542:	f7ff f869 	bl	8000618 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	a31c      	add	r3, pc, #112	; (adr r3, 80015c0 <ADC_Conv_Data+0x380>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f98a 	bl	800086c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fa6c 	bl	8000a3c <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = (dummy * (1100.0 + 931.0)) / 931.0;
 8001568:	6938      	ldr	r0, [r7, #16]
 800156a:	f7fe fffd 	bl	8000568 <__aeabi_f2d>
 800156e:	a316      	add	r3, pc, #88	; (adr r3, 80015c8 <ADC_Conv_Data+0x388>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f850 	bl	8000618 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	a313      	add	r3, pc, #76	; (adr r3, 80015d0 <ADC_Conv_Data+0x390>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f971 	bl	800086c <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	18d4      	adds	r4, r2, r3
 800159a:	f7ff fa4f 	bl	8000a3c <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	6023      	str	r3, [r4, #0]
								break;
 80015a2:	bf00      	nop
		for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	2310      	movs	r3, #16
 80015ac:	461a      	mov	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4293      	cmp	r3, r2
 80015b2:	f6ff ae4d 	blt.w	8001250 <ADC_Conv_Data+0x10>
							}
			  }
			}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40affe00 	.word	0x40affe00
 80015c8:	00000000 	.word	0x00000000
 80015cc:	409fbc00 	.word	0x409fbc00
 80015d0:	00000000 	.word	0x00000000
 80015d4:	408d1800 	.word	0x408d1800
 80015d8:	40040000 	.word	0x40040000

080015dc <ADC_Operate>:
 *
 * @param		floating pointers to the buffer which stores the converted data.
 *
 * @retval		null
 */
void ADC_Operate(uint16_t *adc_channels, uint16_t *adc1_channels) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	MANUAL_Select();
 80015e6:	f7ff fca9 	bl	8000f3c <MANUAL_Select>
	AUTO_2_Select_ADC(ADC_SELECT); // programming cycle of ADC 0
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fcd2 	bl	8000f94 <AUTO_2_Select_ADC>
	ADC_AUTO_2_Program();
 80015f0:	f7ff fd84 	bl	80010fc <ADC_AUTO_2_Program>
	AUTO_2_Select_ADC1(ADC_SELECT); // programming cycle of ADC 1
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fd29 	bl	800104c <AUTO_2_Select_ADC1>
	ADC1_AUTO_2_Program();
 80015fa:	f7ff fda7 	bl	800114c <ADC1_AUTO_2_Program>

	for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e00e      	b.n	8001622 <ADC_Operate+0x46>
		if (x < E_ADC_DATA_LEN) {
 8001604:	2310      	movs	r3, #16
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4293      	cmp	r3, r2
 800160c:	da02      	bge.n	8001614 <ADC_Operate+0x38>
			AUTO_2_Select_ADC(ADC_READ);			// Data read cycle of ADC 0
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff fcc0 	bl	8000f94 <AUTO_2_Select_ADC>

		}
		 			// Data  Read cycle from ADC 1
		ADC_CombineData(adc_channels, adc1_channels);
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fdc0 	bl	800119c <ADC_CombineData>
	for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	2310      	movs	r3, #16
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4293      	cmp	r3, r2
 800162a:	dbeb      	blt.n	8001604 <ADC_Operate+0x28>
//			}				// Data  Read cycle from ADC 1
//			ADC_CombineData(adc_channels, adc1_channels);
//	//		ADC1_Conv_Data((float*)adc_channels, adc1_channels);
//		}

}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_ADC1_Init+0x98>)
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <MX_ADC1_Init+0x9c>)
 800164e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_ADC1_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_ADC1_Init+0x98>)
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <MX_ADC1_Init+0xa0>)
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001686:	2201      	movs	r2, #1
 8001688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_ADC1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_ADC1_Init+0x98>)
 8001694:	2201      	movs	r2, #1
 8001696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_ADC1_Init+0x98>)
 800169a:	f009 fc1d 	bl	800aed8 <HAL_ADC_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016a4:	f001 ff62 	bl	800356c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_ADC1_Init+0x98>)
 80016ba:	f009 fdaf 	bl	800b21c <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016c4:	f001 ff52 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200076e0 	.word	0x200076e0
 80016d4:	40012000 	.word	0x40012000
 80016d8:	0f000001 	.word	0x0f000001

080016dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_ADC2_Init+0x98>)
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <MX_ADC2_Init+0x9c>)
 80016f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <MX_ADC2_Init+0x98>)
 80016f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_ADC2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_ADC2_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_ADC2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_ADC2_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_ADC2_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_ADC2_Init+0x98>)
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <MX_ADC2_Init+0xa0>)
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_ADC2_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_ADC2_Init+0x98>)
 800172a:	2201      	movs	r2, #1
 800172c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_ADC2_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_ADC2_Init+0x98>)
 8001738:	2201      	movs	r2, #1
 800173a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_ADC2_Init+0x98>)
 800173e:	f009 fbcb 	bl	800aed8 <HAL_ADC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001748:	f001 ff10 	bl	800356c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800174c:	2303      	movs	r3, #3
 800174e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_ADC2_Init+0x98>)
 800175e:	f009 fd5d 	bl	800b21c <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001768:	f001 ff00 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20007638 	.word	0x20007638
 8001778:	40012100 	.word	0x40012100
 800177c:	0f000001 	.word	0x0f000001

08001780 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_ADC3_Init+0x98>)
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <MX_ADC3_Init+0x9c>)
 8001796:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_ADC3_Init+0x98>)
 800179a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800179e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_ADC3_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_ADC3_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_ADC3_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_ADC3_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_ADC3_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_ADC3_Init+0x98>)
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <MX_ADC3_Init+0xa0>)
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_ADC3_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_ADC3_Init+0x98>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_ADC3_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_ADC3_Init+0x98>)
 80017dc:	2201      	movs	r2, #1
 80017de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_ADC3_Init+0x98>)
 80017e2:	f009 fb79 	bl	800aed8 <HAL_ADC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80017ec:	f001 febe 	bl	800356c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80017f0:	230e      	movs	r3, #14
 80017f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_ADC3_Init+0x98>)
 8001802:	f009 fd0b 	bl	800b21c <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800180c:	f001 feae 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20007728 	.word	0x20007728
 800181c:	40012200 	.word	0x40012200
 8001820:	0f000001 	.word	0x0f000001

08001824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a99      	ldr	r2, [pc, #612]	; (8001aa8 <HAL_ADC_MspInit+0x284>)
 8001842:	4293      	cmp	r3, r2
 8001844:	f040 8094 	bne.w	8001970 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
 800184c:	4b97      	ldr	r3, [pc, #604]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6453      	str	r3, [r2, #68]	; 0x44
 8001858:	4b94      	ldr	r3, [pc, #592]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
 8001868:	4b90      	ldr	r3, [pc, #576]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a8f      	ldr	r2, [pc, #572]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b8d      	ldr	r3, [pc, #564]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
 8001884:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a88      	ldr	r2, [pc, #544]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b86      	ldr	r3, [pc, #536]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a81      	ldr	r2, [pc, #516]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PC5     ------> ADC1_IN15
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018b8:	233f      	movs	r3, #63	; 0x3f
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4879      	ldr	r0, [pc, #484]	; (8001ab0 <HAL_ADC_MspInit+0x28c>)
 80018cc:	f00a fbc2 	bl	800c054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018d0:	23ff      	movs	r3, #255	; 0xff
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4874      	ldr	r0, [pc, #464]	; (8001ab4 <HAL_ADC_MspInit+0x290>)
 80018e4:	f00a fbb6 	bl	800c054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80018e8:	2303      	movs	r3, #3
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ec:	2303      	movs	r3, #3
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f8:	4619      	mov	r1, r3
 80018fa:	486f      	ldr	r0, [pc, #444]	; (8001ab8 <HAL_ADC_MspInit+0x294>)
 80018fc:	f00a fbaa 	bl	800c054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001900:	4b6e      	ldr	r3, [pc, #440]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001902:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_ADC_MspInit+0x29c>)
 8001904:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001906:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190c:	4b6b      	ldr	r3, [pc, #428]	; (8001abc <HAL_ADC_MspInit+0x298>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_ADC_MspInit+0x298>)
 800191a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001926:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_ADC_MspInit+0x298>)
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_ADC_MspInit+0x298>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001942:	485e      	ldr	r0, [pc, #376]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001944:	f009 ff84 	bl	800b850 <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800194e:	f001 fe0d 	bl	800356c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_ADC_MspInit+0x298>)
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_ADC_MspInit+0x298>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2012      	movs	r0, #18
 8001964:	f009 ff4a 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001968:	2012      	movs	r0, #18
 800196a:	f009 ff63 	bl	800b834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800196e:	e149      	b.n	8001c04 <HAL_ADC_MspInit+0x3e0>
  else if(adcHandle->Instance==ADC2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <HAL_ADC_MspInit+0x2a0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	f040 80aa 	bne.w	8001ad0 <HAL_ADC_MspInit+0x2ac>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	4a49      	ldr	r2, [pc, #292]	; (8001aac <HAL_ADC_MspInit+0x288>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6453      	str	r3, [r2, #68]	; 0x44
 800198c:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_ADC_MspInit+0x288>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4a42      	ldr	r2, [pc, #264]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6313      	str	r3, [r2, #48]	; 0x30
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a34      	ldr	r2, [pc, #208]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_ADC_MspInit+0x288>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019ec:	233f      	movs	r3, #63	; 0x3f
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f0:	2303      	movs	r3, #3
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019fc:	4619      	mov	r1, r3
 80019fe:	482c      	ldr	r0, [pc, #176]	; (8001ab0 <HAL_ADC_MspInit+0x28c>)
 8001a00:	f00a fb28 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a04:	23ff      	movs	r3, #255	; 0xff
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <HAL_ADC_MspInit+0x290>)
 8001a18:	f00a fb1c 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4822      	ldr	r0, [pc, #136]	; (8001ab8 <HAL_ADC_MspInit+0x294>)
 8001a30:	f00a fb10 	bl	800c054 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_ADC_MspInit+0x2a8>)
 8001a38:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a78:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a7a:	f009 fee9 	bl	800b850 <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8001a84:	f001 fd72 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_ADC_MspInit+0x2a4>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2105      	movs	r1, #5
 8001a98:	2012      	movs	r0, #18
 8001a9a:	f009 feaf 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a9e:	2012      	movs	r0, #18
 8001aa0:	f009 fec8 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8001aa4:	e0ae      	b.n	8001c04 <HAL_ADC_MspInit+0x3e0>
 8001aa6:	bf00      	nop
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	20007770 	.word	0x20007770
 8001ac0:	40026470 	.word	0x40026470
 8001ac4:	40012100 	.word	0x40012100
 8001ac8:	200077d0 	.word	0x200077d0
 8001acc:	40026440 	.word	0x40026440
  else if(adcHandle->Instance==ADC3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_ADC_MspInit+0x3e8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	f040 8094 	bne.w	8001c04 <HAL_ADC_MspInit+0x3e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6453      	str	r3, [r2, #68]	; 0x44
 8001aec:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a43      	ldr	r2, [pc, #268]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_ADC_MspInit+0x3ec>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b50:	2303      	movs	r3, #3
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <HAL_ADC_MspInit+0x3f0>)
 8001b60:	f00a fa78 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b64:	2307      	movs	r3, #7
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4828      	ldr	r0, [pc, #160]	; (8001c18 <HAL_ADC_MspInit+0x3f4>)
 8001b78:	f00a fa6c 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b80:	2303      	movs	r3, #3
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4823      	ldr	r0, [pc, #140]	; (8001c1c <HAL_ADC_MspInit+0x3f8>)
 8001b90:	f00a fa60 	bl	800c054 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_ADC_MspInit+0x400>)
 8001b98:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001b9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bbc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bda:	f009 fe39 	bl	800b850 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0x3c4>
      Error_Handler();
 8001be4:	f001 fcc2 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_ADC_MspInit+0x3fc>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f009 fdff 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bfe:	2012      	movs	r0, #18
 8001c00:	f009 fe18 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8001c04:	bf00      	nop
 8001c06:	3750      	adds	r7, #80	; 0x50
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40012200 	.word	0x40012200
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	20007680 	.word	0x20007680
 8001c24:	40026410 	.word	0x40026410

08001c28 <truncate_text_file>:
/*
@brief :
The function performs truncate operation
*/
void truncate_text_file( struct FILE_OPERATIONS *file_operations, lfs_t lfs, lfs_file_t file)
{
 8001c28:	b084      	sub	sp, #16
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	f107 001c 	add.w	r0, r7, #28
 8001c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  int fd = lfs_file_open(&lfs, &file, file_operations->filepath, LFS_O_TRUNC | LFS_O_CREAT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	1d5a      	adds	r2, r3, #5
 8001c3e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001c42:	f107 001c 	add.w	r0, r7, #28
 8001c46:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c4a:	f008 ffc5 	bl	800abd8 <lfs_file_open>
 8001c4e:	60f8      	str	r0, [r7, #12]
  if (fd >= 0)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db06      	blt.n	8001c64 <truncate_text_file+0x3c>
  {
    myprintf( "File named %s has been truncated successfully.\n", file_operations->filepath);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3305      	adds	r3, #5
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <truncate_text_file+0x68>)
 8001c5e:	f7ff f8e5 	bl	8000e2c <myprintf>
 8001c62:	e005      	b.n	8001c70 <truncate_text_file+0x48>
  }
  else
  {
    myprintf("Error opening file: %s\n", file_operations->filepath);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3305      	adds	r3, #5
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480a      	ldr	r0, [pc, #40]	; (8001c94 <truncate_text_file+0x6c>)
 8001c6c:	f7ff f8de 	bl	8000e2c <myprintf>
  }
  lfs_file_close(&lfs, &file);
 8001c70:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f008 ffe0 	bl	800ac40 <lfs_file_close>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c8a:	b004      	add	sp, #16
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	080186c4 	.word	0x080186c4
 8001c94:	080184b8 	.word	0x080184b8

08001c98 <track_read_seek_pointer>:
}



void track_read_seek_pointer(struct FILE_OPERATIONS *file_pointer, int8_t seek_pointer[16])
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0ee      	sub	sp, #440	; 0x1b8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	6018      	str	r0, [r3, #0]
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	6019      	str	r1, [r3, #0]
  myprintf("track read seek pointer called \n");
 8001ca6:	4867      	ldr	r0, [pc, #412]	; (8001e44 <track_read_seek_pointer+0x1ac>)
 8001ca8:	f7ff f8c0 	bl	8000e2c <myprintf>
  // SEEK_POINTER seek_pointer;
   int index = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   lfs_t lfs, lfs2;
   lfs_file_t file, file2;
   int fd;
   fd = lfs_file_open(&lfs, &file, file_pointer->filepath, LFS_O_RDONLY);
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1d5a      	adds	r2, r3, #5
 8001cb8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001cbc:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f008 ff89 	bl	800abd8 <lfs_file_open>
 8001cc6:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
   uint32_t address = file_pointer->address[3] << 24 | file_pointer->address[2] << 16 | file_pointer->address[1] << 8 | file_pointer->address[0] & 0xff;
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001cd2:	061a      	lsls	r2, r3, #24
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	4313      	orrs	r3, r2
 8001cec:	1d3a      	adds	r2, r7, #4
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

  // if (readBytes > 0)
  {
    if (file_pointer->filepath == "satHealth.txt")
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3305      	adds	r3, #5
 8001d00:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <track_read_seek_pointer+0x1b0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d103      	bne.n	8001d0e <track_read_seek_pointer+0x76>
      index = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d0c:	e020      	b.n	8001d50 <track_read_seek_pointer+0xb8>
    else if (file_pointer->filepath == "cam.txt")
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3305      	adds	r3, #5
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <track_read_seek_pointer+0x1b4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d103      	bne.n	8001d22 <track_read_seek_pointer+0x8a>
      index = 4;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d20:	e016      	b.n	8001d50 <track_read_seek_pointer+0xb8>

    else if (file_pointer->filepath == "epdm.txt")
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3305      	adds	r3, #5
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <track_read_seek_pointer+0x1b8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d103      	bne.n	8001d36 <track_read_seek_pointer+0x9e>
      index = 4 * 2;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d34:	e00c      	b.n	8001d50 <track_read_seek_pointer+0xb8>

    else if (file_pointer->filepath == "adcs.txt")
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3305      	adds	r3, #5
 8001d3c:	4a45      	ldr	r2, [pc, #276]	; (8001e54 <track_read_seek_pointer+0x1bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d103      	bne.n	8001d4a <track_read_seek_pointer+0xb2>
      index = 3 * 4;
 8001d42:	230c      	movs	r3, #12
 8001d44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d48:	e002      	b.n	8001d50 <track_read_seek_pointer+0xb8>

    else
      myprintf( "Some error while updating flags data\n");
 8001d4a:	4843      	ldr	r0, [pc, #268]	; (8001e58 <track_read_seek_pointer+0x1c0>)
 8001d4c:	f7ff f86e 	bl	8000e2c <myprintf>
  }
  seek_pointer[index] = file_pointer->address[0];
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
 8001d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d5c:	463a      	mov	r2, r7
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	b24a      	sxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 1] = file_pointer->address[1];
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
 8001d6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d72:	3301      	adds	r3, #1
 8001d74:	463a      	mov	r2, r7
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b24a      	sxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 2] = file_pointer->address[2];
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f893 10cf 	ldrb.w	r1, [r3, #207]	; 0xcf
 8001d86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	463a      	mov	r2, r7
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	b24a      	sxtb	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 3] = file_pointer->address[3];
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
 8001d9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001da2:	3303      	adds	r3, #3
 8001da4:	463a      	mov	r2, r7
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	b24a      	sxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  ssize_t writeBytes = lfs_file_write(&lfs, &file , seek_pointer, sizeof(seek_pointer));
 8001dae:	463a      	mov	r2, r7
 8001db0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001db4:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001db8:	2304      	movs	r3, #4
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f008 ff9c 	bl	800acf8 <lfs_file_write>
 8001dc0:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
  if (writeBytes > 0)
 8001dc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd2d      	ble.n	8001e28 <track_read_seek_pointer+0x190>
  {
    myprintf( "Updated seek pointer data saved to mfm\n");
 8001dcc:	4823      	ldr	r0, [pc, #140]	; (8001e5c <track_read_seek_pointer+0x1c4>)
 8001dce:	f7ff f82d 	bl	8000e2c <myprintf>
    lfs_file_close(&lfs, &file);
 8001dd2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dd6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f008 ff2f 	bl	800ac40 <lfs_file_close>
    fd = lfs_file_open(&lfs, &file, file_pointer->filepath, LFS_O_CREAT | LFS_O_WRONLY);
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1d5a      	adds	r2, r3, #5
 8001de8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001dec:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001df0:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001df4:	f008 fef0 	bl	800abd8 <lfs_file_open>
 8001df8:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
    if (fd > 0)
 8001dfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	dd11      	ble.n	8001e28 <track_read_seek_pointer+0x190>
    {
      writeBytes = lfs_file_write(&lfs, &file, seek_pointer, sizeof(seek_pointer));
 8001e04:	463a      	mov	r2, r7
 8001e06:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001e0a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001e0e:	2304      	movs	r3, #4
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f008 ff71 	bl	800acf8 <lfs_file_write>
 8001e16:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
      if (writeBytes > 0)
 8001e1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	dd02      	ble.n	8001e28 <track_read_seek_pointer+0x190>
      {
        myprintf( "updated seek pointer data to sfm\n");
 8001e22:	480f      	ldr	r0, [pc, #60]	; (8001e60 <track_read_seek_pointer+0x1c8>)
 8001e24:	f7ff f802 	bl	8000e2c <myprintf>
      }
    }
  }
  lfs_file_close(&lfs,&file);
 8001e28:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e2c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f008 ff04 	bl	800ac40 <lfs_file_close>
}
 8001e38:	bf00      	nop
 8001e3a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	08018700 	.word	0x08018700
 8001e48:	08018724 	.word	0x08018724
 8001e4c:	08018734 	.word	0x08018734
 8001e50:	0801873c 	.word	0x0801873c
 8001e54:	08018748 	.word	0x08018748
 8001e58:	08018754 	.word	0x08018754
 8001e5c:	0801877c 	.word	0x0801877c
 8001e60:	080187a4 	.word	0x080187a4

08001e64 <download_file_from_flash>:

void download_file_from_flash(struct FILE_OPERATIONS *file_operations, uint8_t *data_retrieved, uint8_t size_of_buffer,  lfs_t lfs, lfs_file_t file)
{
 8001e64:	b082      	sub	sp, #8
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b0a8      	sub	sp, #160	; 0xa0
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e74:	4613      	mov	r3, r2
 8001e76:	71fb      	strb	r3, [r7, #7]

  int fd;
  int8_t seek_pointer[16];

  uint8_t update_address = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t address = file_operations->address[3] << 24 | file_operations->address[2] << 16 | file_operations->address[1] << 8 | file_operations->address[0] & 0xff;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001e84:	061a      	lsls	r2, r3, #24
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint16_t number_of_packets = file_operations->number_of_packets[1] << 8 | file_operations->number_of_packets[0] & 0xff;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  ssize_t read_bytes;
  if (address == 0)
 8001ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d137      	bne.n	8001f38 <download_file_from_flash+0xd4>
     {
       update_address = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
       // todo read the address from the text file
       lfs_file_t fl1;
       int fd2 =  lfs_file_open(&lfs, &file, "seek_pointer.txt", LFS_O_CREAT | LFS_O_RDONLY);
 8001ece:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001ed2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001ed6:	f240 1301 	movw	r3, #257	; 0x101
 8001eda:	4a7f      	ldr	r2, [pc, #508]	; (80020d8 <download_file_from_flash+0x274>)
 8001edc:	f008 fe7c 	bl	800abd8 <lfs_file_open>
 8001ee0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
       if (fd2 >= 0)
 8001ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db1a      	blt.n	8001f22 <download_file_from_flash+0xbe>
       {
         ssize_t readBytes2 = lfs_file_read(&lfs, &file, seek_pointer, sizeof(seek_pointer));
 8001eec:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ef0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001ef4:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001ef8:	2310      	movs	r3, #16
 8001efa:	f008 fecd 	bl	800ac98 <lfs_file_read>
 8001efe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
         if (readBytes2 < 0)
 8001f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da16      	bge.n	8001f38 <download_file_from_flash+0xd4>
         {
           myprintf( "Error while reading the seek_pointer.txt in mfm\n");
 8001f0a:	4874      	ldr	r0, [pc, #464]	; (80020dc <download_file_from_flash+0x278>)
 8001f0c:	f7fe ff8e 	bl	8000e2c <myprintf>
          lfs_file_close(&lfs, &file);
 8001f10:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001f14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f008 fe90 	bl	800ac40 <lfs_file_close>
 8001f20:	e00a      	b.n	8001f38 <download_file_from_flash+0xd4>
         }
       }
       else{
    	   myprintf( "Error while opening the seek_pointer.txt in mfm\n");
 8001f22:	486f      	ldr	r0, [pc, #444]	; (80020e0 <download_file_from_flash+0x27c>)
 8001f24:	f7fe ff82 	bl	8000e2c <myprintf>
		   lfs_file_close(&lfs, &file);
 8001f28:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001f2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f008 fe84 	bl	800ac40 <lfs_file_close>
       }
     }
  fd = lfs_file_open(&lfs, &file, file_operations->filepath, LFS_O_RDONLY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1d5a      	adds	r2, r3, #5
 8001f3c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001f40:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f44:	2301      	movs	r3, #1
 8001f46:	f008 fe47 	bl	800abd8 <lfs_file_open>
 8001f4a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (fd < 0)
 8001f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da08      	bge.n	8001f68 <download_file_from_flash+0x104>
  {
    myprintf( "File named %s reading mode failed fd:%d\n", file_operations->filepath, fd);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3305      	adds	r3, #5
 8001f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4860      	ldr	r0, [pc, #384]	; (80020e4 <download_file_from_flash+0x280>)
 8001f62:	f7fe ff63 	bl	8000e2c <myprintf>
 8001f66:	e0b1      	b.n	80020cc <download_file_from_flash+0x268>
    return;
  }
  else
  {

    int size_of_file = lfs_file_seek(&lfs, &file, 0, LFS_SEEK_END);
 8001f68:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001f6c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f70:	2302      	movs	r3, #2
 8001f72:	2200      	movs	r2, #0
 8001f74:	f008 fef0 	bl	800ad58 <lfs_file_seek>
 8001f78:	67f8      	str	r0, [r7, #124]	; 0x7c
    int off; //= lfs_file_seek(&lfs, &file, address, SEEK_SET);
    myprintf("\nSize of file is %d %d\n", size_of_file, address);
 8001f7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f80:	4859      	ldr	r0, [pc, #356]	; (80020e8 <download_file_from_flash+0x284>)
 8001f82:	f7fe ff53 	bl	8000e2c <myprintf>
    int loop1 = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do
    {
      if (size_of_file > 0 & size_of_file > address)
 8001f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bfcc      	ite	gt
 8001f92:	2301      	movgt	r3, #1
 8001f94:	2300      	movle	r3, #0
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001f9e:	4299      	cmp	r1, r3
 8001fa0:	bf34      	ite	cc
 8001fa2:	2301      	movcc	r3, #1
 8001fa4:	2300      	movcs	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d061      	beq.n	8002074 <download_file_from_flash+0x210>
      {
        off = lfs_file_seek(&lfs, &file, address, LFS_SEEK_SET); // Set file pointer to the calculated address
 8001fb0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fb4:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001fb8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f008 fecb 	bl	800ad58 <lfs_file_seek>
 8001fc2:	67b8      	str	r0, [r7, #120]	; 0x78
        read_bytes = lfs_file_read(&lfs, &file, data_retrieved, size_of_buffer);
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001fca:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f008 fe62 	bl	800ac98 <lfs_file_read>
 8001fd4:	6778      	str	r0, [r7, #116]	; 0x74
        if (read_bytes >= 0)
 8001fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db3d      	blt.n	8002058 <download_file_from_flash+0x1f4>
        {
          myprintf( "Data retrieved from the flash address %d\n", address);
 8001fdc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001fe0:	4842      	ldr	r0, [pc, #264]	; (80020ec <download_file_from_flash+0x288>)
 8001fe2:	f7fe ff23 	bl	8000e2c <myprintf>

          myprintf("\n--------------------**************Read size = %zd\n", read_bytes);
 8001fe6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001fe8:	4841      	ldr	r0, [pc, #260]	; (80020f0 <download_file_from_flash+0x28c>)
 8001fea:	f7fe ff1f 	bl	8000e2c <myprintf>
          myprintf("\n\n--------------------------Data received----\n");
 8001fee:	4841      	ldr	r0, [pc, #260]	; (80020f4 <download_file_from_flash+0x290>)
 8001ff0:	f7fe ff1c 	bl	8000e2c <myprintf>
          for (int j = 0; j < size_of_buffer; j++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ffa:	e013      	b.n	8002024 <download_file_from_flash+0x1c0>
          {
            myprintf("%02x|%c ", data_retrieved[j], data_retrieved[j]); // Print in hexadecimal format
 8001ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4838      	ldr	r0, [pc, #224]	; (80020f8 <download_file_from_flash+0x294>)
 8002016:	f7fe ff09 	bl	8000e2c <myprintf>
          for (int j = 0; j < size_of_buffer; j++)
 800201a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800202a:	429a      	cmp	r2, r3
 800202c:	dbe6      	blt.n	8001ffc <download_file_from_flash+0x198>
          }
          if (number_of_packets > 0)
 800202e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <download_file_from_flash+0x1dc>
            number_of_packets -= 1;
 8002036:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800203a:	3b01      	subs	r3, #1
 800203c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
          loop1 += 1;
 8002040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002044:	3301      	adds	r3, #1
 8002046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          address += size_of_buffer;
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002050:	4413      	add	r3, r2
 8002052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002056:	e00d      	b.n	8002074 <download_file_from_flash+0x210>
//          lfs_file_close(&lfs,&file);
        }
        else
        {
          myprintf( "Failed to read data from the flash address %d\n", address);
 8002058:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800205c:	4827      	ldr	r0, [pc, #156]	; (80020fc <download_file_from_flash+0x298>)
 800205e:	f7fe fee5 	bl	8000e2c <myprintf>
          lfs_file_close(&lfs,&file);
 8002062:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002066:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f008 fde7 	bl	800ac40 <lfs_file_close>
          break;
 8002072:	e003      	b.n	800207c <download_file_from_flash+0x218>
        }
      }
    } while (number_of_packets > 1); // loop1 < number_of_packets |
 8002074:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002078:	2b01      	cmp	r3, #1
 800207a:	d887      	bhi.n	8001f8c <download_file_from_flash+0x128>
    // todo : add seekpointer read index in internal and external flash memories
    if (update_address == 1)
 800207c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002080:	2b01      	cmp	r3, #1
 8002082:	d117      	bne.n	80020b4 <download_file_from_flash+0x250>
    {
      file_operations->address[3] = (uint8_t)address >> 24 & 0xff;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      file_operations->address[2] = (uint8_t)address >> 16 & 0xff;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
      file_operations->address[1] = (uint8_t)address >> 8 & 0xff;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      file_operations->address[0] = (uint8_t)address & 0xff;
 800209c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
      track_read_seek_pointer(file_operations, seek_pointer);
 80020a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ac:	4619      	mov	r1, r3
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff fdf2 	bl	8001c98 <track_read_seek_pointer>
    }
  }
  lfs_file_close(&lfs, &file);
 80020b4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80020b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fdbe 	bl	800ac40 <lfs_file_close>
  // myprintf("\n\n--------------------------Data received----\n");
  // for (int j = 0; j < sizeof(data_retrieved); j++)
  // {
  //   myprintf("%02x|%c ", data_retrieved[j],data_retrieved1[j]); // Print in hexadecimal format
  // }
  myprintf("\n--------------------**************Size = %zu\n", sizeof(data_retrieved));
 80020c4:	2104      	movs	r1, #4
 80020c6:	480e      	ldr	r0, [pc, #56]	; (8002100 <download_file_from_flash+0x29c>)
 80020c8:	f7fe feb0 	bl	8000e2c <myprintf>
}
 80020cc:	37a0      	adds	r7, #160	; 0xa0
 80020ce:	46bd      	mov	sp, r7
 80020d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020d4:	b002      	add	sp, #8
 80020d6:	4770      	bx	lr
 80020d8:	080187c8 	.word	0x080187c8
 80020dc:	080187dc 	.word	0x080187dc
 80020e0:	08018810 	.word	0x08018810
 80020e4:	08018844 	.word	0x08018844
 80020e8:	08018870 	.word	0x08018870
 80020ec:	08018888 	.word	0x08018888
 80020f0:	080188b4 	.word	0x080188b4
 80020f4:	080188e8 	.word	0x080188e8
 80020f8:	08018918 	.word	0x08018918
 80020fc:	08018924 	.word	0x08018924
 8002100:	08018954 	.word	0x08018954

08002104 <perform_file_operations>:
filepath: the full path to the textfile: MOUNT_POINT/TEXT_FILENAME
address: 4 byte of adress data here it might be the data download counter
number of packets: may be DNC(0x00,0x00) or number of packets in 2 bytes.
*/
void perform_file_operations(struct FILE_OPERATIONS *file_operations, lfs_t Lfs, lfs_file_t File)
{
 8002104:	b084      	sub	sp, #16
 8002106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002108:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 800210c:	af34      	add	r7, sp, #208	; 0xd0
 800210e:	f107 040c 	add.w	r4, r7, #12
 8002112:	6020      	str	r0, [r4, #0]
 8002114:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8002118:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int data_retrieved[122] = {'\0'};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4618      	mov	r0, r3
 8002122:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8002126:	461a      	mov	r2, r3
 8002128:	2100      	movs	r1, #0
 800212a:	f014 ff9b 	bl	8017064 <memset>
  myprintf("*********************perform file operations has been called******\n");
 800212e:	4854      	ldr	r0, [pc, #336]	; (8002280 <perform_file_operations+0x17c>)
 8002130:	f7fe fe7c 	bl	8000e2c <myprintf>

  switch (file_operations->cmd)
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b1d      	cmp	r3, #29
 800213e:	d01c      	beq.n	800217a <perform_file_operations+0x76>
 8002140:	2bca      	cmp	r3, #202	; 0xca
 8002142:	f040 808b 	bne.w	800225c <perform_file_operations+0x158>
  {
  case 0xca:
    truncate_text_file(file_operations, Lfs, File);
 8002146:	f107 040c 	add.w	r4, r7, #12
 800214a:	a81c      	add	r0, sp, #112	; 0x70
 800214c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002150:	2254      	movs	r2, #84	; 0x54
 8002152:	4619      	mov	r1, r3
 8002154:	f014 ff78 	bl	8017048 <memcpy>
 8002158:	4668      	mov	r0, sp
 800215a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800215e:	2270      	movs	r2, #112	; 0x70
 8002160:	4619      	mov	r1, r3
 8002162:	f014 ff71 	bl	8017048 <memcpy>
 8002166:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800216a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216c:	6820      	ldr	r0, [r4, #0]
 800216e:	f7ff fd5b 	bl	8001c28 <truncate_text_file>
    myprintf("-----Trucate text file called \n");
 8002172:	4844      	ldr	r0, [pc, #272]	; (8002284 <perform_file_operations+0x180>)
 8002174:	f7fe fe5a 	bl	8000e2c <myprintf>
    break;
 8002178:	e071      	b.n	800225e <perform_file_operations+0x15a>
  case 0x1d:
    download_file_from_flash(file_operations, data_retrieved, 112, Lfs, File);
 800217a:	f107 0510 	add.w	r5, r7, #16
 800217e:	f107 040c 	add.w	r4, r7, #12
 8002182:	a81e      	add	r0, sp, #120	; 0x78
 8002184:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002188:	2254      	movs	r2, #84	; 0x54
 800218a:	4619      	mov	r1, r3
 800218c:	f014 ff5c 	bl	8017048 <memcpy>
 8002190:	4668      	mov	r0, sp
 8002192:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002196:	2278      	movs	r2, #120	; 0x78
 8002198:	4619      	mov	r1, r3
 800219a:	f014 ff55 	bl	8017048 <memcpy>
 800219e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80021a2:	2270      	movs	r2, #112	; 0x70
 80021a4:	4629      	mov	r1, r5
 80021a6:	6820      	ldr	r0, [r4, #0]
 80021a8:	f7ff fe5c 	bl	8001e64 <download_file_from_flash>
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	781b      	ldrb	r3, [r3, #0]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021b4:	469c      	mov	ip, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	789b      	ldrb	r3, [r3, #2]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021be:	469e      	mov	lr, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	785b      	ldrb	r3, [r3, #1]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021c8:	4619      	mov	r1, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	791b      	ldrb	r3, [r3, #4]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021d2:	4618      	mov	r0, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	78db      	ldrb	r3, [r3, #3]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021dc:	461c      	mov	r4, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3305      	adds	r3, #5
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021f0:	4615      	mov	r5, r2
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	f892 20cf 	ldrb.w	r2, [r2, #207]	; 0xcf
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 80021fc:	4616      	mov	r6, r2
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 80021fe:	f107 020c 	add.w	r2, r7, #12
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f892 20ce 	ldrb.w	r2, [r2, #206]	; 0xce
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002208:	60ba      	str	r2, [r7, #8]
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 800220a:	f107 020c 	add.w	r2, r7, #12
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002214:	607a      	str	r2, [r7, #4]
           file_operations->number_of_packets[0], file_operations->number_of_packets[1]);
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f892 20d1 	ldrb.w	r2, [r2, #209]	; 0xd1
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002220:	603a      	str	r2, [r7, #0]
           file_operations->number_of_packets[0], file_operations->number_of_packets[1]);
 8002222:	f107 020c 	add.w	r2, r7, #12
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 800222c:	9209      	str	r2, [sp, #36]	; 0x24
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	9208      	str	r2, [sp, #32]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	9207      	str	r2, [sp, #28]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	9206      	str	r2, [sp, #24]
 800223a:	9605      	str	r6, [sp, #20]
 800223c:	9504      	str	r5, [sp, #16]
 800223e:	9303      	str	r3, [sp, #12]
 8002240:	9402      	str	r4, [sp, #8]
 8002242:	9001      	str	r0, [sp, #4]
 8002244:	9100      	str	r1, [sp, #0]
 8002246:	4673      	mov	r3, lr
 8002248:	4662      	mov	r2, ip
 800224a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <perform_file_operations+0x184>)
 8002250:	f7fe fdec 	bl	8000e2c <myprintf>

    myprintf("-------Data download function has been called\n");
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <perform_file_operations+0x188>)
 8002256:	f7fe fde9 	bl	8000e2c <myprintf>

    break;
 800225a:	e000      	b.n	800225e <perform_file_operations+0x15a>
  default:
    break;
 800225c:	bf00      	nop
  }
  myprintf("\n**************----\nhey filepath is %s\n***********\n", file_operations->filepath);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3305      	adds	r3, #5
 8002266:	4619      	mov	r1, r3
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <perform_file_operations+0x18c>)
 800226a:	f7fe fddf 	bl	8000e2c <myprintf>
}
 800226e:	bf00      	nop
 8002270:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002274:	46bd      	mov	sp, r7
 8002276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800227a:	b004      	add	sp, #16
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	08018984 	.word	0x08018984
 8002284:	080189c8 	.word	0x080189c8
 8002288:	080189e8 	.word	0x080189e8
 800228c:	08018a94 	.word	0x08018a94
 8002290:	08018ac4 	.word	0x08018ac4

08002294 <parse_command>:


void parse_command(uint8_t COM_RX_DATA[30], lfs_t Lfs1, lfs_file_t File1)
{
 8002294:	b084      	sub	sp, #16
 8002296:	b5b0      	push	{r4, r5, r7, lr}
 8002298:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800229c:	af32      	add	r7, sp, #200	; 0xc8
 800229e:	1d3c      	adds	r4, r7, #4
 80022a0:	6020      	str	r0, [r4, #0]
 80022a2:	f507 7065 	add.w	r0, r7, #916	; 0x394
 80022a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  myprintf("parse command starting\n");
 80022aa:	4887      	ldr	r0, [pc, #540]	; (80024c8 <parse_command+0x234>)
 80022ac:	f7fe fdbe 	bl	8000e2c <myprintf>
  for (int j = 0; j < 25; j++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80022b6:	e015      	b.n	80022e4 <parse_command+0x50>
  {
    myprintf("%02x|%c ,", COM_RX_DATA[j], COM_RX_DATA[j]);
 80022b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80022bc:	1d3a      	adds	r2, r7, #4
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80022ca:	1d3a      	adds	r2, r7, #4
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	487d      	ldr	r0, [pc, #500]	; (80024cc <parse_command+0x238>)
 80022d6:	f7fe fda9 	bl	8000e2c <myprintf>
  for (int j = 0; j < 25; j++)
 80022da:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80022de:	3301      	adds	r3, #1
 80022e0:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80022e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80022e8:	2b18      	cmp	r3, #24
 80022ea:	dde5      	ble.n	80022b8 <parse_command+0x24>
  }

  uint8_t HEADER = 0, MCU_ID = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
  if (COM_RX_DATA[16] >= 0x01 && COM_RX_DATA[16] <= 0x05)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3310      	adds	r3, #16
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d011      	beq.n	8002328 <parse_command+0x94>
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3310      	adds	r3, #16
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d80b      	bhi.n	8002328 <parse_command+0x94>
  {
    HEADER = 16;
 8002310:	2310      	movs	r3, #16
 8002312:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
    MCU_ID = COM_RX_DATA[HEADER];
 8002316:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800231a:	1d3a      	adds	r2, r7, #4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
 8002326:	e016      	b.n	8002356 <parse_command+0xc2>
  }
  else if (COM_RX_DATA[17] >= 0x01 && COM_RX_DATA[17] <= 0x05)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3311      	adds	r3, #17
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <parse_command+0xc2>
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3311      	adds	r3, #17
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d80a      	bhi.n	8002356 <parse_command+0xc2>
  {
    HEADER = 17;
 8002340:	2311      	movs	r3, #17
 8002342:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
    MCU_ID = COM_RX_DATA[HEADER];
 8002346:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800234a:	1d3a      	adds	r2, r7, #4
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
  }

  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002356:	f897 137b 	ldrb.w	r1, [r7, #891]	; 0x37b
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 800235a:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800235e:	1d3a      	adds	r2, r7, #4
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002366:	4618      	mov	r0, r3
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 8002368:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800236c:	3301      	adds	r3, #1
 800236e:	1d3a      	adds	r2, r7, #4
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002376:	461c      	mov	r4, r3
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 8002378:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800237c:	3302      	adds	r3, #2
 800237e:	1d3a      	adds	r2, r7, #4
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4623      	mov	r3, r4
 800238a:	4602      	mov	r2, r0
 800238c:	4850      	ldr	r0, [pc, #320]	; (80024d0 <parse_command+0x23c>)
 800238e:	f7fe fd4d 	bl	8000e2c <myprintf>
  uint8_t ack[85] = {0x53, 0xac, 0x04, 0x01, 0x62, 0x63, 0x7e};
 8002392:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <parse_command+0x240>)
 8002394:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239c:	e883 0003 	stmia.w	r3, {r0, r1}
 80023a0:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80023a4:	224d      	movs	r2, #77	; 0x4d
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f014 fe5b 	bl	8017064 <memset>
  ack[83] = 0x7e;
 80023ae:	237e      	movs	r3, #126	; 0x7e
 80023b0:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
  ack[82] = 0x7e;
 80023b4:	237e      	movs	r3, #126	; 0x7e
 80023b6:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e

  uint8_t cmds[3];

  cmds[0] = (uint8_t)COM_RX_DATA[HEADER + 1];
 80023ba:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023be:	3301      	adds	r3, #1
 80023c0:	1d3a      	adds	r2, r7, #4
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f887 3308 	strb.w	r3, [r7, #776]	; 0x308
  cmds[1] = (uint8_t)COM_RX_DATA[HEADER + 2];
 80023cc:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023d0:	3302      	adds	r3, #2
 80023d2:	1d3a      	adds	r2, r7, #4
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f887 3309 	strb.w	r3, [r7, #777]	; 0x309
  cmds[2] = (uint8_t)COM_RX_DATA[HEADER + 3];
 80023de:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023e2:	3303      	adds	r3, #3
 80023e4:	1d3a      	adds	r2, r7, #4
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f887 330a 	strb.w	r3, [r7, #778]	; 0x30a
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023f0:	f897 137b 	ldrb.w	r1, [r7, #891]	; 0x37b
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 80023f4:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023f8:	461a      	mov	r2, r3
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 80023fa:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023fe:	4618      	mov	r0, r3
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 8002400:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4603      	mov	r3, r0
 8002408:	4831      	ldr	r0, [pc, #196]	; (80024d0 <parse_command+0x23c>)
 800240a:	f7fe fd0f 	bl	8000e2c <myprintf>

  if (cmds[0] == 0xfd & cmds[1] == 0xba & cmds[2] == 0xd0)
 800240e:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002412:	2bfd      	cmp	r3, #253	; 0xfd
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002420:	2bba      	cmp	r3, #186	; 0xba
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4013      	ands	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002434:	2bd0      	cmp	r3, #208	; 0xd0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <parse_command+0x1be>
  {
    // HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_SET);
    myprintf("\n ********************Digipeater mode turned on********************\n");
 8002444:	4824      	ldr	r0, [pc, #144]	; (80024d8 <parse_command+0x244>)
 8002446:	f7fe fcf1 	bl	8000e2c <myprintf>
    digipeating = 1;
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <parse_command+0x248>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
    // //sleep(3);
    // HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_RESET);

    return 33;
 8002450:	e3aa      	b.n	8002ba8 <parse_command+0x914>
  }
  else if (cmds[0] == 0xdf & cmds[1] == 0xab & cmds[2] == 0xd1)
 8002452:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002456:	2bdf      	cmp	r3, #223	; 0xdf
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2da      	uxtb	r2, r3
 8002460:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002464:	2bab      	cmp	r3, #171	; 0xab
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4013      	ands	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002478:	2bd1      	cmp	r3, #209	; 0xd1
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <parse_command+0x202>
  {
    myprintf("\n ********************Digipeater mode turned off********************\n");
 8002488:	4815      	ldr	r0, [pc, #84]	; (80024e0 <parse_command+0x24c>)
 800248a:	f7fe fccf 	bl	8000e2c <myprintf>
    digipeating = 0;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <parse_command+0x248>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    return 33;
 8002494:	e388      	b.n	8002ba8 <parse_command+0x914>
  }
  myprintf("MCU ID %d |%02x\n", cmds[0]);
 8002496:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 800249a:	4619      	mov	r1, r3
 800249c:	4811      	ldr	r0, [pc, #68]	; (80024e4 <parse_command+0x250>)
 800249e:	f7fe fcc5 	bl	8000e2c <myprintf>
  switch (MCU_ID)
 80024a2:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	f200 8356 	bhi.w	8002b5a <parse_command+0x8c6>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <parse_command+0x220>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024e9 	.word	0x080024e9
 80024b8:	08002a0d 	.word	0x08002a0d
 80024bc:	08002a57 	.word	0x08002a57
 80024c0:	08002a9f 	.word	0x08002a9f
 80024c4:	08002b19 	.word	0x08002b19
 80024c8:	08018af8 	.word	0x08018af8
 80024cc:	08018b10 	.word	0x08018b10
 80024d0:	08018b1c 	.word	0x08018b1c
 80024d4:	08018f7c 	.word	0x08018f7c
 80024d8:	08018b8c 	.word	0x08018b8c
 80024dc:	20007900 	.word	0x20007900
 80024e0:	08018bd4 	.word	0x08018bd4
 80024e4:	08018c1c 	.word	0x08018c1c
  case OBC_MCU: /*
                Command to perform flash operations by the OBC
                */

  { // __file_operations.cmd = COM_RX_DATA[HEADER + 1];
    myprintf("OBC MCU ID has been received\n");
 80024e8:	4891      	ldr	r0, [pc, #580]	; (8002730 <parse_command+0x49c>)
 80024ea:	f7fe fc9f 	bl	8000e2c <myprintf>
    // break; // TO remove this later
    if (cmds[0] == 0xCA | cmds[0] == 0x1D)
 80024ee:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80024f2:	2bca      	cmp	r3, #202	; 0xca
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002500:	2b1d      	cmp	r3, #29
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4313      	orrs	r3, r2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 823d 	beq.w	800298e <parse_command+0x6fa>
    {
      struct FILE_OPERATIONS __file_operations = {
 8002514:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002518:	4618      	mov	r0, r3
 800251a:	23d3      	movs	r3, #211	; 0xd3
 800251c:	461a      	mov	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f014 fda0 	bl	8017064 <memset>
          .filepath = {'\0'},       // Initialize as an empty string
          .address = {0},           // Initialize all elements to 0
          .rsv_table = {0}          // Initialize all elements to 0
      };

      __file_operations.cmd = cmds[0];
 8002524:	f897 2308 	ldrb.w	r2, [r7, #776]	; 0x308
 8002528:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800252c:	701a      	strb	r2, [r3, #0]
      // __file_operations.select_file = ;
      if ((COM_RX_DATA[HEADER + 2] == 0xD1) || (COM_RX_DATA[HEADER + 2] == 0xD2))
 800252e:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002532:	3302      	adds	r3, #2
 8002534:	1d3a      	adds	r2, r7, #4
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2bd1      	cmp	r3, #209	; 0xd1
 800253e:	d008      	beq.n	8002552 <parse_command+0x2be>
 8002540:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002544:	3302      	adds	r3, #2
 8002546:	1d3a      	adds	r2, r7, #4
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2bd2      	cmp	r3, #210	; 0xd2
 8002550:	d103      	bne.n	800255a <parse_command+0x2c6>
      {
        __file_operations.select_flash = MAIN_FLASH_MEMORY;
 8002552:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002556:	2200      	movs	r2, #0
 8002558:	709a      	strb	r2, [r3, #2]
//        if ((COM_RX_DATA[HEADER + 2] == 0xD2))
//          strcpy(__file_operations.filepath, MFM_MSN_STRPATH);
//        else
//          strcpy(__file_operations.filepath, MFM_MAIN_STRPATH);
      }
      if ((COM_RX_DATA[HEADER + 2] == 0xD3) || (COM_RX_DATA[HEADER + 2] == 0xD4))
 800255a:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800255e:	3302      	adds	r3, #2
 8002560:	1d3a      	adds	r2, r7, #4
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2bd3      	cmp	r3, #211	; 0xd3
 800256a:	d008      	beq.n	800257e <parse_command+0x2ea>
 800256c:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002570:	3302      	adds	r3, #2
 8002572:	1d3a      	adds	r2, r7, #4
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2bd4      	cmp	r3, #212	; 0xd4
 800257c:	d103      	bne.n	8002586 <parse_command+0x2f2>
      {
        __file_operations.select_flash = SHARED_FLASH_MEMORY;
 800257e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002582:	2201      	movs	r2, #1
 8002584:	709a      	strb	r2, [r3, #2]
//        if ((COM_RX_DATA[HEADER + 2] == 0xD3))
//          strcpy(__file_operations.filepath, SFM_MAIN_STRPATH);
//        else
//          strcpy(__file_operations.filepath, SFM_MSN_STRPATH);
      }
      char filename[7][30] = {"flags.txt", "satHealth.txt", "satellite_Logs.txt", "reservation_table.txt", "cam.txt", "epdm.txt", "adcs.txt"};
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <parse_command+0x4a0>)
 800258c:	4618      	mov	r0, r3
 800258e:	4611      	mov	r1, r2
 8002590:	23d2      	movs	r3, #210	; 0xd2
 8002592:	461a      	mov	r2, r3
 8002594:	f014 fd58 	bl	8017048 <memcpy>
      myprintf("Cmd[0]: %02x Cmd[1]: %02x Cmd[2]: %02x\n",cmds[0],cmds[1],cmds[2]);
 8002598:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 800259c:	4619      	mov	r1, r3
 800259e:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 80025a2:	461a      	mov	r2, r3
 80025a4:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80025a8:	4863      	ldr	r0, [pc, #396]	; (8002738 <parse_command+0x4a4>)
 80025aa:	f7fe fc3f 	bl	8000e2c <myprintf>
      if ((cmds[2] == 0xF1))
 80025ae:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80025b2:	2bf1      	cmp	r3, #241	; 0xf1
 80025b4:	d11f      	bne.n	80025f6 <parse_command+0x362>
      {
        __file_operations.select_file = FLAGS;
 80025b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ba:	2200      	movs	r2, #0
 80025bc:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "flags.txt");
 80025be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025c2:	3305      	adds	r3, #5
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe13 	bl	80001f0 <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025d2:	3305      	adds	r3, #5
 80025d4:	4413      	add	r3, r2
 80025d6:	4959      	ldr	r1, [pc, #356]	; (800273c <parse_command+0x4a8>)
 80025d8:	461a      	mov	r2, r3
 80025da:	460b      	mov	r3, r1
 80025dc:	cb03      	ldmia	r3!, {r0, r1}
 80025de:	6010      	str	r0, [r2, #0]
 80025e0:	6051      	str	r1, [r2, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	8113      	strh	r3, [r2, #8]
        myprintf("Selected file is %s\n", __file_operations.select_file);
 80025e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4854      	ldr	r0, [pc, #336]	; (8002740 <parse_command+0x4ac>)
 80025f0:	f7fe fc1c 	bl	8000e2c <myprintf>
 80025f4:	e0ca      	b.n	800278c <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF2))
 80025f6:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80025fa:	2bf2      	cmp	r3, #242	; 0xf2
 80025fc:	d120      	bne.n	8002640 <parse_command+0x3ac>
      {
        __file_operations.select_file = SATELLITE_HEALTH;
 80025fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002602:	2201      	movs	r2, #1
 8002604:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "satHealth.txt");
 8002606:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800260a:	3305      	adds	r3, #5
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd fdef 	bl	80001f0 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800261a:	3305      	adds	r3, #5
 800261c:	4413      	add	r3, r2
 800261e:	4a49      	ldr	r2, [pc, #292]	; (8002744 <parse_command+0x4b0>)
 8002620:	461c      	mov	r4, r3
 8002622:	4613      	mov	r3, r2
 8002624:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002626:	6020      	str	r0, [r4, #0]
 8002628:	6061      	str	r1, [r4, #4]
 800262a:	60a2      	str	r2, [r4, #8]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	81a3      	strh	r3, [r4, #12]
        myprintf("Selected file is %s\n", __file_operations.select_file);
 8002630:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	4619      	mov	r1, r3
 8002638:	4841      	ldr	r0, [pc, #260]	; (8002740 <parse_command+0x4ac>)
 800263a:	f7fe fbf7 	bl	8000e2c <myprintf>
 800263e:	e0a5      	b.n	800278c <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF3))
 8002640:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002644:	2bf3      	cmp	r3, #243	; 0xf3
 8002646:	d119      	bne.n	800267c <parse_command+0x3e8>
      {
        __file_operations.select_file = SATELLITE_LOG;
 8002648:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800264c:	2202      	movs	r2, #2
 800264e:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "satHealth.txt");
 8002650:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002654:	3305      	adds	r3, #5
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fdca 	bl	80001f0 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002664:	3305      	adds	r3, #5
 8002666:	4413      	add	r3, r2
 8002668:	4a36      	ldr	r2, [pc, #216]	; (8002744 <parse_command+0x4b0>)
 800266a:	461c      	mov	r4, r3
 800266c:	4613      	mov	r3, r2
 800266e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002670:	6020      	str	r0, [r4, #0]
 8002672:	6061      	str	r1, [r4, #4]
 8002674:	60a2      	str	r2, [r4, #8]
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	e087      	b.n	800278c <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF4))
 800267c:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002680:	2bf4      	cmp	r3, #244	; 0xf4
 8002682:	d11c      	bne.n	80026be <parse_command+0x42a>
      {
        __file_operations.select_file = RESERVATION_TABLE;
 8002684:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002688:	2203      	movs	r2, #3
 800268a:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "reservation_table.txt");
 800268c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002690:	3305      	adds	r3, #5
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fdac 	bl	80001f0 <strlen>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026a0:	3305      	adds	r3, #5
 80026a2:	4413      	add	r3, r2
 80026a4:	4a28      	ldr	r2, [pc, #160]	; (8002748 <parse_command+0x4b4>)
 80026a6:	461d      	mov	r5, r3
 80026a8:	4614      	mov	r4, r2
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	6028      	str	r0, [r5, #0]
 80026ae:	6069      	str	r1, [r5, #4]
 80026b0:	60aa      	str	r2, [r5, #8]
 80026b2:	60eb      	str	r3, [r5, #12]
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	6128      	str	r0, [r5, #16]
 80026b8:	88a3      	ldrh	r3, [r4, #4]
 80026ba:	82ab      	strh	r3, [r5, #20]
 80026bc:	e066      	b.n	800278c <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF5))
 80026be:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80026c2:	2bf5      	cmp	r3, #245	; 0xf5
 80026c4:	d116      	bne.n	80026f4 <parse_command+0x460>
      {
        strcat(__file_operations.filepath, "cam.txt");
 80026c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026ca:	3305      	adds	r3, #5
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fd8f 	bl	80001f0 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026da:	3305      	adds	r3, #5
 80026dc:	4413      	add	r3, r2
 80026de:	491b      	ldr	r1, [pc, #108]	; (800274c <parse_command+0x4b8>)
 80026e0:	461a      	mov	r2, r3
 80026e2:	460b      	mov	r3, r1
 80026e4:	cb03      	ldmia	r3!, {r0, r1}
 80026e6:	6010      	str	r0, [r2, #0]
 80026e8:	6051      	str	r1, [r2, #4]

        __file_operations.select_file = CAMERA_TXT;
 80026ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026ee:	2204      	movs	r2, #4
 80026f0:	705a      	strb	r2, [r3, #1]
 80026f2:	e04b      	b.n	800278c <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF6))
 80026f4:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80026f8:	2bf6      	cmp	r3, #246	; 0xf6
 80026fa:	d12b      	bne.n	8002754 <parse_command+0x4c0>
      {
        __file_operations.select_file = EPDM_TXT;
 80026fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002700:	2205      	movs	r2, #5
 8002702:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "epdm.txt");
 8002704:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002708:	3305      	adds	r3, #5
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fd70 	bl	80001f0 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002718:	3305      	adds	r3, #5
 800271a:	4413      	add	r3, r2
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <parse_command+0x4bc>)
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	cb03      	ldmia	r3!, {r0, r1}
 8002724:	6010      	str	r0, [r2, #0]
 8002726:	6051      	str	r1, [r2, #4]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	7213      	strb	r3, [r2, #8]
 800272c:	e02e      	b.n	800278c <parse_command+0x4f8>
 800272e:	bf00      	nop
 8002730:	08018c30 	.word	0x08018c30
 8002734:	08018fd4 	.word	0x08018fd4
 8002738:	08018c50 	.word	0x08018c50
 800273c:	080186f4 	.word	0x080186f4
 8002740:	08018c78 	.word	0x08018c78
 8002744:	08018724 	.word	0x08018724
 8002748:	08018c90 	.word	0x08018c90
 800274c:	08018734 	.word	0x08018734
 8002750:	0801873c 	.word	0x0801873c
      }
      else if ((cmds[2] == 0xF7))
 8002754:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002758:	2bf7      	cmp	r3, #247	; 0xf7
 800275a:	d117      	bne.n	800278c <parse_command+0x4f8>
      {
        __file_operations.select_file = ADCS_TXT;
 800275c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002760:	2206      	movs	r2, #6
 8002762:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "adcs.txt");
 8002764:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002768:	3305      	adds	r3, #5
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fd40 	bl	80001f0 <strlen>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002778:	3305      	adds	r3, #5
 800277a:	4413      	add	r3, r2
 800277c:	49d1      	ldr	r1, [pc, #836]	; (8002ac4 <parse_command+0x830>)
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	cb03      	ldmia	r3!, {r0, r1}
 8002784:	6010      	str	r0, [r2, #0]
 8002786:	6051      	str	r1, [r2, #4]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	7213      	strb	r3, [r2, #8]
      }

      __file_operations.rsv_table[0] = COM_RX_DATA[HEADER + 4];
 800278c:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002790:	3304      	adds	r3, #4
 8002792:	1d3a      	adds	r2, r7, #4
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4413      	add	r3, r2
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800279e:	70da      	strb	r2, [r3, #3]
      __file_operations.rsv_table[1] = COM_RX_DATA[HEADER + 5];
 80027a0:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027a4:	3305      	adds	r3, #5
 80027a6:	1d3a      	adds	r2, r7, #4
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027b2:	711a      	strb	r2, [r3, #4]

      __file_operations.address[0] = COM_RX_DATA[HEADER + 6];
 80027b4:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027b8:	3306      	adds	r3, #6
 80027ba:	1d3a      	adds	r2, r7, #4
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027c6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
      __file_operations.address[1] = COM_RX_DATA[HEADER + 7];
 80027ca:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027ce:	3307      	adds	r3, #7
 80027d0:	1d3a      	adds	r2, r7, #4
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027dc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      __file_operations.address[2] = COM_RX_DATA[HEADER + 8];
 80027e0:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027e4:	3308      	adds	r3, #8
 80027e6:	1d3a      	adds	r2, r7, #4
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027f2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
      __file_operations.address[3] = COM_RX_DATA[HEADER + 9];
 80027f6:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027fa:	3309      	adds	r3, #9
 80027fc:	1d3a      	adds	r2, r7, #4
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4413      	add	r3, r2
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002808:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      // myprintf("cmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
      //    __file_operations.cmd, __file_operations.select_flash, __file_operations.select_file, __file_operations.rsv_table[1], __file_operations.rsv_table[0], __file_operations.filepath,
      //    __file_operations.address[3], __file_operations.address[2], __file_operations.address[1], __file_operations.address[0],
      //    __file_operations.number_of_packets[0], __file_operations.number_of_packets[1]);
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 800280c:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002814:	2255      	movs	r2, #85	; 0x55
 8002816:	48ac      	ldr	r0, [pc, #688]	; (8002ac8 <parse_command+0x834>)
 8002818:	f00c fe11 	bl	800f43e <HAL_UART_Transmit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <parse_command+0x594>
 8002822:	48aa      	ldr	r0, [pc, #680]	; (8002acc <parse_command+0x838>)
 8002824:	f7fe fb02 	bl	8000e2c <myprintf>
      perform_file_operations(&__file_operations, Lfs1, File1);
 8002828:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800282c:	a81c      	add	r0, sp, #112	; 0x70
 800282e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002832:	2254      	movs	r2, #84	; 0x54
 8002834:	4619      	mov	r1, r3
 8002836:	f014 fc07 	bl	8017048 <memcpy>
 800283a:	4668      	mov	r0, sp
 800283c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002840:	2270      	movs	r2, #112	; 0x70
 8002842:	4619      	mov	r1, r3
 8002844:	f014 fc00 	bl	8017048 <memcpy>
 8002848:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800284c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fc58 	bl	8002104 <perform_file_operations>
     if (cmds[0] == 0x1e)//can be used inside perform_file_operation looking at values of file_operation.select_file
 8002854:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002858:	2b1e      	cmp	r3, #30
 800285a:	f040 819c 	bne.w	8002b96 <parse_command+0x902>
      {
        int x, ack[85], fd, ret;
        myprintf("Data download command received\n"); // if reservation command is received then store the reservation command (do not execute)
 800285e:	489c      	ldr	r0, [pc, #624]	; (8002ad0 <parse_command+0x83c>)
 8002860:	f7fe fae4 	bl	8000e2c <myprintf>

        ack[0] = 0x53;
 8002864:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002868:	2253      	movs	r2, #83	; 0x53
 800286a:	601a      	str	r2, [r3, #0]
        // ack[1] = 0x0e;
        if (cmds[2] == 0xf6)
 800286c:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002870:	2bf6      	cmp	r3, #246	; 0xf6
 8002872:	d104      	bne.n	800287e <parse_command+0x5ea>
        {
          ack[1] = 0x0b;
 8002874:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002878:	220b      	movs	r2, #11
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	e010      	b.n	80028a0 <parse_command+0x60c>
        }
        else if (cmds[2] == 0xf7)
 800287e:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002882:	2bf7      	cmp	r3, #247	; 0xf7
 8002884:	d104      	bne.n	8002890 <parse_command+0x5fc>
        {
          ack[1] = 0x0d;
 8002886:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800288a:	220d      	movs	r2, #13
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e007      	b.n	80028a0 <parse_command+0x60c>
        }
        else if (cmds[2] == 0xf5)
 8002890:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002894:	2bf5      	cmp	r3, #245	; 0xf5
 8002896:	d103      	bne.n	80028a0 <parse_command+0x60c>
        {
          ack[1] = 0x0c;
 8002898:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800289c:	220c      	movs	r2, #12
 800289e:	605a      	str	r2, [r3, #4]
        }

        ack[2] = 0x51;
 80028a0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028a4:	2251      	movs	r2, #81	; 0x51
 80028a6:	609a      	str	r2, [r3, #8]
        for (int i = 3; i < 83; i++)
 80028a8:	2303      	movs	r3, #3
 80028aa:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80028ae:	e00c      	b.n	80028ca <parse_command+0x636>
        {
          ack[i] = i;
 80028b0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028b4:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 80028b8:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 3; i < 83; i++)
 80028c0:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80028c4:	3301      	adds	r3, #1
 80028c6:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80028ca:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80028ce:	2b52      	cmp	r3, #82	; 0x52
 80028d0:	ddee      	ble.n	80028b0 <parse_command+0x61c>
        }
        ack[83] = 0x7e;
 80028d2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028d6:	227e      	movs	r2, #126	; 0x7e
 80028d8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        int j;
        // //sleep(2);

        for (j = 0; j < 10; j++)
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80028e2:	e04f      	b.n	8002984 <parse_command+0x6f0>
        {
          myprintf("\n  Data download packet no %d\n", j + 1);
 80028e4:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80028e8:	3301      	adds	r3, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	4879      	ldr	r0, [pc, #484]	; (8002ad4 <parse_command+0x840>)
 80028ee:	f7fe fa9d 	bl	8000e2c <myprintf>
          ack[82] = j + 1;
 80028f2:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028fc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
          ack[81] = j + 1;
 8002900:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800290a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144


         HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT, GPIO_COM_4V_EN_PIN, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002914:	4870      	ldr	r0, [pc, #448]	; (8002ad8 <parse_command+0x844>)
 8002916:	f009 fd49 	bl	800c3ac <HAL_GPIO_WritePin>
          myprintf("Turning on 4V dcdc  line..\n");
 800291a:	4870      	ldr	r0, [pc, #448]	; (8002adc <parse_command+0x848>)
 800291c:	f7fe fa86 	bl	8000e2c <myprintf>
//          gpio_write(GPIO_DCDC_4V_EN, 1);
          HAL_GPIO_WritePin(GPIO_DCDC_4V_EN_PORT, GPIO_DCDC_4V_EN_PIN, GPIO_PIN_SET);
 8002920:	2201      	movs	r2, #1
 8002922:	2110      	movs	r1, #16
 8002924:	486e      	ldr	r0, [pc, #440]	; (8002ae0 <parse_command+0x84c>)
 8002926:	f009 fd41 	bl	800c3ac <HAL_GPIO_WritePin>

          myprintf("Turning on 4v RF line..\n");
 800292a:	486e      	ldr	r0, [pc, #440]	; (8002ae4 <parse_command+0x850>)
 800292c:	f7fe fa7e 	bl	8000e2c <myprintf>
          //sleep(1);
          ret = write(fd, ack, BEACON_DATA_SIZE);
 8002930:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002934:	2255      	movs	r2, #85	; 0x55
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 800293c:	f015 f8cc 	bl	8017ad8 <write>
 8002940:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
          x = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
//          for (int i = 0; i < 85; i++)
//          {
//            myprintf("%02x ", ack[i]);
//          }
         //close(fd);
          myprintf("Turning off 4v RF line..\n");
 800294a:	4867      	ldr	r0, [pc, #412]	; (8002ae8 <parse_command+0x854>)
 800294c:	f7fe fa6e 	bl	8000e2c <myprintf>
          HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002956:	4860      	ldr	r0, [pc, #384]	; (8002ad8 <parse_command+0x844>)
 8002958:	f009 fd28 	bl	800c3ac <HAL_GPIO_WritePin>
          myprintf("Turning off 4v dcdc EN line..\n");
 800295c:	4863      	ldr	r0, [pc, #396]	; (8002aec <parse_command+0x858>)
 800295e:	f7fe fa65 	bl	8000e2c <myprintf>
          HAL_GPIO_WritePin(GPIO_DCDC_4V_EN_PORT, GPIO_DCDC_4V_EN_PIN, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	2110      	movs	r1, #16
 8002966:	485e      	ldr	r0, [pc, #376]	; (8002ae0 <parse_command+0x84c>)
 8002968:	f009 fd20 	bl	800c3ac <HAL_GPIO_WritePin>
          myprintf("\n EPDM data o %d sent success\n ******//sleeping *******\n ", j + 1);
 800296c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002970:	3301      	adds	r3, #1
 8002972:	4619      	mov	r1, r3
 8002974:	485e      	ldr	r0, [pc, #376]	; (8002af0 <parse_command+0x85c>)
 8002976:	f7fe fa59 	bl	8000e2c <myprintf>
        for (j = 0; j < 10; j++)
 800297a:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800297e:	3301      	adds	r3, #1
 8002980:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8002984:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002988:	2b09      	cmp	r3, #9
 800298a:	ddab      	ble.n	80028e4 <parse_command+0x650>

      myprintf("---------Disable  kill switch\n");
    }
  }
  /* code */
  break;
 800298c:	e103      	b.n	8002b96 <parse_command+0x902>
    else if (cmds[0] == 0xee && cmds[1] == 0xaa && cmds[2] == 0xaa)
 800298e:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002992:	2bee      	cmp	r3, #238	; 0xee
 8002994:	d119      	bne.n	80029ca <parse_command+0x736>
 8002996:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 800299a:	2baa      	cmp	r3, #170	; 0xaa
 800299c:	d115      	bne.n	80029ca <parse_command+0x736>
 800299e:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80029a2:	2baa      	cmp	r3, #170	; 0xaa
 80029a4:	d111      	bne.n	80029ca <parse_command+0x736>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 80029a6:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	2255      	movs	r2, #85	; 0x55
 80029b0:	4845      	ldr	r0, [pc, #276]	; (8002ac8 <parse_command+0x834>)
 80029b2:	f00c fd44 	bl	800f43e <HAL_UART_Transmit>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <parse_command+0x72e>
 80029bc:	4843      	ldr	r0, [pc, #268]	; (8002acc <parse_command+0x838>)
 80029be:	f7fe fa35 	bl	8000e2c <myprintf>
      myprintf("---------Enable kill switch\n");
 80029c2:	484c      	ldr	r0, [pc, #304]	; (8002af4 <parse_command+0x860>)
 80029c4:	f7fe fa32 	bl	8000e2c <myprintf>
  break;
 80029c8:	e0e5      	b.n	8002b96 <parse_command+0x902>
    else if (cmds[0] == 0xee && cmds[1] == 0xee && cmds[2] == 0xee)
 80029ca:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80029ce:	2bee      	cmp	r3, #238	; 0xee
 80029d0:	f040 80e1 	bne.w	8002b96 <parse_command+0x902>
 80029d4:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 80029d8:	2bee      	cmp	r3, #238	; 0xee
 80029da:	f040 80dc 	bne.w	8002b96 <parse_command+0x902>
 80029de:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80029e2:	2bee      	cmp	r3, #238	; 0xee
 80029e4:	f040 80d7 	bne.w	8002b96 <parse_command+0x902>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 80029e8:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 80029ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f0:	2255      	movs	r2, #85	; 0x55
 80029f2:	4835      	ldr	r0, [pc, #212]	; (8002ac8 <parse_command+0x834>)
 80029f4:	f00c fd23 	bl	800f43e <HAL_UART_Transmit>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <parse_command+0x770>
 80029fe:	4833      	ldr	r0, [pc, #204]	; (8002acc <parse_command+0x838>)
 8002a00:	f7fe fa14 	bl	8000e2c <myprintf>
      myprintf("---------Disable  kill switch\n");
 8002a04:	483c      	ldr	r0, [pc, #240]	; (8002af8 <parse_command+0x864>)
 8002a06:	f7fe fa11 	bl	8000e2c <myprintf>
  break;
 8002a0a:	e0c4      	b.n	8002b96 <parse_command+0x902>

  case COM_MCU:
    // Command to ENABLE Digipeater misison
    {
      myprintf("COM MCU ID has been received\n");
 8002a0c:	483b      	ldr	r0, [pc, #236]	; (8002afc <parse_command+0x868>)
 8002a0e:	f7fe fa0d 	bl	8000e2c <myprintf>
      if (cmds[0] == 0xDF && cmds[1] == 0xAB && cmds[2] == 0xD1)
 8002a12:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a16:	2bdf      	cmp	r3, #223	; 0xdf
 8002a18:	d10a      	bne.n	8002a30 <parse_command+0x79c>
 8002a1a:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002a1e:	2bab      	cmp	r3, #171	; 0xab
 8002a20:	d106      	bne.n	8002a30 <parse_command+0x79c>
 8002a22:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a26:	2bd1      	cmp	r3, #209	; 0xd1
 8002a28:	d102      	bne.n	8002a30 <parse_command+0x79c>
      {

        myprintf("--------Disable  digipeater mission\n");
 8002a2a:	4835      	ldr	r0, [pc, #212]	; (8002b00 <parse_command+0x86c>)
 8002a2c:	f7fe f9fe 	bl	8000e2c <myprintf>
      }

      // Command to DISABLE Digipeater misison
      if (cmds[0] == 0xFD && cmds[1] == 0xBA && cmds[2] == 0xD0)
 8002a30:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a34:	2bfd      	cmp	r3, #253	; 0xfd
 8002a36:	f040 80b0 	bne.w	8002b9a <parse_command+0x906>
 8002a3a:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002a3e:	2bba      	cmp	r3, #186	; 0xba
 8002a40:	f040 80ab 	bne.w	8002b9a <parse_command+0x906>
 8002a44:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a48:	2bd0      	cmp	r3, #208	; 0xd0
 8002a4a:	f040 80a6 	bne.w	8002b9a <parse_command+0x906>
      {
        myprintf("-----------------------Enable  digipeater mission\n");
 8002a4e:	482d      	ldr	r0, [pc, #180]	; (8002b04 <parse_command+0x870>)
 8002a50:	f7fe f9ec 	bl	8000e2c <myprintf>
      }
    }
    /* code */
    break;
 8002a54:	e0a1      	b.n	8002b9a <parse_command+0x906>

  case ADCS_MCU:
    // Command to DISABLE adcs(MSN1) misison
    {
      myprintf("ADCS MCU ID has been received\n");
 8002a56:	482c      	ldr	r0, [pc, #176]	; (8002b08 <parse_command+0x874>)
 8002a58:	f7fe f9e8 	bl	8000e2c <myprintf>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002a5c:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a64:	2255      	movs	r2, #85	; 0x55
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <parse_command+0x834>)
 8002a68:	f00c fce9 	bl	800f43e <HAL_UART_Transmit>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <parse_command+0x7e4>
 8002a72:	4816      	ldr	r0, [pc, #88]	; (8002acc <parse_command+0x838>)
 8002a74:	f7fe f9da 	bl	8000e2c <myprintf>

      if (cmds[0] == 0xFD && cmds[1] == 0xBA && cmds[2] == 0xD0)
 8002a78:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a7c:	2bfd      	cmp	r3, #253	; 0xfd
 8002a7e:	f040 808e 	bne.w	8002b9e <parse_command+0x90a>
 8002a82:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002a86:	2bba      	cmp	r3, #186	; 0xba
 8002a88:	f040 8089 	bne.w	8002b9e <parse_command+0x90a>
 8002a8c:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a90:	2bd0      	cmp	r3, #208	; 0xd0
 8002a92:	f040 8084 	bne.w	8002b9e <parse_command+0x90a>
      {
        myprintf("------------ENable  adcs mission\n");
 8002a96:	481d      	ldr	r0, [pc, #116]	; (8002b0c <parse_command+0x878>)
 8002a98:	f7fe f9c8 	bl	8000e2c <myprintf>
      }
    }
    /* code */
    break;
 8002a9c:	e07f      	b.n	8002b9e <parse_command+0x90a>

  case CAM_MCU:
    // Command to ENABLE/DISABLE or run camera(MSN2) mission
    {
      myprintf("CAM MCU ID has been received\n");
 8002a9e:	481c      	ldr	r0, [pc, #112]	; (8002b10 <parse_command+0x87c>)
 8002aa0:	f7fe f9c4 	bl	8000e2c <myprintf>
      if (cmds[0] == 0xCC && cmds[1] == 0x5E && cmds[2] == 0xBD)
 8002aa4:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002aa8:	2bcc      	cmp	r3, #204	; 0xcc
 8002aaa:	d17a      	bne.n	8002ba2 <parse_command+0x90e>
 8002aac:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002ab0:	2b5e      	cmp	r3, #94	; 0x5e
 8002ab2:	d176      	bne.n	8002ba2 <parse_command+0x90e>
 8002ab4:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002ab8:	2bbd      	cmp	r3, #189	; 0xbd
 8002aba:	d172      	bne.n	8002ba2 <parse_command+0x90e>
      {
        myprintf("------------------------Enable  cam mission\n");
 8002abc:	4815      	ldr	r0, [pc, #84]	; (8002b14 <parse_command+0x880>)
 8002abe:	f7fe f9b5 	bl	8000e2c <myprintf>
      }
    }
    /* code */
    break;
 8002ac2:	e06e      	b.n	8002ba2 <parse_command+0x90e>
 8002ac4:	08018748 	.word	0x08018748
 8002ac8:	20007a18 	.word	0x20007a18
 8002acc:	08018ca8 	.word	0x08018ca8
 8002ad0:	08018cc8 	.word	0x08018cc8
 8002ad4:	08018ce8 	.word	0x08018ce8
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	08018d08 	.word	0x08018d08
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	08018d24 	.word	0x08018d24
 8002ae8:	08018d40 	.word	0x08018d40
 8002aec:	08018d5c 	.word	0x08018d5c
 8002af0:	08018d7c 	.word	0x08018d7c
 8002af4:	08018db8 	.word	0x08018db8
 8002af8:	08018dd8 	.word	0x08018dd8
 8002afc:	08018df8 	.word	0x08018df8
 8002b00:	08018e18 	.word	0x08018e18
 8002b04:	08018e40 	.word	0x08018e40
 8002b08:	08018e74 	.word	0x08018e74
 8002b0c:	08018e94 	.word	0x08018e94
 8002b10:	08018eb8 	.word	0x08018eb8
 8002b14:	08018ed8 	.word	0x08018ed8

  case EPDM_MCU:
    // Command to ENABLE/DISABLE or run epdm(MSN3) mission
    {
      myprintf("EPDM MCU ID has been received\n");
 8002b18:	4827      	ldr	r0, [pc, #156]	; (8002bb8 <parse_command+0x924>)
 8002b1a:	f7fe f987 	bl	8000e2c <myprintf>
      if (cmds[0] == 0xAC && cmds[1] == 0xCF && cmds[2] == 0xCF)
 8002b1e:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002b22:	2bac      	cmp	r3, #172	; 0xac
 8002b24:	d13f      	bne.n	8002ba6 <parse_command+0x912>
 8002b26:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002b2a:	2bcf      	cmp	r3, #207	; 0xcf
 8002b2c:	d13b      	bne.n	8002ba6 <parse_command+0x912>
 8002b2e:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002b32:	2bcf      	cmp	r3, #207	; 0xcf
 8002b34:	d137      	bne.n	8002ba6 <parse_command+0x912>
      {
        if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002b36:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	2255      	movs	r2, #85	; 0x55
 8002b40:	481e      	ldr	r0, [pc, #120]	; (8002bbc <parse_command+0x928>)
 8002b42:	f00c fc7c 	bl	800f43e <HAL_UART_Transmit>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <parse_command+0x8be>
 8002b4c:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <parse_command+0x92c>)
 8002b4e:	f7fe f96d 	bl	8000e2c <myprintf>

        myprintf("----------------EPDM MCU ID has been activated\n");
 8002b52:	481c      	ldr	r0, [pc, #112]	; (8002bc4 <parse_command+0x930>)
 8002b54:	f7fe f96a 	bl	8000e2c <myprintf>
      }
    }
    /* code */
    break;
 8002b58:	e025      	b.n	8002ba6 <parse_command+0x912>

  default:
    ack[1] = 0xac;
 8002b5a:	23ac      	movs	r3, #172	; 0xac
 8002b5c:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
    ack[2] = 0x04;
 8002b60:	2304      	movs	r3, #4
 8002b62:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e
    ack[4] = 0x63;
 8002b66:	2363      	movs	r3, #99	; 0x63
 8002b68:	f887 3310 	strb.w	r3, [r7, #784]	; 0x310
    ack[5] = 0x62;
 8002b6c:	2362      	movs	r3, #98	; 0x62
 8002b6e:	f887 3311 	strb.w	r3, [r7, #785]	; 0x311
    if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002b72:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	2255      	movs	r2, #85	; 0x55
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <parse_command+0x928>)
 8002b7e:	f00c fc5e 	bl	800f43e <HAL_UART_Transmit>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <parse_command+0x8fa>
 8002b88:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <parse_command+0x92c>)
 8002b8a:	f7fe f94f 	bl	8000e2c <myprintf>
    myprintf("The supplied command is incorrect");
 8002b8e:	480e      	ldr	r0, [pc, #56]	; (8002bc8 <parse_command+0x934>)
 8002b90:	f7fe f94c 	bl	8000e2c <myprintf>
    return;
 8002b94:	e008      	b.n	8002ba8 <parse_command+0x914>
  break;
 8002b96:	bf00      	nop
 8002b98:	e006      	b.n	8002ba8 <parse_command+0x914>
    break;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <parse_command+0x914>
    break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <parse_command+0x914>
    break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <parse_command+0x914>
    break;
 8002ba6:	bf00      	nop
  // for (int i = 0; i < BEACON_DATA_SIZE; i++)
  // {
  //     send_data_uart(COM_UART, ack[i], 1);
  //     myprintf("%02x ",ack[i]);
  // }
}
 8002ba8:	f507 7760 	add.w	r7, r7, #896	; 0x380
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002bb2:	b004      	add	sp, #16
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	08018f08 	.word	0x08018f08
 8002bbc:	20007a18 	.word	0x20007a18
 8002bc0:	08018ca8 	.word	0x08018ca8
 8002bc4:	08018f28 	.word	0x08018f28
 8002bc8:	08018f58 	.word	0x08018f58

08002bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <MX_DMA_Init+0x148>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <MX_DMA_Init+0x148>)
 8002bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <MX_DMA_Init+0x148>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <MX_DMA_Init+0x148>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a47      	ldr	r2, [pc, #284]	; (8002d14 <MX_DMA_Init+0x148>)
 8002bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <MX_DMA_Init+0x148>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	200b      	movs	r0, #11
 8002c10:	f008 fdf4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c14:	200b      	movs	r0, #11
 8002c16:	f008 fe0d 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	200c      	movs	r0, #12
 8002c20:	f008 fdec 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c24:	200c      	movs	r0, #12
 8002c26:	f008 fe05 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2105      	movs	r1, #5
 8002c2e:	200d      	movs	r0, #13
 8002c30:	f008 fde4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c34:	200d      	movs	r0, #13
 8002c36:	f008 fdfd 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	200e      	movs	r0, #14
 8002c40:	f008 fddc 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c44:	200e      	movs	r0, #14
 8002c46:	f008 fdf5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f008 fdd4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c54:	200f      	movs	r0, #15
 8002c56:	f008 fded 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	2010      	movs	r0, #16
 8002c60:	f008 fdcc 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c64:	2010      	movs	r0, #16
 8002c66:	f008 fde5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2105      	movs	r1, #5
 8002c6e:	2011      	movs	r0, #17
 8002c70:	f008 fdc4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c74:	2011      	movs	r0, #17
 8002c76:	f008 fddd 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2105      	movs	r1, #5
 8002c7e:	202f      	movs	r0, #47	; 0x2f
 8002c80:	f008 fdbc 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002c84:	202f      	movs	r0, #47	; 0x2f
 8002c86:	f008 fdd5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	2038      	movs	r0, #56	; 0x38
 8002c90:	f008 fdb4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c94:	2038      	movs	r0, #56	; 0x38
 8002c96:	f008 fdcd 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2105      	movs	r1, #5
 8002c9e:	2039      	movs	r0, #57	; 0x39
 8002ca0:	f008 fdac 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002ca4:	2039      	movs	r0, #57	; 0x39
 8002ca6:	f008 fdc5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2105      	movs	r1, #5
 8002cae:	203a      	movs	r0, #58	; 0x3a
 8002cb0:	f008 fda4 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cb4:	203a      	movs	r0, #58	; 0x3a
 8002cb6:	f008 fdbd 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	203b      	movs	r0, #59	; 0x3b
 8002cc0:	f008 fd9c 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002cc4:	203b      	movs	r0, #59	; 0x3b
 8002cc6:	f008 fdb5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2105      	movs	r1, #5
 8002cce:	203c      	movs	r0, #60	; 0x3c
 8002cd0:	f008 fd94 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002cd4:	203c      	movs	r0, #60	; 0x3c
 8002cd6:	f008 fdad 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2105      	movs	r1, #5
 8002cde:	2044      	movs	r0, #68	; 0x44
 8002ce0:	f008 fd8c 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002ce4:	2044      	movs	r0, #68	; 0x44
 8002ce6:	f008 fda5 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2105      	movs	r1, #5
 8002cee:	2045      	movs	r0, #69	; 0x45
 8002cf0:	f008 fd84 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002cf4:	2045      	movs	r0, #69	; 0x45
 8002cf6:	f008 fd9d 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2105      	movs	r1, #5
 8002cfe:	2046      	movs	r0, #70	; 0x46
 8002d00:	f008 fd7c 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002d04:	2046      	movs	r0, #70	; 0x46
 8002d06:	f008 fd95 	bl	800b834 <HAL_NVIC_EnableIRQ>

}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d1c:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <MX_FREERTOS_Init+0x28>)
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4808      	ldr	r0, [pc, #32]	; (8002d44 <MX_FREERTOS_Init+0x2c>)
 8002d22:	f00f f99d 	bl	8012060 <osThreadNew>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <MX_FREERTOS_Init+0x30>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <MX_FREERTOS_Init+0x34>)
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4807      	ldr	r0, [pc, #28]	; (8002d50 <MX_FREERTOS_Init+0x38>)
 8002d32:	f00f f995 	bl	8012060 <osThreadNew>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <MX_FREERTOS_Init+0x3c>)
 8002d3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08019f8c 	.word	0x08019f8c
 8002d44:	08002d59 	.word	0x08002d59
 8002d48:	20007904 	.word	0x20007904
 8002d4c:	08019fb0 	.word	0x08019fb0
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	20007908 	.word	0x20007908

08002d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002d60:	f013 fb0c 	bl	801637c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart7, "rest\n", sizeof("rest\n"),1000);
 8002d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d68:	2206      	movs	r2, #6
 8002d6a:	4904      	ldr	r1, [pc, #16]	; (8002d7c <StartDefaultTask+0x24>)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <StartDefaultTask+0x28>)
 8002d6e:	f00c fb66 	bl	800f43e <HAL_UART_Transmit>
    osDelay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f00f fa06 	bl	8012184 <osDelay>
	  HAL_UART_Transmit(&huart7, "rest\n", sizeof("rest\n"),1000);
 8002d78:	e7f4      	b.n	8002d64 <StartDefaultTask+0xc>
 8002d7a:	bf00      	nop
 8002d7c:	0801923c 	.word	0x0801923c
 8002d80:	20007928 	.word	0x20007928

08002d84 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f00f f9f9 	bl	8012184 <osDelay>
 8002d92:	e7fb      	b.n	8002d8c <StartTask02+0x8>

08002d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a72      	ldr	r2, [pc, #456]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a6b      	ldr	r2, [pc, #428]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002dd0:	f043 0310 	orr.w	r3, r3, #16
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b62      	ldr	r3, [pc, #392]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a56      	ldr	r2, [pc, #344]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <MX_GPIO_Init+0x1e8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	21d0      	movs	r1, #208	; 0xd0
 8002eaa:	4835      	ldr	r0, [pc, #212]	; (8002f80 <MX_GPIO_Init+0x1ec>)
 8002eac:	f009 fa7e 	bl	800c3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MAIN_FM_CS_Pin|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f249 2108 	movw	r1, #37384	; 0x9208
 8002eb6:	4833      	ldr	r0, [pc, #204]	; (8002f84 <MX_GPIO_Init+0x1f0>)
 8002eb8:	f009 fa78 	bl	800c3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|MUX_EN_Pin|GPIO_PIN_7|GPIO_PIN_5
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002ec2:	4831      	ldr	r0, [pc, #196]	; (8002f88 <MX_GPIO_Init+0x1f4>)
 8002ec4:	f009 fa72 	bl	800c3ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_2|MPU_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f641 4108 	movw	r1, #7176	; 0x1c08
 8002ece:	482f      	ldr	r0, [pc, #188]	; (8002f8c <MX_GPIO_Init+0x1f8>)
 8002ed0:	f009 fa6c 	bl	800c3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MAG_INT_Pin|CS_MAG_Pin, GPIO_PIN_RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002eda:	482d      	ldr	r0, [pc, #180]	; (8002f90 <MX_GPIO_Init+0x1fc>)
 8002edc:	f009 fa66 	bl	800c3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin;
 8002ee0:	23d0      	movs	r3, #208	; 0xd0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4822      	ldr	r0, [pc, #136]	; (8002f80 <MX_GPIO_Init+0x1ec>)
 8002ef8:	f009 f8ac 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD15 PD12 PD9 */
  GPIO_InitStruct.Pin = MAIN_FM_CS_Pin|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_9;
 8002efc:	f249 2308 	movw	r3, #37384	; 0x9208
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	481b      	ldr	r0, [pc, #108]	; (8002f84 <MX_GPIO_Init+0x1f0>)
 8002f16:	f009 f89d 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 PGPin PG7 PG5
                           PG4 PG2 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|MUX_EN_Pin|GPIO_PIN_7|GPIO_PIN_5
 8002f1a:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_2|MPU_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f20:	2301      	movs	r3, #1
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f30:	4619      	mov	r1, r3
 8002f32:	4815      	ldr	r0, [pc, #84]	; (8002f88 <MX_GPIO_Init+0x1f4>)
 8002f34:	f009 f88e 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin;
 8002f38:	f641 4308 	movw	r3, #7176	; 0x1c08
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	480e      	ldr	r0, [pc, #56]	; (8002f8c <MX_GPIO_Init+0x1f8>)
 8002f52:	f009 f87f 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|CS_MAG_Pin;
 8002f56:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4808      	ldr	r0, [pc, #32]	; (8002f90 <MX_GPIO_Init+0x1fc>)
 8002f70:	f009 f870 	bl	800c054 <HAL_GPIO_Init>

}
 8002f74:	bf00      	nop
 8002f76:	3738      	adds	r7, #56	; 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40020c00 	.word	0x40020c00
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	40021c00 	.word	0x40021c00
 8002f90:	40021400 	.word	0x40021400

08002f94 <buffersize1>:
		uint16_t mx, my, mz;
	} mag;

} lis3mdl;

int buffersize1(char *buff) {
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8002fa0:	e002      	b.n	8002fa8 <buffersize1+0x14>
		i++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f6      	bne.n	8002fa2 <buffersize1+0xe>
	return i;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <myDebug>:
void myDebug(const char *fmt, ...) {
 8002fc4:	b40f      	push	{r0, r1, r2, r3}
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	480a      	ldr	r0, [pc, #40]	; (8003004 <myDebug+0x40>)
 8002fda:	f014 fdb3 	bl	8017b44 <vsniprintf>
	va_end(args);
	int len = buffersize1(temp);
 8002fde:	4809      	ldr	r0, [pc, #36]	; (8003004 <myDebug+0x40>)
 8002fe0:	f7ff ffd8 	bl	8002f94 <buffersize1>
 8002fe4:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart7, (uint8_t*) temp, len,1000);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fee:	4905      	ldr	r1, [pc, #20]	; (8003004 <myDebug+0x40>)
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <myDebug+0x44>)
 8002ff2:	f00c fa24 	bl	800f43e <HAL_UART_Transmit>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003000:	b004      	add	sp, #16
 8003002:	4770      	bx	lr
 8003004:	200002b8 	.word	0x200002b8
 8003008:	20007928 	.word	0x20007928

0800300c <LIS3MDL_ReadReg>:
 * @brief  Read data from Specific Register address of LIS3MDL
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LIS3MDL_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800301e:	b2db      	uxtb	r3, r3
 8003020:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LIS3MDL_ReadReg+0x54>)
 800302a:	f009 f9bf 	bl	800c3ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 800302e:	1cf9      	adds	r1, r7, #3
 8003030:	2364      	movs	r3, #100	; 0x64
 8003032:	2201      	movs	r2, #1
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f00b f858 	bl	800e0ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 800303a:	f107 010f 	add.w	r1, r7, #15
 800303e:	2364      	movs	r3, #100	; 0x64
 8003040:	2201      	movs	r2, #1
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f00b f98d 	bl	800e362 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8003048:	2201      	movs	r2, #1
 800304a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <LIS3MDL_ReadReg+0x54>)
 8003050:	f009 f9ac 	bl	800c3ac <HAL_GPIO_WritePin>
	return val;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021400 	.word	0x40021400

08003064 <MPU_CS>:
	} else {
		return 0;
	}
}

void MPU_CS(uint8_t state) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, state);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	461a      	mov	r2, r3
 8003072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <MPU_CS+0x20>)
 8003078:	f009 f998 	bl	800c3ac <HAL_GPIO_WritePin>
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021c00 	.word	0x40021c00

08003088 <MPU6500_ReadReg>:
		writeRegister(addr, val);
		break;
	}
}

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309a:	b2db      	uxtb	r3, r3
 800309c:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7ff ffe0 	bl	8003064 <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80030a4:	1cf9      	adds	r1, r7, #3
 80030a6:	2364      	movs	r3, #100	; 0x64
 80030a8:	2201      	movs	r2, #1
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f00b f81d 	bl	800e0ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 80030b0:	f107 010f 	add.w	r1, r7, #15
 80030b4:	2364      	movs	r3, #100	; 0x64
 80030b6:	2201      	movs	r2, #1
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f00b f952 	bl	800e362 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7ff ffd0 	bl	8003064 <MPU_CS>
	return val;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <IMU_Data>:
	HAL_Delay(1000);
	myDebug("Calibration  Complete");

}

void IMU_Data() {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b09a      	sub	sp, #104	; 0x68
 80030d4:	af00      	add	r7, sp, #0

	//Gyro, Accel and Mag register data
//    uint8_t SAT_IMU[18];
	SAT_IMU1[0] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_H);
 80030d6:	213b      	movs	r1, #59	; 0x3b
 80030d8:	4859      	ldr	r0, [pc, #356]	; (8003240 <IMU_Data+0x170>)
 80030da:	f7ff ffd5 	bl	8003088 <MPU6500_ReadReg>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b58      	ldr	r3, [pc, #352]	; (8003244 <IMU_Data+0x174>)
 80030e4:	701a      	strb	r2, [r3, #0]
	SAT_IMU1[1] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_L);
 80030e6:	213c      	movs	r1, #60	; 0x3c
 80030e8:	4855      	ldr	r0, [pc, #340]	; (8003240 <IMU_Data+0x170>)
 80030ea:	f7ff ffcd 	bl	8003088 <MPU6500_ReadReg>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b54      	ldr	r3, [pc, #336]	; (8003244 <IMU_Data+0x174>)
 80030f4:	705a      	strb	r2, [r3, #1]
	SAT_IMU1[2] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_H);
 80030f6:	213d      	movs	r1, #61	; 0x3d
 80030f8:	4851      	ldr	r0, [pc, #324]	; (8003240 <IMU_Data+0x170>)
 80030fa:	f7ff ffc5 	bl	8003088 <MPU6500_ReadReg>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <IMU_Data+0x174>)
 8003104:	709a      	strb	r2, [r3, #2]
	SAT_IMU1[3] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_L);
 8003106:	213e      	movs	r1, #62	; 0x3e
 8003108:	484d      	ldr	r0, [pc, #308]	; (8003240 <IMU_Data+0x170>)
 800310a:	f7ff ffbd 	bl	8003088 <MPU6500_ReadReg>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <IMU_Data+0x174>)
 8003114:	70da      	strb	r2, [r3, #3]
	SAT_IMU1[4] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_H);
 8003116:	213f      	movs	r1, #63	; 0x3f
 8003118:	4849      	ldr	r0, [pc, #292]	; (8003240 <IMU_Data+0x170>)
 800311a:	f7ff ffb5 	bl	8003088 <MPU6500_ReadReg>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b48      	ldr	r3, [pc, #288]	; (8003244 <IMU_Data+0x174>)
 8003124:	711a      	strb	r2, [r3, #4]
	SAT_IMU1[5] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_L);
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	4845      	ldr	r0, [pc, #276]	; (8003240 <IMU_Data+0x170>)
 800312a:	f7ff ffad 	bl	8003088 <MPU6500_ReadReg>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4b44      	ldr	r3, [pc, #272]	; (8003244 <IMU_Data+0x174>)
 8003134:	715a      	strb	r2, [r3, #5]

	SAT_IMU1[6] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_H);
 8003136:	2143      	movs	r1, #67	; 0x43
 8003138:	4841      	ldr	r0, [pc, #260]	; (8003240 <IMU_Data+0x170>)
 800313a:	f7ff ffa5 	bl	8003088 <MPU6500_ReadReg>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <IMU_Data+0x174>)
 8003144:	719a      	strb	r2, [r3, #6]
	SAT_IMU1[7] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_L);
 8003146:	2144      	movs	r1, #68	; 0x44
 8003148:	483d      	ldr	r0, [pc, #244]	; (8003240 <IMU_Data+0x170>)
 800314a:	f7ff ff9d 	bl	8003088 <MPU6500_ReadReg>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <IMU_Data+0x174>)
 8003154:	71da      	strb	r2, [r3, #7]
	SAT_IMU1[8] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_H);
 8003156:	2145      	movs	r1, #69	; 0x45
 8003158:	4839      	ldr	r0, [pc, #228]	; (8003240 <IMU_Data+0x170>)
 800315a:	f7ff ff95 	bl	8003088 <MPU6500_ReadReg>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <IMU_Data+0x174>)
 8003164:	721a      	strb	r2, [r3, #8]
	SAT_IMU1[9] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_L);
 8003166:	2146      	movs	r1, #70	; 0x46
 8003168:	4835      	ldr	r0, [pc, #212]	; (8003240 <IMU_Data+0x170>)
 800316a:	f7ff ff8d 	bl	8003088 <MPU6500_ReadReg>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <IMU_Data+0x174>)
 8003174:	725a      	strb	r2, [r3, #9]
	SAT_IMU1[10] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_H);
 8003176:	2147      	movs	r1, #71	; 0x47
 8003178:	4831      	ldr	r0, [pc, #196]	; (8003240 <IMU_Data+0x170>)
 800317a:	f7ff ff85 	bl	8003088 <MPU6500_ReadReg>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <IMU_Data+0x174>)
 8003184:	729a      	strb	r2, [r3, #10]
	SAT_IMU1[11] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_L);
 8003186:	2148      	movs	r1, #72	; 0x48
 8003188:	482d      	ldr	r0, [pc, #180]	; (8003240 <IMU_Data+0x170>)
 800318a:	f7ff ff7d 	bl	8003088 <MPU6500_ReadReg>
 800318e:	4603      	mov	r3, r0
 8003190:	461a      	mov	r2, r3
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <IMU_Data+0x174>)
 8003194:	72da      	strb	r2, [r3, #11]

	SAT_IMU1[12]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_L);
 8003196:	2128      	movs	r1, #40	; 0x28
 8003198:	4829      	ldr	r0, [pc, #164]	; (8003240 <IMU_Data+0x170>)
 800319a:	f7ff ff37 	bl	800300c <LIS3MDL_ReadReg>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <IMU_Data+0x174>)
 80031a4:	731a      	strb	r2, [r3, #12]
	SAT_IMU1[13]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_H);
 80031a6:	2129      	movs	r1, #41	; 0x29
 80031a8:	4825      	ldr	r0, [pc, #148]	; (8003240 <IMU_Data+0x170>)
 80031aa:	f7ff ff2f 	bl	800300c <LIS3MDL_ReadReg>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <IMU_Data+0x174>)
 80031b4:	735a      	strb	r2, [r3, #13]
	SAT_IMU1[14]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_L);
 80031b6:	212a      	movs	r1, #42	; 0x2a
 80031b8:	4821      	ldr	r0, [pc, #132]	; (8003240 <IMU_Data+0x170>)
 80031ba:	f7ff ff27 	bl	800300c <LIS3MDL_ReadReg>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <IMU_Data+0x174>)
 80031c4:	739a      	strb	r2, [r3, #14]
	SAT_IMU1[15] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_H);
 80031c6:	212b      	movs	r1, #43	; 0x2b
 80031c8:	481d      	ldr	r0, [pc, #116]	; (8003240 <IMU_Data+0x170>)
 80031ca:	f7ff ff1f 	bl	800300c <LIS3MDL_ReadReg>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <IMU_Data+0x174>)
 80031d4:	73da      	strb	r2, [r3, #15]
	SAT_IMU1[16] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_L);
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	4819      	ldr	r0, [pc, #100]	; (8003240 <IMU_Data+0x170>)
 80031da:	f7ff ff17 	bl	800300c <LIS3MDL_ReadReg>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <IMU_Data+0x174>)
 80031e4:	741a      	strb	r2, [r3, #16]
	SAT_IMU1[17] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_H);
 80031e6:	212d      	movs	r1, #45	; 0x2d
 80031e8:	4815      	ldr	r0, [pc, #84]	; (8003240 <IMU_Data+0x170>)
 80031ea:	f7ff ff0f 	bl	800300c <LIS3MDL_ReadReg>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <IMU_Data+0x174>)
 80031f4:	745a      	strb	r2, [r3, #17]
	char str[100];
	for(int i = 0; i< sizeof(SAT_IMU1); i++){
 80031f6:	2300      	movs	r3, #0
 80031f8:	667b      	str	r3, [r7, #100]	; 0x64
 80031fa:	e017      	b.n	800322c <IMU_Data+0x15c>
		sprintf(str, "%02x |\0",SAT_IMU1[i]);
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <IMU_Data+0x174>)
 80031fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	463b      	mov	r3, r7
 8003208:	490f      	ldr	r1, [pc, #60]	; (8003248 <IMU_Data+0x178>)
 800320a:	4618      	mov	r0, r3
 800320c:	f014 fbd2 	bl	80179b4 <siprintf>
		HAL_UART_Transmit(&huart7, str,strlen(str), 100);
 8003210:	463b      	mov	r3, r7
 8003212:	4618      	mov	r0, r3
 8003214:	f7fc ffec 	bl	80001f0 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29a      	uxth	r2, r3
 800321c:	4639      	mov	r1, r7
 800321e:	2364      	movs	r3, #100	; 0x64
 8003220:	480a      	ldr	r0, [pc, #40]	; (800324c <IMU_Data+0x17c>)
 8003222:	f00c f90c 	bl	800f43e <HAL_UART_Transmit>
	for(int i = 0; i< sizeof(SAT_IMU1); i++){
 8003226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003228:	3301      	adds	r3, #1
 800322a:	667b      	str	r3, [r7, #100]	; 0x64
 800322c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800322e:	2b10      	cmp	r3, #16
 8003230:	d9e4      	bls.n	80031fc <IMU_Data+0x12c>
//		myDebug("%f * %d * %02x *****",SAT_IMU[i],SAT_IMU[i],SAT_IMU[i]);
	}
	myDebug("\n******************Data completed************************\n");
 8003232:	4807      	ldr	r0, [pc, #28]	; (8003250 <IMU_Data+0x180>)
 8003234:	f7ff fec6 	bl	8002fc4 <myDebug>
}
 8003238:	bf00      	nop
 800323a:	3768      	adds	r7, #104	; 0x68
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20007f30 	.word	0x20007f30
 8003244:	20007910 	.word	0x20007910
 8003248:	080192a0 	.word	0x080192a0
 800324c:	20007928 	.word	0x20007928
 8003250:	080192a8 	.word	0x080192a8

08003254 <HK_IMU>:
//		FM[i * 4 + 3] = test.u8[3];
//	}
//
//}

void HK_IMU(){
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
//IMU_Setup();
IMU_Data();
 8003258:	f7ff ff3a 	bl	80030d0 <IMU_Data>

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_PeriodElapsedCallback>:
	__init_nor();
	__init_littefs();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d105      	bne.n	800327c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
//    HAL_UART_Transmit(&huart7, "\nCounter is : ", sizeof("\nCounter is : "), 100);
    tim_val++;
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800327a:	801a      	strh	r2, [r3, #0]
//    char uart_buf[20] ;
//    sprintf(uart_buf, "%u us\0\r\n", tim_val);
//    HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);

  }
  if(htim == &htim7){
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d133      	bne.n	80032ec <HAL_TIM_PeriodElapsedCallback+0x8c>
	  hk_counter++;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800328e:	701a      	strb	r2, [r3, #0]
	  if(hk_counter%30 == 0){ char uart_buf[20] ;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003296:	fba3 1302 	umull	r1, r3, r3, r2
 800329a:	0919      	lsrs	r1, r3, #4
 800329c:	460b      	mov	r3, r1
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a5b      	subs	r3, r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11f      	bne.n	80032ec <HAL_TIM_PeriodElapsedCallback+0x8c>
		  sprintf(uart_buf, "%u us\0\r\n", tim_val);
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	4914      	ldr	r1, [pc, #80]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80032b8:	4618      	mov	r0, r3
 80032ba:	f014 fb7b 	bl	80179b4 <siprintf>
		  HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);
 80032be:	f107 010c 	add.w	r1, r7, #12
 80032c2:	2364      	movs	r3, #100	; 0x64
 80032c4:	2214      	movs	r2, #20
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80032c8:	f00c f8b9 	bl	800f43e <HAL_UART_Transmit>
		  HK_IMU();
 80032cc:	f7ff ffc2 	bl	8003254 <HK_IMU>

		  HAL_UART_Transmit(&huart7, "\n-----------------------------Collected HK DATA-----------n", sizeof("\n-----------------------------Collected HK DATA-----------n"), 100);
 80032d0:	2364      	movs	r3, #100	; 0x64
 80032d2:	223c      	movs	r2, #60	; 0x3c
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80032d6:	480d      	ldr	r0, [pc, #52]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80032d8:	f00c f8b1 	bl	800f43e <HAL_UART_Transmit>
		  hk_counter=0;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
		  RUN_ADC2();
 80032e2:	f000 f817 	bl	8003314 <RUN_ADC2>
		  tim_val = 0 ;
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	801a      	strh	r2, [r3, #0]
	  }

  }
}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20008210 	.word	0x20008210
 80032f8:	2000031e 	.word	0x2000031e
 80032fc:	20008258 	.word	0x20008258
 8003300:	2000031c 	.word	0x2000031c
 8003304:	88888889 	.word	0x88888889
 8003308:	08019360 	.word	0x08019360
 800330c:	20007928 	.word	0x20007928
 8003310:	0801936c 	.word	0x0801936c

08003314 <RUN_ADC2>:

void RUN_ADC2(){
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart7,"\n\n********************S2S ADC is starting ************\n", sizeof("********************S2S ADC is starting ************\n"),1000);
 800331a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800331e:	2236      	movs	r2, #54	; 0x36
 8003320:	4918      	ldr	r1, [pc, #96]	; (8003384 <RUN_ADC2+0x70>)
 8003322:	4819      	ldr	r0, [pc, #100]	; (8003388 <RUN_ADC2+0x74>)
 8003324:	f00c f88b 	bl	800f43e <HAL_UART_Transmit>

			ADC_Operate(adc_channels, adc1_channels);
 8003328:	4918      	ldr	r1, [pc, #96]	; (800338c <RUN_ADC2+0x78>)
 800332a:	4819      	ldr	r0, [pc, #100]	; (8003390 <RUN_ADC2+0x7c>)
 800332c:	f7fe f956 	bl	80015dc <ADC_Operate>
			 ADC_Conv_Data(adc_conv_buf, adc_buf);
 8003330:	4918      	ldr	r1, [pc, #96]	; (8003394 <RUN_ADC2+0x80>)
 8003332:	4819      	ldr	r0, [pc, #100]	; (8003398 <RUN_ADC2+0x84>)
 8003334:	f7fd ff84 	bl	8001240 <ADC_Conv_Data>
			for(int i =0; i<sizeof(adc_channels); i++)
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e00f      	b.n	800335e <RUN_ADC2+0x4a>
			myprintf("%d | %d **", adc_channels[i],adc1_channels[i]);
 800333e:	4a14      	ldr	r2, [pc, #80]	; (8003390 <RUN_ADC2+0x7c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003346:	4619      	mov	r1, r3
 8003348:	4a10      	ldr	r2, [pc, #64]	; (800338c <RUN_ADC2+0x78>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003350:	461a      	mov	r2, r3
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <RUN_ADC2+0x88>)
 8003354:	f7fd fd6a 	bl	8000e2c <myprintf>
			for(int i =0; i<sizeof(adc_channels); i++)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d9ec      	bls.n	800333e <RUN_ADC2+0x2a>
			//		HK_IMU();
			HAL_Delay(10000);
 8003364:	f242 7010 	movw	r0, #10000	; 0x2710
 8003368:	f007 fd92 	bl	800ae90 <HAL_Delay>
			HAL_UART_Transmit(&huart7,"\n\n********************S2S ADC data collection complete ************\n", sizeof("********************S2S ADC data collection complete************\n"),1000);
 800336c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003370:	2242      	movs	r2, #66	; 0x42
 8003372:	490b      	ldr	r1, [pc, #44]	; (80033a0 <RUN_ADC2+0x8c>)
 8003374:	4804      	ldr	r0, [pc, #16]	; (8003388 <RUN_ADC2+0x74>)
 8003376:	f00c f862 	bl	800f43e <HAL_UART_Transmit>

}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	080193a8 	.word	0x080193a8
 8003388:	20007928 	.word	0x20007928
 800338c:	20000024 	.word	0x20000024
 8003390:	20000000 	.word	0x20000000
 8003394:	20007de0 	.word	0x20007de0
 8003398:	20007e04 	.word	0x20007e04
 800339c:	080193e0 	.word	0x080193e0
 80033a0:	080193ec 	.word	0x080193ec

080033a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b0b5      	sub	sp, #212	; 0xd4
 80033a8:	af32      	add	r7, sp, #200	; 0xc8
 80033aa:	6078      	str	r0, [r7, #4]
//			if(huart->Instance == &huart1)
			{
				printf("Data received on COM UART1\n");
 80033ac:	480f      	ldr	r0, [pc, #60]	; (80033ec <HAL_UART_RxCpltCallback+0x48>)
 80033ae:	f014 fa7f 	bl	80178b0 <puts>
				parse_command(&COM_RX_DATA,Lfs, File);
 80033b2:	4c0f      	ldr	r4, [pc, #60]	; (80033f0 <HAL_UART_RxCpltCallback+0x4c>)
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_UART_RxCpltCallback+0x50>)
 80033b6:	ab1c      	add	r3, sp, #112	; 0x70
 80033b8:	4611      	mov	r1, r2
 80033ba:	2254      	movs	r2, #84	; 0x54
 80033bc:	4618      	mov	r0, r3
 80033be:	f013 fe43 	bl	8017048 <memcpy>
 80033c2:	4668      	mov	r0, sp
 80033c4:	f104 030c 	add.w	r3, r4, #12
 80033c8:	2270      	movs	r2, #112	; 0x70
 80033ca:	4619      	mov	r1, r3
 80033cc:	f013 fe3c 	bl	8017048 <memcpy>
 80033d0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80033d4:	4808      	ldr	r0, [pc, #32]	; (80033f8 <HAL_UART_RxCpltCallback+0x54>)
 80033d6:	f7fe ff5d 	bl	8002294 <parse_command>

			    HAL_UART_Receive_DMA(&COM_uart, COM_RX_DATA, sizeof(COM_RX_DATA));
 80033da:	221e      	movs	r2, #30
 80033dc:	4906      	ldr	r1, [pc, #24]	; (80033f8 <HAL_UART_RxCpltCallback+0x54>)
 80033de:	4807      	ldr	r0, [pc, #28]	; (80033fc <HAL_UART_RxCpltCallback+0x58>)
 80033e0:	f00c f9a6 	bl	800f730 <HAL_UART_Receive_DMA>
			}
		}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}
 80033ec:	08019434 	.word	0x08019434
 80033f0:	20007e48 	.word	0x20007e48
 80033f4:	2000796c 	.word	0x2000796c
 80033f8:	20007a5c 	.word	0x20007a5c
 80033fc:	20007a18 	.word	0x20007a18

08003400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003406:	f007 fd15 	bl	800ae34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800340a:	f000 f845 	bl	8003498 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800340e:	f7ff fcc1 	bl	8002d94 <MX_GPIO_Init>
  MX_SPI3_Init();
 8003412:	f000 f8e7 	bl	80035e4 <MX_SPI3_Init>
  MX_UART7_Init();
 8003416:	f000 ff69 	bl	80042ec <MX_UART7_Init>
  MX_SPI4_Init();
 800341a:	f000 f919 	bl	8003650 <MX_SPI4_Init>
  MX_ADC1_Init();
 800341e:	f7fe f90b 	bl	8001638 <MX_ADC1_Init>
  MX_DMA_Init();
 8003422:	f7ff fbd3 	bl	8002bcc <MX_DMA_Init>
  MX_TIM6_Init();
 8003426:	f000 fe47 	bl	80040b8 <MX_TIM6_Init>
  MX_ADC3_Init();
 800342a:	f7fe f9a9 	bl	8001780 <MX_ADC3_Init>
  MX_TIM7_Init();
 800342e:	f000 fe79 	bl	8004124 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003432:	f7fe f953 	bl	80016dc <MX_ADC2_Init>
  MX_UART8_Init();
 8003436:	f000 ff83 	bl	8004340 <MX_UART8_Init>
  MX_USART6_UART_Init();
 800343a:	f001 f829 	bl	8004490 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800343e:	f000 fffd 	bl	800443c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8003442:	f000 ffa7 	bl	8004394 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 8003446:	f000 f939 	bl	80036bc <MX_SPI5_Init>
  MX_SPI2_Init();
 800344a:	f000 f895 	bl	8003578 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800344e:	f000 ffcb 	bl	80043e8 <MX_USART2_UART_Init>
          parse_command(command, Lfs, File );
          */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003452:	f00e fdbb 	bl	8011fcc <osKernelInitialize>
  MX_FREERTOS_Init();
 8003456:	f7ff fc5f 	bl	8002d18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800345a:	f00e fddb 	bl	8012014 <osKernelStart>
  while (1)
  {
//	  if(HAL_UART_Receive(&huart2, COM_RX_DATA,30,1000)==HAL_OK){
//		  myprintf("Received data %s\n",COM_RX_DATA);
//	  }
	  catch = HAL_UART_Receive(&COM_uart, COM_RX_DATA,10,5000);
 800345e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003462:	220a      	movs	r2, #10
 8003464:	4908      	ldr	r1, [pc, #32]	; (8003488 <main+0x88>)
 8003466:	4809      	ldr	r0, [pc, #36]	; (800348c <main+0x8c>)
 8003468:	f00c f87b 	bl	800f562 <HAL_UART_Receive>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <main+0x90>)
 8003472:	701a      	strb	r2, [r3, #0]
	  if(catch==HAL_OK){
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <main+0x90>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <main+0x5e>
			  myprintf("Received data %s\n",COM_RX_DATA);
 800347c:	4902      	ldr	r1, [pc, #8]	; (8003488 <main+0x88>)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <main+0x94>)
 8003480:	f7fd fcd4 	bl	8000e2c <myprintf>
	  catch = HAL_UART_Receive(&COM_uart, COM_RX_DATA,10,5000);
 8003484:	e7eb      	b.n	800345e <main+0x5e>
 8003486:	bf00      	nop
 8003488:	20007a5c 	.word	0x20007a5c
 800348c:	20007a18 	.word	0x20007a18
 8003490:	20007e02 	.word	0x20007e02
 8003494:	08019450 	.word	0x08019450

08003498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b094      	sub	sp, #80	; 0x50
 800349c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800349e:	f107 0320 	add.w	r3, r7, #32
 80034a2:	2230      	movs	r2, #48	; 0x30
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f013 fddc 	bl	8017064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <SystemClock_Config+0xcc>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <SystemClock_Config+0xcc>)
 80034c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <SystemClock_Config+0xcc>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <SystemClock_Config+0xd0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <SystemClock_Config+0xd0>)
 80034e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <SystemClock_Config+0xd0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034fe:	2302      	movs	r3, #2
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003508:	230c      	movs	r3, #12
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800350c:	23a8      	movs	r3, #168	; 0xa8
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003510:	2302      	movs	r3, #2
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003514:	2307      	movs	r3, #7
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	4618      	mov	r0, r3
 800351e:	f00a f8e1 	bl	800d6e4 <HAL_RCC_OscConfig>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003528:	f000 f820 	bl	800356c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800352c:	230f      	movs	r3, #15
 800352e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003530:	2302      	movs	r3, #2
 8003532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800353c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800353e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	2105      	movs	r1, #5
 800354a:	4618      	mov	r0, r3
 800354c:	f00a fb42 	bl	800dbd4 <HAL_RCC_ClockConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003556:	f000 f809 	bl	800356c <Error_Handler>
  }
}
 800355a:	bf00      	nop
 800355c:	3750      	adds	r7, #80	; 0x50
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000

0800356c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003570:	b672      	cpsid	i
}
 8003572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003574:	e7fe      	b.n	8003574 <Error_Handler+0x8>
	...

08003578 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <MX_SPI2_Init+0x64>)
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <MX_SPI2_Init+0x68>)
 8003580:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <MX_SPI2_Init+0x64>)
 8003584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003588:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <MX_SPI2_Init+0x64>)
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <MX_SPI2_Init+0x64>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_SPI2_Init+0x64>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <MX_SPI2_Init+0x64>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_SPI2_Init+0x64>)
 80035a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_SPI2_Init+0x64>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <MX_SPI2_Init+0x64>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <MX_SPI2_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <MX_SPI2_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <MX_SPI2_Init+0x64>)
 80035c4:	220a      	movs	r2, #10
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035c8:	4804      	ldr	r0, [pc, #16]	; (80035dc <MX_SPI2_Init+0x64>)
 80035ca:	f00a fd05 	bl	800dfd8 <HAL_SPI_Init>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035d4:	f7ff ffca 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20007ed8 	.word	0x20007ed8
 80035e0:	40003800 	.word	0x40003800

080035e4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80035e8:	4b17      	ldr	r3, [pc, #92]	; (8003648 <MX_SPI3_Init+0x64>)
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <MX_SPI3_Init+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <MX_SPI3_Init+0x64>)
 80035f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <MX_SPI3_Init+0x64>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <MX_SPI3_Init+0x64>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <MX_SPI3_Init+0x64>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <MX_SPI3_Init+0x64>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <MX_SPI3_Init+0x64>)
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <MX_SPI3_Init+0x64>)
 8003618:	2210      	movs	r2, #16
 800361a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <MX_SPI3_Init+0x64>)
 800361e:	2200      	movs	r2, #0
 8003620:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <MX_SPI3_Init+0x64>)
 8003624:	2200      	movs	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <MX_SPI3_Init+0x64>)
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <MX_SPI3_Init+0x64>)
 8003630:	220a      	movs	r2, #10
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003634:	4804      	ldr	r0, [pc, #16]	; (8003648 <MX_SPI3_Init+0x64>)
 8003636:	f00a fccf 	bl	800dfd8 <HAL_SPI_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003640:	f7ff ff94 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200079c0 	.word	0x200079c0
 800364c:	40003c00 	.word	0x40003c00

08003650 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <MX_SPI4_Init+0x68>)
 8003658:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <MX_SPI4_Init+0x64>)
 800365c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003660:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <MX_SPI4_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_SPI4_Init+0x64>)
 800367c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003680:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003684:	2210      	movs	r2, #16
 8003686:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <MX_SPI4_Init+0x64>)
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003690:	2200      	movs	r2, #0
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <MX_SPI4_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <MX_SPI4_Init+0x64>)
 800369c:	220a      	movs	r2, #10
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80036a0:	4804      	ldr	r0, [pc, #16]	; (80036b4 <MX_SPI4_Init+0x64>)
 80036a2:	f00a fc99 	bl	800dfd8 <HAL_SPI_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80036ac:	f7ff ff5e 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20007d34 	.word	0x20007d34
 80036b8:	40013400 	.word	0x40013400

080036bc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <MX_SPI5_Init+0x64>)
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <MX_SPI5_Init+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <MX_SPI5_Init+0x64>)
 80036c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <MX_SPI5_Init+0x64>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <MX_SPI5_Init+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <MX_SPI5_Init+0x64>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MX_SPI5_Init+0x64>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_SPI5_Init+0x64>)
 80036e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <MX_SPI5_Init+0x64>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <MX_SPI5_Init+0x64>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <MX_SPI5_Init+0x64>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <MX_SPI5_Init+0x64>)
 8003702:	2200      	movs	r2, #0
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <MX_SPI5_Init+0x64>)
 8003708:	220a      	movs	r2, #10
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800370c:	4804      	ldr	r0, [pc, #16]	; (8003720 <MX_SPI5_Init+0x64>)
 800370e:	f00a fc63 	bl	800dfd8 <HAL_SPI_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003718:	f7ff ff28 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20007f30 	.word	0x20007f30
 8003724:	40015000 	.word	0x40015000

08003728 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b092      	sub	sp, #72	; 0x48
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a71      	ldr	r2, [pc, #452]	; (800390c <HAL_SPI_MspInit+0x1e4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12c      	bne.n	80037a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a6f      	ldr	r2, [pc, #444]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 8003754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376a:	4b69      	ldr	r3, [pc, #420]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a68      	ldr	r2, [pc, #416]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b66      	ldr	r3, [pc, #408]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
 8003782:	230e      	movs	r3, #14
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378e:	2303      	movs	r3, #3
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003792:	2305      	movs	r3, #5
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800379a:	4619      	mov	r1, r3
 800379c:	485d      	ldr	r0, [pc, #372]	; (8003914 <HAL_SPI_MspInit+0x1ec>)
 800379e:	f008 fc59 	bl	800c054 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80037a2:	e1b6      	b.n	8003b12 <HAL_SPI_MspInit+0x3ea>
  else if(spiHandle->Instance==SPI3)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <HAL_SPI_MspInit+0x1f0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f040 80c2 	bne.w	8003934 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
 80037c0:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	6313      	str	r3, [r2, #48]	; 0x30
 80037dc:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
 80037ec:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4a47      	ldr	r2, [pc, #284]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <HAL_SPI_MspInit+0x1e8>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MAIN_FM_MISO_Pin|MAIN_FM_SCK_Pin;
 8003804:	2318      	movs	r3, #24
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003814:	2306      	movs	r3, #6
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800381c:	4619      	mov	r1, r3
 800381e:	483f      	ldr	r0, [pc, #252]	; (800391c <HAL_SPI_MspInit+0x1f4>)
 8003820:	f008 fc18 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_FM_MOSI_Pin;
 8003824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003836:	2306      	movs	r3, #6
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MAIN_FM_MOSI_GPIO_Port, &GPIO_InitStruct);
 800383a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383e:	4619      	mov	r1, r3
 8003840:	4837      	ldr	r0, [pc, #220]	; (8003920 <HAL_SPI_MspInit+0x1f8>)
 8003842:	f008 fc07 	bl	800c054 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003848:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_SPI_MspInit+0x200>)
 800384a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003852:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800385e:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003864:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003868:	2200      	movs	r2, #0
 800386a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003874:	2200      	movs	r2, #0
 8003876:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003880:	2200      	movs	r2, #0
 8003882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003884:	4827      	ldr	r0, [pc, #156]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003886:	f007 ffe3 	bl	800b850 <HAL_DMA_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8003890:	f7ff fe6c 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a23      	ldr	r2, [pc, #140]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 8003898:	64da      	str	r2, [r3, #76]	; 0x4c
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_SPI_MspInit+0x1fc>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <HAL_SPI_MspInit+0x208>)
 80038a4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038be:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80038de:	4813      	ldr	r0, [pc, #76]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038e0:	f007 ffb6 	bl	800b850 <HAL_DMA_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 80038ea:	f7ff fe3f 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a0e      	ldr	r2, [pc, #56]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038f2:	649a      	str	r2, [r3, #72]	; 0x48
 80038f4:	4a0d      	ldr	r2, [pc, #52]	; (800392c <HAL_SPI_MspInit+0x204>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2105      	movs	r1, #5
 80038fe:	2033      	movs	r0, #51	; 0x33
 8003900:	f007 ff7c 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003904:	2033      	movs	r0, #51	; 0x33
 8003906:	f007 ff95 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 800390a:	e102      	b.n	8003b12 <HAL_SPI_MspInit+0x3ea>
 800390c:	40003800 	.word	0x40003800
 8003910:	40023800 	.word	0x40023800
 8003914:	40022000 	.word	0x40022000
 8003918:	40003c00 	.word	0x40003c00
 800391c:	40020400 	.word	0x40020400
 8003920:	40020800 	.word	0x40020800
 8003924:	200080a8 	.word	0x200080a8
 8003928:	40026040 	.word	0x40026040
 800392c:	20007fe8 	.word	0x20007fe8
 8003930:	400260b8 	.word	0x400260b8
  else if(spiHandle->Instance==SPI4)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a78      	ldr	r2, [pc, #480]	; (8003b1c <HAL_SPI_MspInit+0x3f4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	f040 8091 	bne.w	8003a62 <HAL_SPI_MspInit+0x33a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 800394a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800394e:	6453      	str	r3, [r2, #68]	; 0x44
 8003950:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003966:	f043 0310 	orr.w	r3, r3, #16
 800396a:	6313      	str	r3, [r2, #48]	; 0x30
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|SMSN_FM_MISO_OBC_Pin|SMSN_FM_MOSI_OBC_Pin;
 8003978:	2364      	movs	r3, #100	; 0x64
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003988:	2305      	movs	r3, #5
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800398c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003990:	4619      	mov	r1, r3
 8003992:	4864      	ldr	r0, [pc, #400]	; (8003b24 <HAL_SPI_MspInit+0x3fc>)
 8003994:	f008 fb5e 	bl	800c054 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8003998:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 800399a:	4a64      	ldr	r2, [pc, #400]	; (8003b2c <HAL_SPI_MspInit+0x404>)
 800399c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039a0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80039a4:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a6:	4b60      	ldr	r3, [pc, #384]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ac:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b8:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80039c6:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80039d8:	4853      	ldr	r0, [pc, #332]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039da:	f007 ff39 	bl	800b850 <HAL_DMA_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_SPI_MspInit+0x2c0>
      Error_Handler();
 80039e4:	f7ff fdc2 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80039ee:	4a4e      	ldr	r2, [pc, #312]	; (8003b28 <HAL_SPI_MspInit+0x400>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80039f4:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 80039f6:	4a4f      	ldr	r2, [pc, #316]	; (8003b34 <HAL_SPI_MspInit+0x40c>)
 80039f8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80039fa:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 80039fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a00:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a1c:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8003a34:	483e      	ldr	r0, [pc, #248]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a36:	f007 ff0b 	bl	800b850 <HAL_DMA_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_SPI_MspInit+0x31c>
      Error_Handler();
 8003a40:	f7ff fd94 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a48:	649a      	str	r2, [r3, #72]	; 0x48
 8003a4a:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <HAL_SPI_MspInit+0x408>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2105      	movs	r1, #5
 8003a54:	2054      	movs	r0, #84	; 0x54
 8003a56:	f007 fed1 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003a5a:	2054      	movs	r0, #84	; 0x54
 8003a5c:	f007 feea 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8003a60:	e057      	b.n	8003b12 <HAL_SPI_MspInit+0x3ea>
  else if(spiHandle->Instance==SPI5)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <HAL_SPI_MspInit+0x410>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d152      	bne.n	8003b12 <HAL_SPI_MspInit+0x3ea>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	6313      	str	r3, [r2, #48]	; 0x30
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_SPI_MspInit+0x3f8>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ada:	4619      	mov	r1, r3
 8003adc:	4817      	ldr	r0, [pc, #92]	; (8003b3c <HAL_SPI_MspInit+0x414>)
 8003ade:	f008 fab9 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003ae2:	23c0      	movs	r3, #192	; 0xc0
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003af2:	2305      	movs	r3, #5
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003afa:	4619      	mov	r1, r3
 8003afc:	4810      	ldr	r0, [pc, #64]	; (8003b40 <HAL_SPI_MspInit+0x418>)
 8003afe:	f008 faa9 	bl	800c054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2105      	movs	r1, #5
 8003b06:	2055      	movs	r0, #85	; 0x55
 8003b08:	f007 fe78 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8003b0c:	2055      	movs	r0, #85	; 0x55
 8003b0e:	f007 fe91 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3748      	adds	r7, #72	; 0x48
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40013400 	.word	0x40013400
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40021000 	.word	0x40021000
 8003b28:	20007f88 	.word	0x20007f88
 8003b2c:	40026458 	.word	0x40026458
 8003b30:	20008048 	.word	0x20008048
 8003b34:	40026428 	.word	0x40026428
 8003b38:	40015000 	.word	0x40015000
 8003b3c:	40021400 	.word	0x40021400
 8003b40:	40021c00 	.word	0x40021c00

08003b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_MspInit+0x64>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b82:	2200      	movs	r2, #0
 8003b84:	210f      	movs	r1, #15
 8003b86:	f06f 0001 	mvn.w	r0, #1
 8003b8a:	f007 fe37 	bl	800b7fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2105      	movs	r1, #5
 8003b92:	2005      	movs	r0, #5
 8003b94:	f007 fe32 	bl	800b7fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003b98:	2005      	movs	r0, #5
 8003b9a:	f007 fe4b 	bl	800b834 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800

08003bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	2018      	movs	r0, #24
 8003bc2:	f007 fe1b 	bl	800b7fc <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003bc6:	2018      	movs	r0, #24
 8003bc8:	f007 fe34 	bl	800b834 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_InitTick+0xa4>)
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <HAL_InitTick+0xa4>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	6453      	str	r3, [r2, #68]	; 0x44
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_InitTick+0xa4>)
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003be8:	f107 0210 	add.w	r2, r7, #16
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f00a f9be 	bl	800df74 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003bf8:	f00a f9a8 	bl	800df4c <HAL_RCC_GetPCLK2Freq>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <HAL_InitTick+0xa8>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0c9b      	lsrs	r3, r3, #18
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_InitTick+0xac>)
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <HAL_InitTick+0xb0>)
 8003c14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_InitTick+0xac>)
 8003c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c1c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_InitTick+0xac>)
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_InitTick+0xac>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_InitTick+0xac>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8003c30:	4809      	ldr	r0, [pc, #36]	; (8003c58 <HAL_InitTick+0xac>)
 8003c32:	f00b f897 	bl	800ed64 <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8003c3c:	4806      	ldr	r0, [pc, #24]	; (8003c58 <HAL_InitTick+0xac>)
 8003c3e:	f00b f8e1 	bl	800ee04 <HAL_TIM_Base_Start_IT>
 8003c42:	4603      	mov	r3, r0
 8003c44:	e000      	b.n	8003c48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	; 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	431bde83 	.word	0x431bde83
 8003c58:	20008108 	.word	0x20008108
 8003c5c:	40014000 	.word	0x40014000

08003c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c64:	e7fe      	b.n	8003c64 <NMI_Handler+0x4>

08003c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c6a:	e7fe      	b.n	8003c6a <HardFault_Handler+0x4>

08003c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c70:	e7fe      	b.n	8003c70 <MemManage_Handler+0x4>

08003c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c76:	e7fe      	b.n	8003c76 <BusFault_Handler+0x4>

08003c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <UsageFault_Handler+0x4>

08003c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <DMA1_Stream0_IRQHandler+0x10>)
 8003ca2:	f007 ff6d 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20008524 	.word	0x20008524

08003cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8003cb6:	f007 ff63 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200081b0 	.word	0x200081b0

08003cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8003cca:	f007 ff59 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200080a8 	.word	0x200080a8

08003cd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <DMA1_Stream3_IRQHandler+0x10>)
 8003cde:	f007 ff4f 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20008404 	.word	0x20008404

08003cec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <DMA1_Stream4_IRQHandler+0x10>)
 8003cf2:	f007 ff45 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20008150 	.word	0x20008150

08003d00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <DMA1_Stream5_IRQHandler+0x10>)
 8003d06:	f007 ff3b 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200082a0 	.word	0x200082a0

08003d14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <DMA1_Stream6_IRQHandler+0x10>)
 8003d1a:	f007 ff31 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200084c4 	.word	0x200084c4

08003d28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <ADC_IRQHandler+0x1c>)
 8003d2e:	f007 f916 	bl	800af5e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <ADC_IRQHandler+0x20>)
 8003d34:	f007 f913 	bl	800af5e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003d38:	4804      	ldr	r0, [pc, #16]	; (8003d4c <ADC_IRQHandler+0x24>)
 8003d3a:	f007 f910 	bl	800af5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200076e0 	.word	0x200076e0
 8003d48:	20007638 	.word	0x20007638
 8003d4c:	20007728 	.word	0x20007728

08003d50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003d56:	f00b f8c5 	bl	800eee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20008108 	.word	0x20008108

08003d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <USART1_IRQHandler+0x10>)
 8003d6a:	f00b fd11 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20007a18 	.word	0x20007a18

08003d78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <USART2_IRQHandler+0x10>)
 8003d7e:	f00b fd07 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000860c 	.word	0x2000860c

08003d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <USART3_IRQHandler+0x10>)
 8003d92:	f00b fcfd 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20008300 	.word	0x20008300

08003da0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <DMA1_Stream7_IRQHandler+0x10>)
 8003da6:	f007 feeb 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20007fe8 	.word	0x20007fe8

08003db4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <SPI3_IRQHandler+0x10>)
 8003dba:	f00a fd85 	bl	800e8c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200079c0 	.word	0x200079c0

08003dc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM6_DAC_IRQHandler+0x10>)
 8003dce:	f00b f889 	bl	800eee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20008210 	.word	0x20008210

08003ddc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <TIM7_IRQHandler+0x10>)
 8003de2:	f00b f87f 	bl	800eee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20008258 	.word	0x20008258

08003df0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA2_Stream0_IRQHandler+0x10>)
 8003df6:	f007 fec3 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20007680 	.word	0x20007680

08003e04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA2_Stream1_IRQHandler+0x10>)
 8003e0a:	f007 feb9 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20008048 	.word	0x20008048

08003e18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA2_Stream2_IRQHandler+0x10>)
 8003e1e:	f007 feaf 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200077d0 	.word	0x200077d0

08003e2c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream3_IRQHandler+0x10>)
 8003e32:	f007 fea5 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20007f88 	.word	0x20007f88

08003e40 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DMA2_Stream4_IRQHandler+0x10>)
 8003e46:	f007 fe9b 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20007770 	.word	0x20007770

08003e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <OTG_FS_IRQHandler+0x10>)
 8003e5a:	f008 fc10 	bl	800c67e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20009b64 	.word	0x20009b64

08003e68 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <DMA2_Stream5_IRQHandler+0x10>)
 8003e6e:	f007 fe87 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20008464 	.word	0x20008464

08003e7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <DMA2_Stream6_IRQHandler+0x10>)
 8003e82:	f007 fe7d 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200083a4 	.word	0x200083a4

08003e90 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <DMA2_Stream7_IRQHandler+0x10>)
 8003e96:	f007 fe73 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20008344 	.word	0x20008344

08003ea4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <USART6_IRQHandler+0x10>)
 8003eaa:	f00b fc71 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200085c8 	.word	0x200085c8

08003eb8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <UART7_IRQHandler+0x10>)
 8003ebe:	f00b fc67 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20007928 	.word	0x20007928

08003ecc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <UART8_IRQHandler+0x10>)
 8003ed2:	f00b fc5d 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20008584 	.word	0x20008584

08003ee0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003ee4:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <SPI4_IRQHandler+0x10>)
 8003ee6:	f00a fcef 	bl	800e8c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20007d34 	.word	0x20007d34

08003ef4 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <SPI5_IRQHandler+0x10>)
 8003efa:	f00a fce5 	bl	800e8c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20007f30 	.word	0x20007f30

08003f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
	return 1;
 8003f0c:	2301      	movs	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_kill>:

int _kill(int pid, int sig)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f22:	f012 ff3d 	bl	8016da0 <__errno>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2216      	movs	r2, #22
 8003f2a:	601a      	str	r2, [r3, #0]
	return -1;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_exit>:

void _exit (int status)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ffe7 	bl	8003f18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f4a:	e7fe      	b.n	8003f4a <_exit+0x12>

08003f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e00a      	b.n	8003f74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f5e:	f3af 8000 	nop.w
 8003f62:	4601      	mov	r1, r0
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	60ba      	str	r2, [r7, #8]
 8003f6a:	b2ca      	uxtb	r2, r1
 8003f6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3301      	adds	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	dbf0      	blt.n	8003f5e <_read+0x12>
	}

return len;
 8003f7c:	687b      	ldr	r3, [r7, #4]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e009      	b.n	8003fac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	dbf1      	blt.n	8003f98 <_write+0x12>
	}
	return len;
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_close>:

int _close(int file)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_isatty>:

int _isatty(int file)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8003ffe:	2301      	movs	r3, #1
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
	return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <_sbrk+0x5c>)
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <_sbrk+0x60>)
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <_sbrk+0x64>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <_sbrk+0x64>)
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <_sbrk+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <_sbrk+0x64>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	429a      	cmp	r2, r3
 8004056:	d207      	bcs.n	8004068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004058:	f012 fea2 	bl	8016da0 <__errno>
 800405c:	4603      	mov	r3, r0
 800405e:	220c      	movs	r2, #12
 8004060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e009      	b.n	800407c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <_sbrk+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <_sbrk+0x64>)
 8004078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20030000 	.word	0x20030000
 8004088:	00000400 	.word	0x00000400
 800408c:	20000320 	.word	0x20000320
 8004090:	20009f80 	.word	0x20009f80

08004094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <SystemInit+0x20>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <SystemInit+0x20>)
 80040a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <MX_TIM6_Init>:
DMA_HandleTypeDef hdma_tim6_up;
DMA_HandleTypeDef hdma_tim7_up;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040be:	463b      	mov	r3, r7
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <MX_TIM6_Init+0x64>)
 80040c8:	4a15      	ldr	r2, [pc, #84]	; (8004120 <MX_TIM6_Init+0x68>)
 80040ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <MX_TIM6_Init+0x64>)
 80040ce:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80040d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <MX_TIM6_Init+0x64>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <MX_TIM6_Init+0x64>)
 80040dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80040e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <MX_TIM6_Init+0x64>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <MX_TIM6_Init+0x64>)
 80040ea:	f00a fe3b 	bl	800ed64 <HAL_TIM_Base_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80040f4:	f7ff fa3a 	bl	800356c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004100:	463b      	mov	r3, r7
 8004102:	4619      	mov	r1, r3
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <MX_TIM6_Init+0x64>)
 8004106:	f00b f8bd 	bl	800f284 <HAL_TIMEx_MasterConfigSynchronization>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004110:	f7ff fa2c 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20008210 	.word	0x20008210
 8004120:	40001000 	.word	0x40001000

08004124 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800412a:	463b      	mov	r3, r7
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <MX_TIM7_Init+0x64>)
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <MX_TIM7_Init+0x68>)
 8004136:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <MX_TIM7_Init+0x64>)
 800413a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800413e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <MX_TIM7_Init+0x64>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <MX_TIM7_Init+0x64>)
 8004148:	f247 522f 	movw	r2, #29999	; 0x752f
 800414c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <MX_TIM7_Init+0x64>)
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004154:	480c      	ldr	r0, [pc, #48]	; (8004188 <MX_TIM7_Init+0x64>)
 8004156:	f00a fe05 	bl	800ed64 <HAL_TIM_Base_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004160:	f7ff fa04 	bl	800356c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800416c:	463b      	mov	r3, r7
 800416e:	4619      	mov	r1, r3
 8004170:	4805      	ldr	r0, [pc, #20]	; (8004188 <MX_TIM7_Init+0x64>)
 8004172:	f00b f887 	bl	800f284 <HAL_TIMEx_MasterConfigSynchronization>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800417c:	f7ff f9f6 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20008258 	.word	0x20008258
 800418c:	40001400 	.word	0x40001400

08004190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a4c      	ldr	r2, [pc, #304]	; (80042d0 <HAL_TIM_Base_MspInit+0x140>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d146      	bne.n	8004230 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Stream1;
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041c0:	4a46      	ldr	r2, [pc, #280]	; (80042dc <HAL_TIM_Base_MspInit+0x14c>)
 80041c2:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80041ca:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d2:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041de:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e6:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ee:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80041f6:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8004202:	4835      	ldr	r0, [pc, #212]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 8004204:	f007 fb24 	bl	800b850 <HAL_DMA_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800420e:	f7ff f9ad 	bl	800356c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 8004216:	621a      	str	r2, [r3, #32]
 8004218:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <HAL_TIM_Base_MspInit+0x148>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2105      	movs	r1, #5
 8004222:	2036      	movs	r0, #54	; 0x36
 8004224:	f007 faea 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004228:	2036      	movs	r0, #54	; 0x36
 800422a:	f007 fb03 	bl	800b834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800422e:	e04a      	b.n	80042c6 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_TIM_Base_MspInit+0x150>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d145      	bne.n	80042c6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 8004244:	f043 0320 	orr.w	r3, r3, #32
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream4;
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004258:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <HAL_TIM_Base_MspInit+0x158>)
 800425a:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 800425e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004262:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004276:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 800427a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427e:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004280:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004286:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004290:	2200      	movs	r2, #0
 8004292:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 8004296:	2200      	movs	r2, #0
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 800429a:	4812      	ldr	r0, [pc, #72]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 800429c:	f007 fad8 	bl	800b850 <HAL_DMA_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 80042a6:	f7ff f961 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 80042ae:	621a      	str	r2, [r3, #32]
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <HAL_TIM_Base_MspInit+0x154>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2105      	movs	r1, #5
 80042ba:	2037      	movs	r0, #55	; 0x37
 80042bc:	f007 fa9e 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042c0:	2037      	movs	r0, #55	; 0x37
 80042c2:	f007 fab7 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40001000 	.word	0x40001000
 80042d4:	40023800 	.word	0x40023800
 80042d8:	200081b0 	.word	0x200081b0
 80042dc:	40026028 	.word	0x40026028
 80042e0:	40001400 	.word	0x40001400
 80042e4:	20008150 	.word	0x20008150
 80042e8:	40026070 	.word	0x40026070

080042ec <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <MX_UART7_Init+0x4c>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <MX_UART7_Init+0x50>)
 80042f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <MX_UART7_Init+0x4c>)
 80042f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <MX_UART7_Init+0x4c>)
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <MX_UART7_Init+0x4c>)
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <MX_UART7_Init+0x4c>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MX_UART7_Init+0x4c>)
 8004312:	220c      	movs	r2, #12
 8004314:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <MX_UART7_Init+0x4c>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <MX_UART7_Init+0x4c>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_UART7_Init+0x4c>)
 8004324:	f00b f83e 	bl	800f3a4 <HAL_UART_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800432e:	f7ff f91d 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20007928 	.word	0x20007928
 800433c:	40007800 	.word	0x40007800

08004340 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_UART8_Init+0x4c>)
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <MX_UART8_Init+0x50>)
 8004348:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <MX_UART8_Init+0x4c>)
 800434c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004350:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <MX_UART8_Init+0x4c>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <MX_UART8_Init+0x4c>)
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <MX_UART8_Init+0x4c>)
 8004360:	2200      	movs	r2, #0
 8004362:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <MX_UART8_Init+0x4c>)
 8004366:	220c      	movs	r2, #12
 8004368:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <MX_UART8_Init+0x4c>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <MX_UART8_Init+0x4c>)
 8004372:	2200      	movs	r2, #0
 8004374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004376:	4805      	ldr	r0, [pc, #20]	; (800438c <MX_UART8_Init+0x4c>)
 8004378:	f00b f814 	bl	800f3a4 <HAL_UART_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8004382:	f7ff f8f3 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20008584 	.word	0x20008584
 8004390:	40007c00 	.word	0x40007c00

08004394 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <MX_USART1_UART_Init+0x50>)
 800439c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043ba:	220c      	movs	r2, #12
 80043bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043be:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ca:	4805      	ldr	r0, [pc, #20]	; (80043e0 <MX_USART1_UART_Init+0x4c>)
 80043cc:	f00a ffea 	bl	800f3a4 <HAL_UART_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043d6:	f7ff f8c9 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20007a18 	.word	0x20007a18
 80043e4:	40011000 	.word	0x40011000

080043e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <MX_USART2_UART_Init+0x50>)
 80043f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 80043f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 800440e:	220c      	movs	r2, #12
 8004410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 800441a:	2200      	movs	r2, #0
 800441c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800441e:	4805      	ldr	r0, [pc, #20]	; (8004434 <MX_USART2_UART_Init+0x4c>)
 8004420:	f00a ffc0 	bl	800f3a4 <HAL_UART_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800442a:	f7ff f89f 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	2000860c 	.word	0x2000860c
 8004438:	40004400 	.word	0x40004400

0800443c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <MX_USART3_UART_Init+0x50>)
 8004444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800444c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004456:	2200      	movs	r2, #0
 8004458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 800445c:	2200      	movs	r2, #0
 800445e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004462:	220c      	movs	r2, #12
 8004464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_USART3_UART_Init+0x4c>)
 8004474:	f00a ff96 	bl	800f3a4 <HAL_UART_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800447e:	f7ff f875 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20008300 	.word	0x20008300
 800448c:	40004800 	.word	0x40004800

08004490 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <MX_USART6_UART_Init+0x50>)
 8004498:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 800449c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80044c6:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044c8:	f00a ff6c 	bl	800f3a4 <HAL_UART_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80044d2:	f7ff f84b 	bl	800356c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200085c8 	.word	0x200085c8
 80044e0:	40011400 	.word	0x40011400

080044e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b094      	sub	sp, #80	; 0x50
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7e      	ldr	r2, [pc, #504]	; (80046fc <HAL_UART_MspInit+0x218>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d163      	bne.n	80045ce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
 800450a:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <HAL_UART_MspInit+0x21c>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b7a      	ldr	r3, [pc, #488]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a75      	ldr	r2, [pc, #468]	; (8004700 <HAL_UART_MspInit+0x21c>)
 800452c:	f043 0310 	orr.w	r3, r3, #16
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_OBC_Pin|DEBUG_RX_OBC_Pin;
 800453e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004550:	2308      	movs	r3, #8
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004558:	4619      	mov	r1, r3
 800455a:	486a      	ldr	r0, [pc, #424]	; (8004704 <HAL_UART_MspInit+0x220>)
 800455c:	f007 fd7a 	bl	800c054 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8004560:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004562:	4a6a      	ldr	r2, [pc, #424]	; (800470c <HAL_UART_MspInit+0x228>)
 8004564:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8004566:	4b68      	ldr	r3, [pc, #416]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004568:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800456c:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800456e:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004574:	4b64      	ldr	r3, [pc, #400]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800457a:	4b63      	ldr	r3, [pc, #396]	; (8004708 <HAL_UART_MspInit+0x224>)
 800457c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004580:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004584:	2200      	movs	r2, #0
 8004586:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <HAL_UART_MspInit+0x224>)
 800458a:	2200      	movs	r2, #0
 800458c:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004590:	2200      	movs	r2, #0
 8004592:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004594:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_UART_MspInit+0x224>)
 8004596:	2200      	movs	r2, #0
 8004598:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_UART_MspInit+0x224>)
 800459c:	2200      	movs	r2, #0
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80045a0:	4859      	ldr	r0, [pc, #356]	; (8004708 <HAL_UART_MspInit+0x224>)
 80045a2:	f007 f955 	bl	800b850 <HAL_DMA_Init>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80045ac:	f7fe ffde 	bl	800356c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a55      	ldr	r2, [pc, #340]	; (8004708 <HAL_UART_MspInit+0x224>)
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
 80045b6:	4a54      	ldr	r2, [pc, #336]	; (8004708 <HAL_UART_MspInit+0x224>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2105      	movs	r1, #5
 80045c0:	2052      	movs	r0, #82	; 0x52
 80045c2:	f007 f91b 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80045c6:	2052      	movs	r0, #82	; 0x52
 80045c8:	f007 f934 	bl	800b834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80045cc:	e265      	b.n	8004a9a <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==UART8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4f      	ldr	r2, [pc, #316]	; (8004710 <HAL_UART_MspInit+0x22c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	f040 80a5 	bne.w	8004724 <HAL_UART_MspInit+0x240>
    __HAL_RCC_UART8_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
 80045de:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_UART_MspInit+0x21c>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a47      	ldr	r2, [pc, #284]	; (8004700 <HAL_UART_MspInit+0x21c>)
 80045e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b45      	ldr	r3, [pc, #276]	; (8004700 <HAL_UART_MspInit+0x21c>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_UART_MspInit+0x21c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a40      	ldr	r2, [pc, #256]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
 8004606:	4b3e      	ldr	r3, [pc, #248]	; (8004700 <HAL_UART_MspInit+0x21c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004612:	2303      	movs	r3, #3
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461e:	2303      	movs	r3, #3
 8004620:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004622:	2308      	movs	r3, #8
 8004624:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800462a:	4619      	mov	r1, r3
 800462c:	4835      	ldr	r0, [pc, #212]	; (8004704 <HAL_UART_MspInit+0x220>)
 800462e:	f007 fd11 	bl	800c054 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8004632:	4b38      	ldr	r3, [pc, #224]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004634:	4a38      	ldr	r2, [pc, #224]	; (8004718 <HAL_UART_MspInit+0x234>)
 8004636:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_UART_MspInit+0x230>)
 800463a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800463e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004640:	4b34      	ldr	r3, [pc, #208]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004648:	2200      	movs	r2, #0
 800464a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_UART_MspInit+0x230>)
 800464e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004652:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004656:	2200      	movs	r2, #0
 8004658:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_UART_MspInit+0x230>)
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004668:	2200      	movs	r2, #0
 800466a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_UART_MspInit+0x230>)
 800466e:	2200      	movs	r2, #0
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8004672:	4828      	ldr	r0, [pc, #160]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004674:	f007 f8ec 	bl	800b850 <HAL_DMA_Init>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800467e:	f7fe ff75 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_UART_MspInit+0x230>)
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
 8004688:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_UART_MspInit+0x230>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream0;
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_UART_MspInit+0x238>)
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_UART_MspInit+0x23c>)
 8004692:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8004694:	4b21      	ldr	r3, [pc, #132]	; (800471c <HAL_UART_MspInit+0x238>)
 8004696:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800469a:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800469c:	4b1f      	ldr	r3, [pc, #124]	; (800471c <HAL_UART_MspInit+0x238>)
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_UART_MspInit+0x238>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_UART_MspInit+0x238>)
 80046aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ae:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <HAL_UART_MspInit+0x238>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_UART_MspInit+0x238>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <HAL_UART_MspInit+0x238>)
 80046be:	2200      	movs	r2, #0
 80046c0:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_UART_MspInit+0x238>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_UART_MspInit+0x238>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80046ce:	4813      	ldr	r0, [pc, #76]	; (800471c <HAL_UART_MspInit+0x238>)
 80046d0:	f007 f8be 	bl	800b850 <HAL_DMA_Init>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80046da:	f7fe ff47 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_UART_MspInit+0x238>)
 80046e2:	635a      	str	r2, [r3, #52]	; 0x34
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_UART_MspInit+0x238>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2105      	movs	r1, #5
 80046ee:	2053      	movs	r0, #83	; 0x53
 80046f0:	f007 f884 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80046f4:	2053      	movs	r0, #83	; 0x53
 80046f6:	f007 f89d 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 80046fa:	e1ce      	b.n	8004a9a <HAL_UART_MspInit+0x5b6>
 80046fc:	40007800 	.word	0x40007800
 8004700:	40023800 	.word	0x40023800
 8004704:	40021000 	.word	0x40021000
 8004708:	20008404 	.word	0x20008404
 800470c:	40026058 	.word	0x40026058
 8004710:	40007c00 	.word	0x40007c00
 8004714:	200084c4 	.word	0x200084c4
 8004718:	400260a0 	.word	0x400260a0
 800471c:	20008524 	.word	0x20008524
 8004720:	40026010 	.word	0x40026010
  else if(uartHandle->Instance==USART1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a9b      	ldr	r2, [pc, #620]	; (8004998 <HAL_UART_MspInit+0x4b4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f040 8091 	bne.w	8004852 <HAL_UART_MspInit+0x36e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004730:	2300      	movs	r3, #0
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
 8004734:	4b99      	ldr	r3, [pc, #612]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	4a98      	ldr	r2, [pc, #608]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800473a:	f043 0310 	orr.w	r3, r3, #16
 800473e:	6453      	str	r3, [r2, #68]	; 0x44
 8004740:	4b96      	ldr	r3, [pc, #600]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a91      	ldr	r2, [pc, #580]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004756:	f043 0302 	orr.w	r3, r3, #2
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
 800475c:	4b8f      	ldr	r3, [pc, #572]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004768:	23c0      	movs	r3, #192	; 0xc0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476c:	2302      	movs	r3, #2
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004774:	2303      	movs	r3, #3
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004778:	2307      	movs	r3, #7
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004780:	4619      	mov	r1, r3
 8004782:	4887      	ldr	r0, [pc, #540]	; (80049a0 <HAL_UART_MspInit+0x4bc>)
 8004784:	f007 fc66 	bl	800c054 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8004788:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 800478a:	4a87      	ldr	r2, [pc, #540]	; (80049a8 <HAL_UART_MspInit+0x4c4>)
 800478c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800478e:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 8004790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004794:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004796:	4b83      	ldr	r3, [pc, #524]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 800479e:	2200      	movs	r2, #0
 80047a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047a2:	4b80      	ldr	r3, [pc, #512]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047aa:	4b7e      	ldr	r3, [pc, #504]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80047b6:	4b7b      	ldr	r3, [pc, #492]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047bc:	4b79      	ldr	r3, [pc, #484]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047c2:	4b78      	ldr	r3, [pc, #480]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047c8:	4876      	ldr	r0, [pc, #472]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047ca:	f007 f841 	bl	800b850 <HAL_DMA_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 80047d4:	f7fe feca 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a72      	ldr	r2, [pc, #456]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
 80047de:	4a71      	ldr	r2, [pc, #452]	; (80049a4 <HAL_UART_MspInit+0x4c0>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80047e4:	4b71      	ldr	r3, [pc, #452]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 80047e6:	4a72      	ldr	r2, [pc, #456]	; (80049b0 <HAL_UART_MspInit+0x4cc>)
 80047e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80047ea:	4b70      	ldr	r3, [pc, #448]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 80047ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f8:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047fe:	4b6b      	ldr	r3, [pc, #428]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004804:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004806:	4b69      	ldr	r3, [pc, #420]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004808:	2200      	movs	r2, #0
 800480a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800480c:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 800480e:	2200      	movs	r2, #0
 8004810:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004812:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004814:	2200      	movs	r2, #0
 8004816:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004818:	4b64      	ldr	r3, [pc, #400]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 800481a:	2200      	movs	r2, #0
 800481c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004820:	2200      	movs	r2, #0
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004824:	4861      	ldr	r0, [pc, #388]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004826:	f007 f813 	bl	800b850 <HAL_DMA_Init>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8004830:	f7fe fe9c 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a5d      	ldr	r2, [pc, #372]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 8004838:	635a      	str	r2, [r3, #52]	; 0x34
 800483a:	4a5c      	ldr	r2, [pc, #368]	; (80049ac <HAL_UART_MspInit+0x4c8>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004840:	2200      	movs	r2, #0
 8004842:	2105      	movs	r1, #5
 8004844:	2025      	movs	r0, #37	; 0x25
 8004846:	f006 ffd9 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800484a:	2025      	movs	r0, #37	; 0x25
 800484c:	f006 fff2 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8004850:	e123      	b.n	8004a9a <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==USART2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_UART_MspInit+0x4d0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d162      	bne.n	8004922 <HAL_UART_MspInit+0x43e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800485c:	2300      	movs	r3, #0
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	4b4e      	ldr	r3, [pc, #312]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	4a4d      	ldr	r2, [pc, #308]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	6413      	str	r3, [r2, #64]	; 0x40
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	4a46      	ldr	r2, [pc, #280]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	6313      	str	r3, [r2, #48]	; 0x30
 8004888:	4b44      	ldr	r3, [pc, #272]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8004894:	2360      	movs	r3, #96	; 0x60
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004898:	2302      	movs	r3, #2
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	2300      	movs	r3, #0
 800489e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a0:	2303      	movs	r3, #3
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048a4:	2307      	movs	r3, #7
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80048ac:	4619      	mov	r1, r3
 80048ae:	4842      	ldr	r0, [pc, #264]	; (80049b8 <HAL_UART_MspInit+0x4d4>)
 80048b0:	f007 fbd0 	bl	800c054 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048b6:	4a42      	ldr	r2, [pc, #264]	; (80049c0 <HAL_UART_MspInit+0x4dc>)
 80048b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80048ba:	4b40      	ldr	r3, [pc, #256]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c2:	4b3e      	ldr	r3, [pc, #248]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c8:	4b3c      	ldr	r3, [pc, #240]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048d6:	4b39      	ldr	r3, [pc, #228]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048dc:	4b37      	ldr	r3, [pc, #220]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048e8:	4b34      	ldr	r3, [pc, #208]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ee:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048f4:	4831      	ldr	r0, [pc, #196]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 80048f6:	f006 ffab 	bl	800b850 <HAL_DMA_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8004900:	f7fe fe34 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_UART_MspInit+0x4d8>)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004910:	2200      	movs	r2, #0
 8004912:	2105      	movs	r1, #5
 8004914:	2026      	movs	r0, #38	; 0x26
 8004916:	f006 ff71 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800491a:	2026      	movs	r0, #38	; 0x26
 800491c:	f006 ff8a 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8004920:	e0bb      	b.n	8004a9a <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==USART3)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <HAL_UART_MspInit+0x4e0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d14f      	bne.n	80049cc <HAL_UART_MspInit+0x4e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493a:	6413      	str	r3, [r2, #64]	; 0x40
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_UART_MspInit+0x4b8>)
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	6313      	str	r3, [r2, #48]	; 0x30
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_UART_MspInit+0x4b8>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004964:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496a:	2302      	movs	r3, #2
 800496c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004972:	2303      	movs	r3, #3
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004976:	2307      	movs	r3, #7
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800497a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800497e:	4619      	mov	r1, r3
 8004980:	4811      	ldr	r0, [pc, #68]	; (80049c8 <HAL_UART_MspInit+0x4e4>)
 8004982:	f007 fb67 	bl	800c054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	2105      	movs	r1, #5
 800498a:	2027      	movs	r0, #39	; 0x27
 800498c:	f006 ff36 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004990:	2027      	movs	r0, #39	; 0x27
 8004992:	f006 ff4f 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8004996:	e080      	b.n	8004a9a <HAL_UART_MspInit+0x5b6>
 8004998:	40011000 	.word	0x40011000
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020400 	.word	0x40020400
 80049a4:	20008464 	.word	0x20008464
 80049a8:	40026488 	.word	0x40026488
 80049ac:	20008344 	.word	0x20008344
 80049b0:	400264b8 	.word	0x400264b8
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	200082a0 	.word	0x200082a0
 80049c0:	40026088 	.word	0x40026088
 80049c4:	40004800 	.word	0x40004800
 80049c8:	40020800 	.word	0x40020800
  else if(uartHandle->Instance==USART6)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <HAL_UART_MspInit+0x5c0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d161      	bne.n	8004a9a <HAL_UART_MspInit+0x5b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a32      	ldr	r2, [pc, #200]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	6453      	str	r3, [r2, #68]	; 0x44
 80049e6:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <HAL_UART_MspInit+0x5c4>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a0e:	23c0      	movs	r3, #192	; 0xc0
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a1e:	2308      	movs	r3, #8
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a26:	4619      	mov	r1, r3
 8004a28:	4820      	ldr	r0, [pc, #128]	; (8004aac <HAL_UART_MspInit+0x5c8>)
 8004a2a:	f007 fb13 	bl	800c054 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <HAL_UART_MspInit+0x5d0>)
 8004a32:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a36:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004a3a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a50:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004a6e:	4810      	ldr	r0, [pc, #64]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a70:	f006 feee 	bl	800b850 <HAL_DMA_Init>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_UART_MspInit+0x59a>
      Error_Handler();
 8004a7a:	f7fe fd77 	bl	800356c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_UART_MspInit+0x5cc>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2105      	movs	r1, #5
 8004a8e:	2047      	movs	r0, #71	; 0x47
 8004a90:	f006 feb4 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a94:	2047      	movs	r0, #71	; 0x47
 8004a96:	f006 fecd 	bl	800b834 <HAL_NVIC_EnableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3750      	adds	r7, #80	; 0x50
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40020800 	.word	0x40020800
 8004ab0:	200083a4 	.word	0x200083a4
 8004ab4:	400264a0 	.word	0x400264a0

08004ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004abc:	480d      	ldr	r0, [pc, #52]	; (8004af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004abe:	490e      	ldr	r1, [pc, #56]	; (8004af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ac4:	e002      	b.n	8004acc <LoopCopyDataInit>

08004ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aca:	3304      	adds	r3, #4

08004acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad0:	d3f9      	bcc.n	8004ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ad4:	4c0b      	ldr	r4, [pc, #44]	; (8004b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ad8:	e001      	b.n	8004ade <LoopFillZerobss>

08004ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004adc:	3204      	adds	r2, #4

08004ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae0:	d3fb      	bcc.n	8004ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ae2:	f7ff fad7 	bl	8004094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ae6:	f012 fa69 	bl	8016fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aea:	f7fe fc89 	bl	8003400 <main>
  bx  lr    
 8004aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004af0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004af8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8004afc:	0801a25c 	.word	0x0801a25c
  ldr r2, =_sbss
 8004b00:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8004b04:	20009f7c 	.word	0x20009f7c

08004b08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b08:	e7fe      	b.n	8004b08 <CAN1_RX0_IRQHandler>

08004b0a <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf38      	it	cc
 8004b1c:	4613      	movcc	r3, r2
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	bf28      	it	cs
 8004b3c:	4613      	movcs	r3, r2
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	fb01 f202 	mul.w	r2, r1, r2
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4413      	add	r3, r2
 8004b84:	3b01      	subs	r3, #1
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ffde 	bl	8004b4a <lfs_aligndown>
 8004b8e:	4603      	mov	r3, r0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fb ff94 	bl	8000b0c <__popcountsi2>
 8004be4:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8004c12:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffee 	bl	8004c0a <lfs_fromle32>
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ffed 	bl	8004c38 <lfs_frombe32>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f012 f9cb 	bl	801700c <malloc>
 8004c76:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f012 f9c7 	bl	801701c <free>
#else
    (void)p;
#endif
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca6:	601a      	str	r2, [r3, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68d8      	ldr	r0, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	461a      	mov	r2, r3
 8004cca:	21ff      	movs	r1, #255	; 0xff
 8004ccc:	f012 f9ca 	bl	8017064 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8004ce0:	b5b0      	push	{r4, r5, r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d80a      	bhi.n	8004d18 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8124 	beq.w	8004f54 <lfs_bd_read+0x274>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f0c0 811e 	bcc.w	8004f54 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8004d18:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004d1c:	e11f      	b.n	8004f5e <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d03f      	beq.n	8004da8 <lfs_bd_read+0xc8>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d13a      	bne.n	8004da8 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8004d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d232      	bcs.n	8004da8 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d324      	bcc.n	8004d96 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	1acb      	subs	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	69b8      	ldr	r0, [r7, #24]
 8004d5e:	f7ff fee4 	bl	8004b2a <lfs_min>
 8004d62:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d6e:	1acb      	subs	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4619      	mov	r1, r3
 8004d76:	69f8      	ldr	r0, [r7, #28]
 8004d78:	f012 f966 	bl	8017048 <memcpy>

                data += diff;
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4413      	add	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4413      	add	r3, r2
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004d94:	e0de      	b.n	8004f54 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	69b8      	ldr	r0, [r7, #24]
 8004da2:	f7ff fec2 	bl	8004b2a <lfs_min>
 8004da6:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d13a      	bne.n	8004e28 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4413      	add	r3, r2
        if (block == rcache->block &&
 8004dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d232      	bcs.n	8004e28 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d324      	bcc.n	8004e16 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	69b8      	ldr	r0, [r7, #24]
 8004dde:	f7ff fea4 	bl	8004b2a <lfs_min>
 8004de2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4619      	mov	r1, r3
 8004df6:	69f8      	ldr	r0, [r7, #28]
 8004df8:	f012 f926 	bl	8017048 <memcpy>

                data += diff;
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4413      	add	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004e14:	e09e      	b.n	8004f54 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	69b8      	ldr	r0, [r7, #24]
 8004e22:	f7ff fe82 	bl	8004b2a <lfs_min>
 8004e26:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d336      	bcc.n	8004e9e <lfs_bd_read+0x1be>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e3c:	fb02 f201 	mul.w	r2, r2, r1
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d12b      	bne.n	8004e9e <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d325      	bcc.n	8004e9e <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	69b8      	ldr	r0, [r7, #24]
 8004e5c:	f7ff fe75 	bl	8004b4a <lfs_aligndown>
 8004e60:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e66:	685c      	ldr	r4, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e76:	47a0      	blx	r4
 8004e78:	6178      	str	r0, [r7, #20]
            if (err) {
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <lfs_bd_read+0x1a4>
                return err;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	e06c      	b.n	8004f5e <lfs_bd_read+0x27e>
            }

            data += diff;
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	4413      	add	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
            off += diff;
 8004e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4413      	add	r3, r2
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8004e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8004e9c:	e05a      	b.n	8004f54 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <lfs_bd_read+0x1dc>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d305      	bcc.n	8004ebc <lfs_bd_read+0x1dc>
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <lfs_bd_read+0x288>)
 8004eb2:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <lfs_bd_read+0x28c>)
 8004eb4:	216b      	movs	r1, #107	; 0x6b
 8004eb6:	482e      	ldr	r0, [pc, #184]	; (8004f70 <lfs_bd_read+0x290>)
 8004eb8:	f011 ff54 	bl	8016d64 <__assert_func>
        rcache->block = block;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ecc:	f7ff fe3d 	bl	8004b4a <lfs_aligndown>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8004ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7ff fe45 	bl	8004b74 <lfs_alignup>
 8004eea:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff fe18 	bl	8004b2a <lfs_min>
 8004efa:	4602      	mov	r2, r0
                - rcache->off,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8004f00:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff fe0d 	bl	8004b2a <lfs_min>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462b      	mov	r3, r5
 8004f34:	47a0      	blx	r4
 8004f36:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dd05      	ble.n	8004f4a <lfs_bd_read+0x26a>
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <lfs_bd_read+0x294>)
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <lfs_bd_read+0x28c>)
 8004f42:	2176      	movs	r1, #118	; 0x76
 8004f44:	480a      	ldr	r0, [pc, #40]	; (8004f70 <lfs_bd_read+0x290>)
 8004f46:	f011 ff0d 	bl	8016d64 <__assert_func>
        if (err) {
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <lfs_bd_read+0x274>
            return err;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	e004      	b.n	8004f5e <lfs_bd_read+0x27e>
    while (size > 0) {
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f47f aee1 	bne.w	8004d1e <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	08019464 	.word	0x08019464
 8004f6c:	08019fec 	.word	0x08019fec
 8004f70:	08019494 	.word	0x08019494
 8004f74:	080194b4 	.word	0x080194b4

08004f78 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b090      	sub	sp, #64	; 0x40
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8004f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	e039      	b.n	8005008 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8004f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2108      	movs	r1, #8
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fdc4 	bl	8004b2a <lfs_min>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	1ad1      	subs	r1, r2, r3
 8004faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	4413      	add	r3, r2
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	f107 0214 	add.w	r2, r7, #20
 8004fb8:	9202      	str	r2, [sp, #8]
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fe8a 	bl	8004ce0 <lfs_bd_read>
 8004fcc:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <lfs_bd_cmp+0x60>
            return err;
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	e01c      	b.n	8005012 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8004fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	18d1      	adds	r1, r2, r3
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f012 f821 	bl	801702c <memcmp>
 8004fea:	61f8      	str	r0, [r7, #28]
        if (res) {
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d006      	beq.n	8005000 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da01      	bge.n	8004ffc <lfs_bd_cmp+0x84>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e00a      	b.n	8005012 <lfs_bd_cmp+0x9a>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e008      	b.n	8005012 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8005000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4413      	add	r3, r2
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	429a      	cmp	r2, r3
 800500e:	d3c1      	bcc.n	8004f94 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3730      	adds	r7, #48	; 0x30
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800501a:	b580      	push	{r7, lr}
 800501c:	b08e      	sub	sp, #56	; 0x38
 800501e:	af04      	add	r7, sp, #16
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800502c:	2300      	movs	r3, #0
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
 8005030:	e030      	b.n	8005094 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8005032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2108      	movs	r1, #8
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fd75 	bl	8004b2a <lfs_min>
 8005040:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1ad1      	subs	r1, r2, r3
 8005048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	4413      	add	r3, r2
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	9203      	str	r2, [sp, #12]
 8005052:	f107 0214 	add.w	r2, r7, #20
 8005056:	9202      	str	r2, [sp, #8]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	460b      	mov	r3, r1
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff fe3b 	bl	8004ce0 <lfs_bd_read>
 800506a:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <lfs_bd_crc+0x5c>
            return err;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	e013      	b.n	800509e <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8005076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f107 0114 	add.w	r1, r7, #20
 800507e:	6a3a      	ldr	r2, [r7, #32]
 8005080:	4618      	mov	r0, r3
 8005082:	f005 fe99 	bl	800adb8 <lfs_crc>
 8005086:	4602      	mov	r2, r0
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508a:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	4413      	add	r3, r2
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	429a      	cmp	r2, r3
 800509a:	d3ca      	bcc.n	8005032 <lfs_bd_crc+0x18>
    }

    return 0;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3728      	adds	r7, #40	; 0x28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b08c      	sub	sp, #48	; 0x30
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d060      	beq.n	8005182 <lfs_bd_flush+0xda>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f113 0f02 	cmn.w	r3, #2
 80050c8:	d05b      	beq.n	8005182 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d305      	bcc.n	80050e2 <lfs_bd_flush+0x3a>
 80050d6:	4b2d      	ldr	r3, [pc, #180]	; (800518c <lfs_bd_flush+0xe4>)
 80050d8:	4a2d      	ldr	r2, [pc, #180]	; (8005190 <lfs_bd_flush+0xe8>)
 80050da:	21b3      	movs	r1, #179	; 0xb3
 80050dc:	482d      	ldr	r0, [pc, #180]	; (8005194 <lfs_bd_flush+0xec>)
 80050de:	f011 fe41 	bl	8016d64 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7ff fd40 	bl	8004b74 <lfs_alignup>
 80050f4:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fa:	689c      	ldr	r4, [r3, #8]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	462b      	mov	r3, r5
 8005112:	47a0      	blx	r4
 8005114:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dd05      	ble.n	8005128 <lfs_bd_flush+0x80>
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <lfs_bd_flush+0xf0>)
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <lfs_bd_flush+0xe8>)
 8005120:	21b7      	movs	r1, #183	; 0xb7
 8005122:	481c      	ldr	r0, [pc, #112]	; (8005194 <lfs_bd_flush+0xec>)
 8005124:	f011 fe1e 	bl	8016d64 <__assert_func>
        if (err) {
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <lfs_bd_flush+0x8a>
            return err;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	e028      	b.n	8005184 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fdab 	bl	8004c96 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800514c:	69f8      	ldr	r0, [r7, #28]
 800514e:	9003      	str	r0, [sp, #12]
 8005150:	9102      	str	r1, [sp, #8]
 8005152:	9201      	str	r2, [sp, #4]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	2100      	movs	r1, #0
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff ff0b 	bl	8004f78 <lfs_bd_cmp>
 8005162:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	da01      	bge.n	800516e <lfs_bd_flush+0xc6>
                return res;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	e00a      	b.n	8005184 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8005174:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005178:	e004      	b.n	8005184 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fd99 	bl	8004cb4 <lfs_cache_zero>
    }

    return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bdb0      	pop	{r4, r5, r7, pc}
 800518c:	080194c0 	.word	0x080194c0
 8005190:	08019ff8 	.word	0x08019ff8
 8005194:	08019494 	.word	0x08019494
 8005198:	080194b4 	.word	0x080194b4

0800519c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fd72 	bl	8004c96 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff75 	bl	80050a8 <lfs_bd_flush>
 80051be:	6178      	str	r0, [r7, #20]
    if (err) {
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <lfs_bd_sync+0x2e>
        return err;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	e011      	b.n	80051ee <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dd05      	ble.n	80051ec <lfs_bd_sync+0x50>
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <lfs_bd_sync+0x5c>)
 80051e2:	4a06      	ldr	r2, [pc, #24]	; (80051fc <lfs_bd_sync+0x60>)
 80051e4:	21dd      	movs	r1, #221	; 0xdd
 80051e6:	4806      	ldr	r0, [pc, #24]	; (8005200 <lfs_bd_sync+0x64>)
 80051e8:	f011 fdbc 	bl	8016d64 <__assert_func>
    return err;
 80051ec:	697b      	ldr	r3, [r7, #20]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	080194b4 	.word	0x080194b4
 80051fc:	0801a008 	.word	0x0801a008
 8005200:	08019494 	.word	0x08019494

08005204 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	f113 0f02 	cmn.w	r3, #2
 800521c:	d00a      	beq.n	8005234 <lfs_bd_prog+0x30>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005224:	429a      	cmp	r2, r3
 8005226:	d305      	bcc.n	8005234 <lfs_bd_prog+0x30>
 8005228:	4b47      	ldr	r3, [pc, #284]	; (8005348 <lfs_bd_prog+0x144>)
 800522a:	4a48      	ldr	r2, [pc, #288]	; (800534c <lfs_bd_prog+0x148>)
 800522c:	21e8      	movs	r1, #232	; 0xe8
 800522e:	4848      	ldr	r0, [pc, #288]	; (8005350 <lfs_bd_prog+0x14c>)
 8005230:	f011 fd98 	bl	8016d64 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8005234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	441a      	add	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	429a      	cmp	r2, r3
 8005242:	d978      	bls.n	8005336 <lfs_bd_prog+0x132>
 8005244:	4b43      	ldr	r3, [pc, #268]	; (8005354 <lfs_bd_prog+0x150>)
 8005246:	4a41      	ldr	r2, [pc, #260]	; (800534c <lfs_bd_prog+0x148>)
 8005248:	21e9      	movs	r1, #233	; 0xe9
 800524a:	4841      	ldr	r0, [pc, #260]	; (8005350 <lfs_bd_prog+0x14c>)
 800524c:	f011 fd8a 	bl	8016d64 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005256:	429a      	cmp	r2, r3
 8005258:	d151      	bne.n	80052fe <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800525e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005260:	429a      	cmp	r2, r3
 8005262:	d34c      	bcc.n	80052fe <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	4413      	add	r3, r2
                off >= pcache->off &&
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	429a      	cmp	r2, r3
 8005274:	d243      	bcs.n	80052fe <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8005284:	4413      	add	r3, r2
 8005286:	4619      	mov	r1, r3
 8005288:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800528a:	f7ff fc4e 	bl	8004b2a <lfs_min>
 800528e:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800529a:	1acb      	subs	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	69f9      	ldr	r1, [r7, #28]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f011 fed0 	bl	8017048 <memcpy>

            data += diff;
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	4413      	add	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
            off += diff;
 80052b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80052b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6898      	ldr	r0, [r3, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	4619      	mov	r1, r3
 80052ce:	f7ff fc1c 	bl	8004b0a <lfs_max>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d127      	bne.n	8005336 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fedb 	bl	80050a8 <lfs_bd_flush>
 80052f2:	6178      	str	r0, [r7, #20]
                if (err) {
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01d      	beq.n	8005336 <lfs_bd_prog+0x132>
                    return err;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	e01f      	b.n	800533e <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d006      	beq.n	8005316 <lfs_bd_prog+0x112>
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <lfs_bd_prog+0x154>)
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <lfs_bd_prog+0x148>)
 800530c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005310:	480f      	ldr	r0, [pc, #60]	; (8005350 <lfs_bd_prog+0x14c>)
 8005312:	f011 fd27 	bl	8016d64 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	4619      	mov	r1, r3
 8005324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005326:	f7ff fc10 	bl	8004b4a <lfs_aligndown>
 800532a:	4602      	mov	r2, r0
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	2b00      	cmp	r3, #0
 800533a:	d189      	bne.n	8005250 <lfs_bd_prog+0x4c>
    }

    return 0;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	080194e4 	.word	0x080194e4
 800534c:	0801a014 	.word	0x0801a014
 8005350:	08019494 	.word	0x08019494
 8005354:	0801951c 	.word	0x0801951c
 8005358:	08019540 	.word	0x08019540

0800535c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d306      	bcc.n	800537e <lfs_bd_erase+0x22>
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <lfs_bd_erase+0x54>)
 8005372:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <lfs_bd_erase+0x58>)
 8005374:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005378:	480f      	ldr	r0, [pc, #60]	; (80053b8 <lfs_bd_erase+0x5c>)
 800537a:	f011 fcf3 	bl	8016d64 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	4610      	mov	r0, r2
 800538c:	4798      	blx	r3
 800538e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd06      	ble.n	80053a4 <lfs_bd_erase+0x48>
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <lfs_bd_erase+0x60>)
 8005398:	4a06      	ldr	r2, [pc, #24]	; (80053b4 <lfs_bd_erase+0x58>)
 800539a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800539e:	4806      	ldr	r0, [pc, #24]	; (80053b8 <lfs_bd_erase+0x5c>)
 80053a0:	f011 fce0 	bl	8016d64 <__assert_func>
    return err;
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	08019564 	.word	0x08019564
 80053b4:	0801a020 	.word	0x0801a020
 80053b8:	08019494 	.word	0x08019494
 80053bc:	080194b4 	.word	0x080194b4

080053c0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d005      	beq.n	8005408 <lfs_pair_isnull+0x1e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d101      	bne.n	800540c <lfs_pair_isnull+0x22>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <lfs_pair_isnull+0x24>
 800540c:	2300      	movs	r3, #0
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d017      	beq.n	8005466 <lfs_pair_cmp+0x46>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d00f      	beq.n	8005466 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d008      	beq.n	8005466 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d001      	beq.n	8005466 <lfs_pair_cmp+0x46>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <lfs_pair_cmp+0x48>
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d107      	bne.n	800549a <lfs_pair_issync+0x26>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3304      	adds	r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d00d      	beq.n	80054b6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d108      	bne.n	80054ba <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d101      	bne.n	80054ba <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <lfs_pair_issync+0x48>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80054ce:	b590      	push	{r4, r7, lr}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fb95 	bl	8004c0a <lfs_fromle32>
 80054e0:	4602      	mov	r2, r0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1d1c      	adds	r4, r3, #4
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff fb8a 	bl	8004c0a <lfs_fromle32>
 80054f6:	4603      	mov	r3, r0
 80054f8:	6023      	str	r3, [r4, #0]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}

08005502 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8005502:	b590      	push	{r4, r7, lr}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fb86 	bl	8004c20 <lfs_tole32>
 8005514:	4602      	mov	r2, r0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	1d1c      	adds	r4, r3, #4
 8005524:	4610      	mov	r0, r2
 8005526:	f7ff fb7b 	bl	8004c20 <lfs_tole32>
 800552a:	4603      	mov	r3, r0
 800552c:	6023      	str	r3, [r4, #0]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}

08005536 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	43db      	mvns	r3, r3
 8005542:	0fdb      	lsrs	r3, r3, #31
 8005544:	b2db      	uxtb	r3, r3
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	059b      	lsls	r3, r3, #22
 800555e:	159b      	asrs	r3, r3, #22
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	0d1b      	lsrs	r3, r3, #20
 8005584:	b29b      	uxth	r3, r3
 8005586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800558a:	b29b      	uxth	r3, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	0d1b      	lsrs	r3, r3, #20
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80055aa:	b29b      	uxth	r3, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	0d1b      	lsrs	r3, r3, #20
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ca:	b29b      	uxth	r3, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0d1b      	lsrs	r3, r3, #20
 80055e4:	b2db      	uxtb	r3, r3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ffec 	bl	80055d8 <lfs_tag_chunk>
 8005600:	4603      	mov	r3, r0
 8005602:	b25b      	sxtb	r3, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0a9b      	lsrs	r3, r3, #10
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29b      	uxth	r3, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ff7f 	bl	8005552 <lfs_tag_isdelete>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4413      	add	r3, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ffe5 	bl	800562c <lfs_tag_size>
 8005662:	4603      	mov	r3, r0
 8005664:	3304      	adds	r3, #4
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e012      	b.n	80056a4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	6819      	ldr	r1, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4413      	add	r3, r2
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4403      	add	r3, r0
 800569a:	404a      	eors	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	dde9      	ble.n	800567e <lfs_gstate_xor+0x10>
    }
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e00b      	b.n	80056de <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <lfs_gstate_iszero+0x20>
            return false;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e006      	b.n	80056e6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	ddf0      	ble.n	80056c6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80056e4:	2301      	movs	r3, #1
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff94 	bl	800562c <lfs_tag_size>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff ff81 	bl	800562c <lfs_tag_size>
 800572a:	4603      	mov	r3, r0
 800572c:	b2db      	uxtb	r3, r3
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff ff18 	bl	8005578 <lfs_tag_type1>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ff5f 	bl	800562c <lfs_tag_size>
 800576e:	4603      	mov	r3, r0
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fef0 	bl	8005578 <lfs_tag_type1>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <lfs_gstate_hasmovehere+0x30>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe3b 	bl	8005420 <lfs_pair_cmp>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <lfs_gstate_hasmovehere+0x30>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <lfs_gstate_hasmovehere+0x32>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	b2db      	uxtb	r3, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fa1a 	bl	8004c0a <lfs_fromle32>
 80057d6:	4602      	mov	r2, r0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fa12 	bl	8004c0a <lfs_fromle32>
 80057e6:	4602      	mov	r2, r0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fa0a 	bl	8004c0a <lfs_fromle32>
 80057f6:	4602      	mov	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fa05 	bl	8004c20 <lfs_tole32>
 8005816:	4602      	mov	r2, r0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff f9fd 	bl	8004c20 <lfs_tole32>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff f9f5 	bl	8004c20 <lfs_tole32>
 8005836:	4602      	mov	r2, r0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff f9da 	bl	8004c0a <lfs_fromle32>
 8005856:	4602      	mov	r2, r0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f9d2 	bl	8004c0a <lfs_fromle32>
 8005866:	4602      	mov	r2, r0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff f9cd 	bl	8004c20 <lfs_tole32>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f9c5 	bl	8004c20 <lfs_tole32>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff f9aa 	bl	8004c0a <lfs_fromle32>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff f9a2 	bl	8004c0a <lfs_fromle32>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f99d 	bl	8004c20 <lfs_tole32>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff f995 	bl	8004c20 <lfs_tole32>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <lfs_superblock_tole32>:
    superblock->file_max    = lfs_fromle32(superblock->file_max);
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
}

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff f985 	bl	8004c20 <lfs_tole32>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f97d 	bl	8004c20 <lfs_tole32>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff f975 	bl	8004c20 <lfs_tole32>
 8005936:	4602      	mov	r2, r0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f96d 	bl	8004c20 <lfs_tole32>
 8005946:	4602      	mov	r2, r0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f965 	bl	8004c20 <lfs_tole32>
 8005956:	4602      	mov	r2, r0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff f95d 	bl	8004c20 <lfs_tole32>
 8005966:	4602      	mov	r2, r0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	615a      	str	r2, [r3, #20]
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e009      	b.n	8005998 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d101      	bne.n	8005992 <lfs_mlist_isopen+0x1e>
            return true;
 800598e:	2301      	movs	r3, #1
 8005990:	e007      	b.n	80059a2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f1      	bne.n	8005984 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3328      	adds	r3, #40	; 0x28
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e00d      	b.n	80059dc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d105      	bne.n	80059d6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]
            break;
 80059d4:	e007      	b.n	80059e6 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ed      	bne.n	80059c0 <lfs_mlist_remove+0x12>
        }
    }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <lfs_fs_disk_version+0x18>)
    }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00020001 	.word	0x00020001

08005a34 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4e:	4413      	add	r3, r2
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 8005a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a58:	fb02 f201 	mul.w	r2, r2, r1
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d212      	bcs.n	8005a90 <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	009a      	lsls	r2, r3, #2
 8005a74:	440a      	add	r2, r1
 8005a76:	6811      	ldr	r1, [r2, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	f002 021f 	and.w	r2, r2, #31
 8005a7e:	2001      	movs	r0, #1
 8005a80:	fa00 f202 	lsl.w	r2, r0, r2
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4403      	add	r3, r0
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ffe5 	bl	8005a9e <lfs_alloc_ack>
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	4413      	add	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af6:	fb02 f201 	mul.w	r2, r2, r1
 8005afa:	1a9a      	subs	r2, r3, r2
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	00da      	lsls	r2, r3, #3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7ff f80b 	bl	8004b2a <lfs_min>
 8005b14:	4602      	mov	r2, r0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	f011 fa99 	bl	8017064 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8005b32:	2301      	movs	r3, #1
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4909      	ldr	r1, [pc, #36]	; (8005b5c <lfs_fs_rawgc+0x80>)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f004 fa3d 	bl	8009fb8 <lfs_fs_rawtraverse>
 8005b3e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff ffb7 	bl	8005aba <lfs_alloc_drop>
        return err;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e000      	b.n	8005b52 <lfs_fs_rawgc+0x76>
    }

    return 0;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08005a35 	.word	0x08005a35

08005b60 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8005b6a:	e04e      	b.n	8005c0a <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d131      	bne.n	8005c0a <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bb6:	fb02 f201 	mul.w	r2, r2, r1
 8005bba:	1a9a      	subs	r2, r3, r2
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8005bc0:	e009      	b.n	8005bd6 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	1e5a      	subs	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d011      	beq.n	8005c06 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1dd      	bne.n	8005bc2 <lfs_alloc+0x62>
                }

                return 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e021      	b.n	8005c4e <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d1aa      	bne.n	8005b6c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	4413      	add	r3, r2
 8005c28:	4a0b      	ldr	r2, [pc, #44]	; (8005c58 <lfs_alloc+0xf8>)
 8005c2a:	9200      	str	r2, [sp, #0]
 8005c2c:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8005c30:	490a      	ldr	r1, [pc, #40]	; (8005c5c <lfs_alloc+0xfc>)
 8005c32:	480b      	ldr	r0, [pc, #44]	; (8005c60 <lfs_alloc+0x100>)
 8005c34:	f011 fdb6 	bl	80177a4 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8005c38:	f06f 031b 	mvn.w	r3, #27
 8005c3c:	e007      	b.n	8005c4e <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff4c 	bl	8005adc <lfs_fs_rawgc>
 8005c44:	60f8      	str	r0, [r7, #12]
        if(err) {
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d08e      	beq.n	8005b6a <lfs_alloc+0xa>
            return err;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	080195a8 	.word	0x080195a8
 8005c5c:	08019494 	.word	0x08019494
 8005c60:	08019580 	.word	0x08019580

08005c64 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b08f      	sub	sp, #60	; 0x3c
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	333c      	adds	r3, #60	; 0x3c
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fd7a 	bl	8005784 <lfs_gstate_hasmovehere>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80b9 	beq.w	8005e0a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fcb7 	bl	800560c <lfs_tag_id>
 8005c9e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80b2 	beq.w	8005e0a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fcae 	bl	800560c <lfs_tag_id>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f7ff fca9 	bl	800560c <lfs_tag_id>
 8005cba:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	f200 80a4 	bhi.w	8005e0a <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005cc8:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005cca:	e09e      	b.n	8005e0a <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fcb9 	bl	8005646 <lfs_tag_dsize>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8005ce0:	68f9      	ldr	r1, [r7, #12]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	9203      	str	r2, [sp, #12]
 8005cea:	f107 0210 	add.w	r2, r7, #16
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	9201      	str	r2, [sp, #4]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7fe ffef 	bl	8004ce0 <lfs_bd_read>
 8005d02:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <lfs_dir_getslice+0xaa>
            return err;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	e089      	b.n	8005e22 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe ff91 	bl	8004c38 <lfs_frombe32>
 8005d16:	4602      	mov	r2, r0
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4053      	eors	r3, r2
 8005d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fc72 	bl	800560c <lfs_tag_id>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02b      	beq.n	8005d86 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005d2e:	69f8      	ldr	r0, [r7, #28]
 8005d30:	f7ff fc22 	bl	8005578 <lfs_tag_type1>
 8005d34:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d124      	bne.n	8005d86 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8005d3c:	69f8      	ldr	r0, [r7, #28]
 8005d3e:	f7ff fc65 	bl	800560c <lfs_tag_id>
 8005d42:	4603      	mov	r3, r0
 8005d44:	461c      	mov	r4, r3
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fc5d 	bl	800560c <lfs_tag_id>
 8005d52:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005d54:	429c      	cmp	r4, r3
 8005d56:	d816      	bhi.n	8005d86 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <lfs_dir_getslice+0x1c8>)
 8005d60:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8005d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d102      	bne.n	8005d76 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8005d70:	f06f 0301 	mvn.w	r3, #1
 8005d74:	e055      	b.n	8005e22 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005d76:	69f8      	ldr	r0, [r7, #28]
 8005d78:	f7ff fc3b 	bl	80055f2 <lfs_tag_splice>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	029a      	lsls	r2, r3, #10
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	4413      	add	r3, r2
 8005d84:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	405a      	eors	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d138      	bne.n	8005e0a <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8005d98:	69f8      	ldr	r0, [r7, #28]
 8005d9a:	f7ff fbda 	bl	8005552 <lfs_tag_isdelete>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8005da4:	f06f 0301 	mvn.w	r3, #1
 8005da8:	e03b      	b.n	8005e22 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8005daa:	69f8      	ldr	r0, [r7, #28]
 8005dac:	f7ff fc3e 	bl	800562c <lfs_tag_size>
 8005db0:	4603      	mov	r3, r0
 8005db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe feb8 	bl	8004b2a <lfs_min>
 8005dba:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8005dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc6:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8005dc8:	3204      	adds	r2, #4
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dd0:	9102      	str	r1, [sp, #8]
 8005dd2:	9201      	str	r2, [sp, #4]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4602      	mov	r2, r0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fe ff7f 	bl	8004ce0 <lfs_bd_read>
 8005de2:	61b8      	str	r0, [r7, #24]
            if (err) {
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <lfs_dir_getslice+0x18a>
                return err;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	e019      	b.n	8005e22 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8005dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	18d0      	adds	r0, r2, r3
 8005df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f011 f931 	bl	8017064 <memset>

            return tag + gdiff;
 8005e02:	6a3a      	ldr	r2, [r7, #32]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	e00b      	b.n	8005e22 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fc1a 	bl	8005646 <lfs_tag_dsize>
 8005e12:	4603      	mov	r3, r0
 8005e14:	3304      	adds	r3, #4
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	f4bf af57 	bcs.w	8005ccc <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8005e1e:	f06f 0301 	mvn.w	r3, #1
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	372c      	adds	r7, #44	; 0x2c
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd90      	pop	{r4, r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	000ffc00 	.word	0x000ffc00

08005e30 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f7ff fbf4 	bl	800562c <lfs_tag_size>
 8005e44:	4603      	mov	r3, r0
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff ff04 	bl	8005c64 <lfs_dir_getslice>
 8005e5c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08c      	sub	sp, #48	; 0x30
 8005e6a:	af04      	add	r7, sp, #16
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8005e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	441a      	add	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	f240 80c0 	bls.w	800600a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8005e8a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005e8e:	e0c1      	b.n	8006014 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d03f      	beq.n	8005f1a <lfs_dir_getread+0xb4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f113 0f02 	cmn.w	r3, #2
 8005ea2:	d13a      	bne.n	8005f1a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d232      	bcs.n	8005f1a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d324      	bcc.n	8005f08 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	1acb      	subs	r3, r1, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	69b8      	ldr	r0, [r7, #24]
 8005ed0:	f7fe fe2b 	bl	8004b2a <lfs_min>
 8005ed4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ee0:	1acb      	subs	r3, r1, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	69f8      	ldr	r0, [r7, #28]
 8005eea:	f011 f8ad 	bl	8017048 <memcpy>

                data += diff;
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	4413      	add	r3, r2
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005f06:	e080      	b.n	800600a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f7fe fe09 	bl	8004b2a <lfs_min>
 8005f18:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f113 0f02 	cmn.w	r3, #2
 8005f22:	d13a      	bne.n	8005f9a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d232      	bcs.n	8005f9a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d324      	bcc.n	8005f88 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	1acb      	subs	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	69b8      	ldr	r0, [r7, #24]
 8005f50:	f7fe fdeb 	bl	8004b2a <lfs_min>
 8005f54:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f60:	1acb      	subs	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4619      	mov	r1, r3
 8005f68:	69f8      	ldr	r0, [r7, #28]
 8005f6a:	f011 f86d 	bl	8017048 <memcpy>

                data += diff;
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	4413      	add	r3, r2
 8005f74:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005f7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005f86:	e040      	b.n	800600a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	4619      	mov	r1, r3
 8005f92:	69b8      	ldr	r0, [r7, #24]
 8005f94:	f7fe fdc9 	bl	8004b2a <lfs_min>
 8005f98:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f06f 0201 	mvn.w	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005fac:	f7fe fdcd 	bl	8004b4a <lfs_aligndown>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7fe fdd5 	bl	8004b74 <lfs_alignup>
 8005fca:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7fe fda8 	bl	8004b2a <lfs_min>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6889      	ldr	r1, [r1, #8]
 8005fec:	9102      	str	r1, [sp, #8]
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fe33 	bl	8005c64 <lfs_dir_getslice>
 8005ffe:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da01      	bge.n	800600a <lfs_dir_getread+0x1a4>
            return err;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	e004      	b.n	8006014 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af3f 	bne.w	8005e90 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <lfs_dir_traverse_filter+0x1e>
 8006036:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <lfs_dir_traverse_filter+0xac>)
 8006038:	e000      	b.n	800603c <lfs_dir_traverse_filter+0x20>
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800603c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	405a      	eors	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fa7d 	bl	8005552 <lfs_tag_isdelete>
 8006058:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <lfs_dir_traverse_filter+0xac>)
 8006062:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	6819      	ldr	r1, [r3, #0]
 8006068:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <lfs_dir_traverse_filter+0xb4>)
 800606a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800606c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006070:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d104      	bne.n	8006082 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
        return true;
 800607e:	2301      	movs	r3, #1
 8006080:	e01e      	b.n	80060c0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006082:	68b8      	ldr	r0, [r7, #8]
 8006084:	f7ff fa78 	bl	8005578 <lfs_tag_type1>
 8006088:	4603      	mov	r3, r0
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d116      	bne.n	80060be <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8006090:	68b8      	ldr	r0, [r7, #8]
 8006092:	f7ff fabb 	bl	800560c <lfs_tag_id>
 8006096:	4603      	mov	r3, r0
 8006098:	461c      	mov	r4, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fab4 	bl	800560c <lfs_tag_id>
 80060a4:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d809      	bhi.n	80060be <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80060aa:	68b8      	ldr	r0, [r7, #8]
 80060ac:	f7ff faa1 	bl	80055f2 <lfs_tag_splice>
 80060b0:	4603      	mov	r3, r0
 80060b2:	029a      	lsls	r2, r3, #10
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	441a      	add	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	601a      	str	r2, [r3, #0]
    }

    return false;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd90      	pop	{r4, r7, pc}
 80060c8:	7ffffc00 	.word	0x7ffffc00
 80060cc:	700ffc00 	.word	0x700ffc00
 80060d0:	000ffc00 	.word	0x000ffc00

080060d4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b0c1      	sub	sp, #260	; 0x104
 80060d8:	af04      	add	r7, sp, #16
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80060e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80060f2:	6838      	ldr	r0, [r7, #0]
 80060f4:	f7ff faa7 	bl	8005646 <lfs_tag_dsize>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	441a      	add	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	429a      	cmp	r2, r3
 8006104:	d237      	bcs.n	8006176 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8006106:	6838      	ldr	r0, [r7, #0]
 8006108:	f7ff fa9d 	bl	8005646 <lfs_tag_dsize>
 800610c:	4602      	mov	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2204      	movs	r2, #4
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006122:	9202      	str	r2, [sp, #8]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2304      	movs	r3, #4
 800612c:	460a      	mov	r2, r1
 800612e:	2100      	movs	r1, #0
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7fe fdd5 	bl	8004ce0 <lfs_bd_read>
 8006136:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 800613a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <lfs_dir_traverse+0x74>
                    return err;
 8006142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006146:	e3d0      	b.n	80068ea <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8006148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fd74 	bl	8004c38 <lfs_frombe32>
 8006150:	4602      	mov	r2, r0
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	4053      	eors	r3, r2
 8006156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800615a:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8006168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800616c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8006170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	e01b      	b.n	80061ae <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd13      	ble.n	80061a6 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800617e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8006186:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8006190:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006194:	3308      	adds	r3, #8
 8006196:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	3b01      	subs	r3, #1
 80061a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061a4:	e003      	b.n	80061ae <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 80061ac:	e2bd      	b.n	800672a <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 80061ae:	4b86      	ldr	r3, [pc, #536]	; (80063c8 <lfs_dir_traverse+0x2f4>)
 80061b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80061b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ba:	405a      	eors	r2, r3
 80061bc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80061c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061c4:	400b      	ands	r3, r1
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 82a1 	bne.w	8006710 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80061ce:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80061d2:	f7ff fa1b 	bl	800560c <lfs_tag_id>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80ff 	beq.w	80063dc <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80061de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d906      	bls.n	80061f4 <lfs_dir_traverse+0x120>
 80061e6:	4b79      	ldr	r3, [pc, #484]	; (80063cc <lfs_dir_traverse+0x2f8>)
 80061e8:	4a79      	ldr	r2, [pc, #484]	; (80063d0 <lfs_dir_traverse+0x2fc>)
 80061ea:	f240 319f 	movw	r1, #927	; 0x39f
 80061ee:	4879      	ldr	r0, [pc, #484]	; (80063d4 <lfs_dir_traverse+0x300>)
 80061f0:	f010 fdb8 	bl	8016d64 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80061f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80061fa:	4613      	mov	r3, r2
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006206:	4413      	add	r3, r2
 8006208:	3b98      	subs	r3, #152	; 0x98
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006212:	4613      	mov	r3, r2
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800621e:	4413      	add	r3, r2
 8006220:	3b94      	subs	r3, #148	; 0x94
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800622a:	4613      	mov	r3, r2
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006236:	4413      	add	r3, r2
 8006238:	3b90      	subs	r3, #144	; 0x90
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006242:	4613      	mov	r3, r2
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800624e:	4413      	add	r3, r2
 8006250:	3b8c      	subs	r3, #140	; 0x8c
 8006252:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006268:	4413      	add	r3, r2
 800626a:	3b88      	subs	r3, #136	; 0x88
 800626c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006276:	4613      	mov	r3, r2
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006282:	4413      	add	r3, r2
 8006284:	3b84      	subs	r3, #132	; 0x84
 8006286:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006290:	4613      	mov	r3, r2
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800629c:	4413      	add	r3, r2
 800629e:	3b80      	subs	r3, #128	; 0x80
 80062a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80062b6:	4413      	add	r3, r2
 80062b8:	3b7c      	subs	r3, #124	; 0x7c
 80062ba:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80062c4:	4613      	mov	r3, r2
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80062d0:	4413      	add	r3, r2
 80062d2:	3b7a      	subs	r3, #122	; 0x7a
 80062d4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80062ea:	4413      	add	r3, r2
 80062ec:	3b78      	subs	r3, #120	; 0x78
 80062ee:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006304:	4413      	add	r3, r2
 8006306:	3b74      	subs	r3, #116	; 0x74
 8006308:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006312:	4613      	mov	r3, r2
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800631e:	4413      	add	r3, r2
 8006320:	3b70      	subs	r3, #112	; 0x70
 8006322:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800632c:	4613      	mov	r3, r2
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006338:	4413      	add	r3, r2
 800633a:	3b6c      	subs	r3, #108	; 0x6c
 800633c:	6019      	str	r1, [r3, #0]
 800633e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006342:	4613      	mov	r3, r2
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800634e:	4413      	add	r3, r2
 8006350:	3b68      	subs	r3, #104	; 0x68
 8006352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800635c:	4613      	mov	r3, r2
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006368:	4413      	add	r3, r2
 800636a:	3b68      	subs	r3, #104	; 0x68
 800636c:	3304      	adds	r3, #4
 800636e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006376:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800637a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800637e:	3301      	adds	r3, #1
 8006380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <lfs_dir_traverse+0x304>)
 80063a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80063a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ac:	1e5a      	subs	r2, r3, #1
 80063ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063b2:	4613      	mov	r3, r2
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	440b      	add	r3, r1
 80063be:	3304      	adds	r3, #4
 80063c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063c4:	e695      	b.n	80060f2 <lfs_dir_traverse+0x1e>
 80063c6:	bf00      	nop
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	080195ac 	.word	0x080195ac
 80063d0:	0801a030 	.word	0x0801a030
 80063d4:	08019494 	.word	0x08019494
 80063d8:	0800601d 	.word	0x0800601d
                continue;
            }
        }

popped:
 80063dc:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80063de:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80063e2:	f7ff f913 	bl	800560c <lfs_tag_id>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d015      	beq.n	8006418 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80063ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff f90c 	bl	800560c <lfs_tag_id>
 80063f4:	4603      	mov	r3, r0
 80063f6:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80063f8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80063fc:	4293      	cmp	r3, r2
 80063fe:	f200 8189 	bhi.w	8006714 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff f901 	bl	800560c <lfs_tag_id>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8006412:	4293      	cmp	r3, r2
 8006414:	f240 817e 	bls.w	8006714 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8006418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff f8cc 	bl	80055b8 <lfs_tag_type3>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	f43f ae65 	beq.w	80060f2 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8006428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff f8c4 	bl	80055b8 <lfs_tag_type3>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	f240 1301 	movw	r3, #257	; 0x101
 8006438:	429a      	cmp	r2, r3
 800643a:	f040 80ed 	bne.w	8006618 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800643e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006442:	4ab7      	ldr	r2, [pc, #732]	; (8006720 <lfs_dir_traverse+0x64c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	f000 8167 	beq.w	8006718 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800644a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800644e:	4613      	mov	r3, r2
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800645a:	4413      	add	r3, r2
 800645c:	3b98      	subs	r3, #152	; 0x98
 800645e:	4618      	mov	r0, r3
 8006460:	233c      	movs	r3, #60	; 0x3c
 8006462:	461a      	mov	r2, r3
 8006464:	2100      	movs	r1, #0
 8006466:	f010 fdfd 	bl	8017064 <memset>
 800646a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800646e:	4613      	mov	r3, r2
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800647a:	4413      	add	r3, r2
 800647c:	3b98      	subs	r3, #152	; 0x98
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006486:	4613      	mov	r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006492:	4413      	add	r3, r2
 8006494:	3b94      	subs	r3, #148	; 0x94
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800649e:	4613      	mov	r3, r2
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80064aa:	4413      	add	r3, r2
 80064ac:	3b90      	subs	r3, #144	; 0x90
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80064b6:	4613      	mov	r3, r2
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80064c2:	4413      	add	r3, r2
 80064c4:	3b8c      	subs	r3, #140	; 0x8c
 80064c6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80064d0:	4613      	mov	r3, r2
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80064dc:	4413      	add	r3, r2
 80064de:	3b88      	subs	r3, #136	; 0x88
 80064e0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80064ea:	4613      	mov	r3, r2
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80064f6:	4413      	add	r3, r2
 80064f8:	3b84      	subs	r3, #132	; 0x84
 80064fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006510:	4413      	add	r3, r2
 8006512:	3b80      	subs	r3, #128	; 0x80
 8006514:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800651e:	4613      	mov	r3, r2
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800652a:	4413      	add	r3, r2
 800652c:	3b7c      	subs	r3, #124	; 0x7c
 800652e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006538:	4613      	mov	r3, r2
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006544:	4413      	add	r3, r2
 8006546:	3b7a      	subs	r3, #122	; 0x7a
 8006548:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006552:	4613      	mov	r3, r2
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800655e:	4413      	add	r3, r2
 8006560:	3b78      	subs	r3, #120	; 0x78
 8006562:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800656c:	4613      	mov	r3, r2
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006578:	4413      	add	r3, r2
 800657a:	3b74      	subs	r3, #116	; 0x74
 800657c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006586:	4613      	mov	r3, r2
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006592:	4413      	add	r3, r2
 8006594:	3b70      	subs	r3, #112	; 0x70
 8006596:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800659a:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800659c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065a0:	3301      	adds	r3, #1
 80065a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80065a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff f83f 	bl	800562c <lfs_tag_size>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80065b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f828 	bl	800560c <lfs_tag_id>
 80065bc:	4603      	mov	r3, r0
 80065be:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	60bb      	str	r3, [r7, #8]
            off = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80065de:	4b51      	ldr	r3, [pc, #324]	; (8006724 <lfs_dir_traverse+0x650>)
 80065e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80065e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80065e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80065ec:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80065f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80065f4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80065f8:	3301      	adds	r3, #1
 80065fa:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80065fe:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8006602:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800660e:	4413      	add	r3, r2
 8006610:	b29b      	uxth	r3, r3
 8006612:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8006616:	e56c      	b.n	80060f2 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8006618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe ffcc 	bl	80055b8 <lfs_tag_type3>
 8006620:	4603      	mov	r3, r0
 8006622:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006626:	d159      	bne.n	80066dc <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800662e:	e04b      	b.n	80066c8 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006638:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800663c:	4613      	mov	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	4413      	add	r3, r2
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006652:	051c      	lsls	r4, r3, #20
 8006654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe ffd8 	bl	800560c <lfs_tag_id>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8006664:	4413      	add	r3, r2
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	ea44 0103 	orr.w	r1, r4, r3
 800666c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	4413      	add	r3, r2
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8006684:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	461a      	mov	r2, r3
 8006692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006696:	4413      	add	r3, r2
 8006698:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800669a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800669e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80066a2:	4798      	blx	r3
 80066a4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80066a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da02      	bge.n	80066b6 <lfs_dir_traverse+0x5e2>
                    return res;
 80066b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066b4:	e119      	b.n	80068ea <lfs_dir_traverse+0x816>
                }

                if (res) {
 80066b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d12e      	bne.n	800671c <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	3301      	adds	r3, #1
 80066c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe ffae 	bl	800562c <lfs_tag_size>
 80066d0:	4602      	mov	r2, r0
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d3aa      	bcc.n	8006630 <lfs_dir_traverse+0x55c>
 80066da:	e50a      	b.n	80060f2 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80066dc:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80066e0:	029a      	lsls	r2, r3, #10
 80066e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e4:	18d1      	adds	r1, r2, r3
 80066e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ee:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80066f2:	4798      	blx	r3
 80066f4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80066f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da02      	bge.n	8006706 <lfs_dir_traverse+0x632>
                return res;
 8006700:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006704:	e0f1      	b.n	80068ea <lfs_dir_traverse+0x816>
            }

            if (res) {
 8006706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10c      	bne.n	8006728 <lfs_dir_traverse+0x654>
 800670e:	e4f0      	b.n	80060f2 <lfs_dir_traverse+0x1e>
                continue;
 8006710:	bf00      	nop
 8006712:	e4ee      	b.n	80060f2 <lfs_dir_traverse+0x1e>
            continue;
 8006714:	bf00      	nop
 8006716:	e4ec      	b.n	80060f2 <lfs_dir_traverse+0x1e>
                continue;
 8006718:	bf00      	nop
 800671a:	e4ea      	b.n	80060f2 <lfs_dir_traverse+0x1e>
                    break;
 800671c:	bf00      	nop
        {
 800671e:	e4e8      	b.n	80060f2 <lfs_dir_traverse+0x1e>
 8006720:	0800601d 	.word	0x0800601d
 8006724:	600ffc00 	.word	0x600ffc00
                break;
 8006728:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800672a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80d9 	beq.w	80068e6 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8006734:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006746:	4413      	add	r3, r2
 8006748:	3b98      	subs	r3, #152	; 0x98
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800674e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	4613      	mov	r3, r2
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006760:	4413      	add	r3, r2
 8006762:	3b94      	subs	r3, #148	; 0x94
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8006768:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800677a:	4413      	add	r3, r2
 800677c:	3b90      	subs	r3, #144	; 0x90
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8006782:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006786:	1e5a      	subs	r2, r3, #1
 8006788:	4613      	mov	r3, r2
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006794:	4413      	add	r3, r2
 8006796:	3b8c      	subs	r3, #140	; 0x8c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800679e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067a2:	1e5a      	subs	r2, r3, #1
 80067a4:	4613      	mov	r3, r2
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80067b0:	4413      	add	r3, r2
 80067b2:	3b88      	subs	r3, #136	; 0x88
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80067ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	4613      	mov	r3, r2
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80067cc:	4413      	add	r3, r2
 80067ce:	3b84      	subs	r3, #132	; 0x84
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80067d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	4613      	mov	r3, r2
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80067e8:	4413      	add	r3, r2
 80067ea:	3b80      	subs	r3, #128	; 0x80
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80067f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067f6:	1e5a      	subs	r2, r3, #1
 80067f8:	4613      	mov	r3, r2
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006804:	4413      	add	r3, r2
 8006806:	3b7c      	subs	r3, #124	; 0x7c
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800680e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	4613      	mov	r3, r2
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006820:	4413      	add	r3, r2
 8006822:	3b7a      	subs	r3, #122	; 0x7a
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800682a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	4613      	mov	r3, r2
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800683c:	4413      	add	r3, r2
 800683e:	3b78      	subs	r3, #120	; 0x78
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8006846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800684a:	1e5a      	subs	r2, r3, #1
 800684c:	4613      	mov	r3, r2
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006858:	4413      	add	r3, r2
 800685a:	3b74      	subs	r3, #116	; 0x74
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8006862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	4613      	mov	r3, r2
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006874:	4413      	add	r3, r2
 8006876:	3b70      	subs	r3, #112	; 0x70
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800687e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	4613      	mov	r3, r2
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8006890:	4413      	add	r3, r2
 8006892:	3b6c      	subs	r3, #108	; 0x6c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8006898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	4613      	mov	r3, r2
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80068aa:	4413      	add	r3, r2
 80068ac:	3b68      	subs	r3, #104	; 0x68
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80068b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	4613      	mov	r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80068c6:	4413      	add	r3, r2
 80068c8:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80068cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80068d0:	3204      	adds	r2, #4
 80068d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068d6:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80068da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068de:	3b01      	subs	r3, #1
 80068e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80068e4:	e57b      	b.n	80063de <lfs_dir_traverse+0x30a>
    } else {
        return res;
 80068e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	37f4      	adds	r7, #244	; 0xf4
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	bf00      	nop

080068f4 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80068f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f6:	b0a5      	sub	sp, #148	; 0x94
 80068f8:	af04      	add	r7, sp, #16
 80068fa:	6178      	str	r0, [r7, #20]
 80068fc:	6139      	str	r1, [r7, #16]
 80068fe:	60fa      	str	r2, [r7, #12]
 8006900:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	429a      	cmp	r2, r3
 800691a:	d206      	bcs.n	800692a <lfs_dir_fetchmatch+0x36>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3304      	adds	r3, #4
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800692a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800692e:	e39d      	b.n	800706c <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8006930:	2300      	movs	r3, #0
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
 8006934:	2300      	movs	r3, #0
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800693c:	2300      	movs	r3, #0
 800693e:	677b      	str	r3, [r7, #116]	; 0x74
 8006940:	e056      	b.n	80069f0 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 8006942:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800694c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800694e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006952:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006958:	2104      	movs	r1, #4
 800695a:	9103      	str	r1, [sp, #12]
 800695c:	9202      	str	r2, [sp, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	9201      	str	r2, [sp, #4]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2304      	movs	r3, #4
 8006966:	4602      	mov	r2, r0
 8006968:	2100      	movs	r1, #0
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f7fe f9b8 	bl	8004ce0 <lfs_bd_read>
 8006970:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8006972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800697a:	4413      	add	r3, r2
 800697c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe f942 	bl	8004c0a <lfs_fromle32>
 8006986:	4602      	mov	r2, r0
 8006988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006990:	440b      	add	r3, r1
 8006992:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <lfs_dir_fetchmatch+0xb4>
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069a2:	d001      	beq.n	80069a8 <lfs_dir_fetchmatch+0xb4>
            return err;
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	e361      	b.n	800706c <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 80069a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069ae:	d01c      	beq.n	80069ea <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80069b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80069b8:	4413      	add	r3, r2
 80069ba:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80069be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c0:	3301      	adds	r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	bfb8      	it	lt
 80069ca:	425b      	neglt	r3, r3
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80069d2:	440b      	add	r3, r1
 80069d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fe f907 	bl	8004bee <lfs_scmp>
 80069e0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dd01      	ble.n	80069ea <lfs_dir_fetchmatch+0xf6>
            r = i;
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80069ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ec:	3301      	adds	r3, #1
 80069ee:	677b      	str	r3, [r7, #116]	; 0x74
 80069f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	dda5      	ble.n	8006942 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80069f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	bfb8      	it	lt
 8006a00:	425b      	neglt	r3, r3
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8006a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a10:	3301      	adds	r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	bfb8      	it	lt
 8006a1a:	425b      	neglt	r3, r3
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8006a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	bfb8      	it	lt
 8006a32:	425b      	neglt	r3, r3
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2200      	movs	r2, #0
 8006a48:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8006a4e:	e2f9      	b.n	8007044 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006a60:	4aa8      	ldr	r2, [pc, #672]	; (8006d04 <lfs_dir_fetchmatch+0x410>)
 8006a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a6a:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8006a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a76:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe f8c9 	bl	8004c20 <lfs_tole32>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	3308      	adds	r3, #8
 8006a98:	2204      	movs	r2, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	f004 f98a 	bl	800adb8 <lfs_crc>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe f8ac 	bl	8004c0a <lfs_fromle32>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8006ab8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006aba:	f7fe fdc4 	bl	8005646 <lfs_tag_dsize>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	4413      	add	r3, r2
 8006ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8006ac6:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8006acc:	69d8      	ldr	r0, [r3, #28]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	9203      	str	r2, [sp, #12]
 8006ad6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ade:	9201      	str	r2, [sp, #4]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6978      	ldr	r0, [r7, #20]
 8006aea:	f7fe f8f9 	bl	8004ce0 <lfs_bd_read>
 8006aee:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8006af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8006af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006afc:	f000 81d5 	beq.w	8006eaa <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8006b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b02:	e2b3      	b.n	800706c <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f004 f953 	bl	800adb8 <lfs_crc>
 8006b12:	4603      	mov	r3, r0
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe f88d 	bl	8004c38 <lfs_frombe32>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b22:	4053      	eors	r3, r2
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe fd04 	bl	8005536 <lfs_tag_isvalid>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f083 0301 	eor.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8006b3a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006b3c:	f7fe fd2c 	bl	8005598 <lfs_tag_type2>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8006b50:	e1ba      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fd76 	bl	8005646 <lfs_tag_dsize>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5e:	441a      	add	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f200 81a1 	bhi.w	8006eae <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fd10 	bl	8005598 <lfs_tag_type2>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006b7e:	d15e      	bne.n	8006c3e <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8006b80:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006b86:	69dc      	ldr	r4, [r3, #28]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b8e:	3204      	adds	r2, #4
 8006b90:	2104      	movs	r1, #4
 8006b92:	9103      	str	r1, [sp, #12]
 8006b94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006b98:	9102      	str	r1, [sp, #8]
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	6978      	ldr	r0, [r7, #20]
 8006ba6:	f7fe f89b 	bl	8004ce0 <lfs_bd_read>
 8006baa:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8006bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d006      	beq.n	8006bc0 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8006bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006bb8:	f000 817b 	beq.w	8006eb2 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 8006bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8006bbe:	e255      	b.n	800706c <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f821 	bl	8004c0a <lfs_fromle32>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f040 8170 	bne.w	8006eb6 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fcfd 	bl	80055d8 <lfs_tag_chunk>
 8006bde:	4603      	mov	r3, r0
 8006be0:	07db      	lsls	r3, r3, #31
 8006be2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006be4:	4053      	eors	r3, r2
 8006be6:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f004 f8e0 	bl	800adb8 <lfs_crc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8006bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c00:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fd1e 	bl	8005646 <lfs_tag_dsize>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	441a      	add	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c18:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006c20:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8006c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8006c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8006c34:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3c:	e73c      	b.n	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8006c3e:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	681c      	ldr	r4, [r3, #0]
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fcf7 	bl	8005646 <lfs_tag_dsize>
 8006c58:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c60:	9203      	str	r2, [sp, #12]
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	9501      	str	r5, [sp, #4]
 8006c66:	9400      	str	r4, [sp, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7fe f9d3 	bl	800501a <lfs_bd_crc>
 8006c74:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8006c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8006c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c82:	f000 811a 	beq.w	8006eba <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8006c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c88:	e1f0      	b.n	800706c <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fc73 	bl	8005578 <lfs_tag_type1>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d113      	bne.n	8006cc0 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fcb6 	bl	800560c <lfs_tag_id>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	f200 80b5 	bhi.w	8006e18 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe fcab 	bl	800560c <lfs_tag_id>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cbe:	e0ab      	b.n	8006e18 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fc58 	bl	8005578 <lfs_tag_type1>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cce:	d139      	bne.n	8006d44 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fc8d 	bl	80055f2 <lfs_tag_splice>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8006ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <lfs_dir_fetchmatch+0x414>)
 8006cea:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8006cec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006cf0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d108      	bne.n	8006d0c <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 8006cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d00:	663b      	str	r3, [r7, #96]	; 0x60
 8006d02:	e089      	b.n	8006e18 <lfs_dir_fetchmatch+0x524>
 8006d04:	080195ec 	.word	0x080195ec
 8006d08:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8006d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	f000 8081 	beq.w	8006e18 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fc77 	bl	800560c <lfs_tag_id>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461c      	mov	r4, r3
 8006d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe fc71 	bl	800560c <lfs_tag_id>
 8006d2a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d873      	bhi.n	8006e18 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fc5d 	bl	80055f2 <lfs_tag_splice>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	029a      	lsls	r2, r3, #10
 8006d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d3e:	4413      	add	r3, r2
 8006d40:	663b      	str	r3, [r7, #96]	; 0x60
 8006d42:	e069      	b.n	8006e18 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fc16 	bl	8005578 <lfs_tag_type1>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d52:	d132      	bne.n	8006dba <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fc3e 	bl	80055d8 <lfs_tag_chunk>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8006d6e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006d74:	69dc      	ldr	r4, [r3, #28]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d7c:	3204      	adds	r2, #4
 8006d7e:	2108      	movs	r1, #8
 8006d80:	9103      	str	r1, [sp, #12]
 8006d82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006d86:	9102      	str	r1, [sp, #8]
 8006d88:	9201      	str	r2, [sp, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	4602      	mov	r2, r0
 8006d90:	2100      	movs	r1, #0
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7fd ffa4 	bl	8004ce0 <lfs_bd_read>
 8006d98:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8006d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8006da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006da6:	f000 808a 	beq.w	8006ebe <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8006daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dac:	e15e      	b.n	800706c <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 8006dae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fb8b 	bl	80054ce <lfs_pair_fromle32>
 8006db8:	e02e      	b.n	8006e18 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fbfb 	bl	80055b8 <lfs_tag_type3>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d124      	bne.n	8006e18 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 8006dce:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006dd4:	69dc      	ldr	r4, [r3, #28]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ddc:	3204      	adds	r2, #4
 8006dde:	2108      	movs	r1, #8
 8006de0:	9103      	str	r1, [sp, #12]
 8006de2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006de6:	9102      	str	r1, [sp, #8]
 8006de8:	9201      	str	r2, [sp, #4]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4623      	mov	r3, r4
 8006dee:	4602      	mov	r2, r0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6978      	ldr	r0, [r7, #20]
 8006df4:	f7fd ff74 	bl	8004ce0 <lfs_bd_read>
 8006df8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8006dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8006e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e02:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006e06:	d05c      	beq.n	8006ec2 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8006e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fd19 	bl	8005844 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8006e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e1e:	405a      	eors	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f47f ae47 	bne.w	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006e30:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8006e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e34:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	f107 0220 	add.w	r2, r7, #32
 8006e3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e40:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006e44:	4798      	blx	r3
 8006e46:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8006e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da05      	bge.n	8006e5a <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e50:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006e54:	d037      	beq.n	8006ec6 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8006e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8006e58:	e108      	b.n	800706c <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	663b      	str	r3, [r7, #96]	; 0x60
 8006e64:	e628      	b.n	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8006e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e6a:	405a      	eors	r2, r3
 8006e6c:	4b81      	ldr	r3, [pc, #516]	; (8007074 <lfs_dir_fetchmatch+0x780>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8006e74:	f04f 33ff 	mov.w	r3, #4294967295
 8006e78:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7a:	e61d      	b.n	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 8006e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	f47f ae1a 	bne.w	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe fbc0 	bl	800560c <lfs_tag_id>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461c      	mov	r4, r3
 8006e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fbba 	bl	800560c <lfs_tag_id>
 8006e98:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	f63f ae0c 	bhi.w	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ea8:	e606      	b.n	8006ab8 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8006eaa:	bf00      	nop
 8006eac:	e00c      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                break;
 8006eae:	bf00      	nop
 8006eb0:	e00a      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8006eb2:	bf00      	nop
 8006eb4:	e008      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8006eb6:	bf00      	nop
 8006eb8:	e006      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8006eba:	bf00      	nop
 8006ebc:	e004      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8006ebe:	bf00      	nop
 8006ec0:	e002      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8006ec6:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d000      	beq.n	8006ed2 <lfs_dir_fetchmatch+0x5de>
 8006ed0:	e016      	b.n	8006f00 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fa73 	bl	80053c0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8006eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006edc:	3301      	adds	r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	bfb8      	it	lt
 8006ee6:	425b      	neglt	r3, r3
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006eee:	4413      	add	r3, r2
 8006ef0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8006ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006efa:	3301      	adds	r3, #1
 8006efc:	673b      	str	r3, [r7, #112]	; 0x70
 8006efe:	e0a1      	b.n	8007044 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2200      	movs	r2, #0
 8006f04:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8006f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d03a      	beq.n	8006f84 <lfs_dir_fetchmatch+0x690>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f16:	6992      	ldr	r2, [r2, #24]
 8006f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f1c:	fb02 f201 	mul.w	r2, r2, r1
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d12e      	bne.n	8006f84 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8006f26:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d02a      	beq.n	8006f84 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f32:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8006f34:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8006f3a:	69dd      	ldr	r5, [r3, #28]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	68d2      	ldr	r2, [r2, #12]
 8006f44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f46:	f107 001c 	add.w	r0, r7, #28
 8006f4a:	9003      	str	r0, [sp, #12]
 8006f4c:	9102      	str	r1, [sp, #8]
 8006f4e:	9201      	str	r2, [sp, #4]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	462b      	mov	r3, r5
 8006f54:	4622      	mov	r2, r4
 8006f56:	2100      	movs	r1, #0
 8006f58:	6978      	ldr	r0, [r7, #20]
 8006f5a:	f7fe f85e 	bl	800501a <lfs_bd_crc>
 8006f5e:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <lfs_dir_fetchmatch+0x67e>
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006f6c:	d001      	beq.n	8006f72 <lfs_dir_fetchmatch+0x67e>
                    return err;
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f70:	e07c      	b.n	800706c <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8006f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	333c      	adds	r3, #60	; 0x3c
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fbf9 	bl	8005784 <lfs_gstate_hasmovehere>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d028      	beq.n	8006fea <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fb35 	bl	800560c <lfs_tag_id>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fb2f 	bl	800560c <lfs_tag_id>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d104      	bne.n	8006fbe <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8006fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fbc:	e015      	b.n	8006fea <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8006fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d011      	beq.n	8006fea <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fb1e 	bl	800560c <lfs_tag_id>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461c      	mov	r4, r3
 8006fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fb18 	bl	800560c <lfs_tag_id>
 8006fdc:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8006fde:	429c      	cmp	r4, r3
 8006fe0:	d203      	bcs.n	8006fea <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8006fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fe4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8006fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d010      	beq.n	8007014 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fb09 	bl	800560c <lfs_tag_id>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	8a9b      	ldrh	r3, [r3, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fd fd90 	bl	8004b2a <lfs_min>
 800700a:	4603      	mov	r3, r0
 800700c:	b29a      	uxth	r2, r3
 800700e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007012:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8007014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fa8d 	bl	8005536 <lfs_tag_isvalid>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8007022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007024:	e022      	b.n	800706c <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8007026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe faef 	bl	800560c <lfs_tag_id>
 800702e:	4603      	mov	r3, r0
 8007030:	461a      	mov	r2, r3
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	8a9b      	ldrh	r3, [r3, #20]
 8007036:	429a      	cmp	r2, r3
 8007038:	d202      	bcs.n	8007040 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 800703a:	f06f 0301 	mvn.w	r3, #1
 800703e:	e015      	b.n	800706c <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8007040:	2300      	movs	r3, #0
 8007042:	e013      	b.n	800706c <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8007044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007046:	2b01      	cmp	r3, #1
 8007048:	f77f ad02 	ble.w	8006a50 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4908      	ldr	r1, [pc, #32]	; (8007078 <lfs_dir_fetchmatch+0x784>)
 8007056:	9101      	str	r1, [sp, #4]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4613      	mov	r3, r2
 800705c:	f240 5242 	movw	r2, #1346	; 0x542
 8007060:	4906      	ldr	r1, [pc, #24]	; (800707c <lfs_dir_fetchmatch+0x788>)
 8007062:	4807      	ldr	r0, [pc, #28]	; (8007080 <lfs_dir_fetchmatch+0x78c>)
 8007064:	f010 fb9e 	bl	80177a4 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8007068:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800706c:	4618      	mov	r0, r3
 800706e:	3784      	adds	r7, #132	; 0x84
 8007070:	46bd      	mov	sp, r7
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007074:	7ffffc00 	.word	0x7ffffc00
 8007078:	080195a8 	.word	0x080195a8
 800707c:	08019494 	.word	0x08019494
 8007080:	080195b4 	.word	0x080195b4

08007084 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8007090:	2300      	movs	r3, #0
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	2300      	movs	r3, #0
 8007096:	9302      	str	r3, [sp, #8]
 8007098:	2300      	movs	r3, #0
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fc22 	bl	80068f4 <lfs_dir_fetchmatch>
 80070b0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80070c8:	f107 0310 	add.w	r3, r7, #16
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <lfs_dir_getgstate+0x5c>)
 80070d0:	4a12      	ldr	r2, [pc, #72]	; (800711c <lfs_dir_getgstate+0x60>)
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7fe feab 	bl	8005e30 <lfs_dir_get>
 80070da:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da05      	bge.n	80070ee <lfs_dir_getgstate+0x32>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f113 0f02 	cmn.w	r3, #2
 80070e8:	d001      	beq.n	80070ee <lfs_dir_getgstate+0x32>
        return res;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	e00f      	b.n	800710e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f113 0f02 	cmn.w	r3, #2
 80070f4:	d00a      	beq.n	800710c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fb62 	bl	80057c4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fe fab1 	bl	800566e <lfs_gstate_xor>
    }

    return 0;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	7ff0000c 	.word	0x7ff0000c
 800711c:	7ff00000 	.word	0x7ff00000

08007120 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007120:	b590      	push	{r4, r7, lr}
 8007122:	b08f      	sub	sp, #60	; 0x3c
 8007124:	af04      	add	r7, sp, #16
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	689c      	ldr	r4, [r3, #8]
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	f7fe fa74 	bl	800562c <lfs_tag_size>
 8007144:	4603      	mov	r3, r0
 8007146:	4619      	mov	r1, r3
 8007148:	4620      	mov	r0, r4
 800714a:	f7fd fcee 	bl	8004b2a <lfs_min>
 800714e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8007150:	6a3c      	ldr	r4, [r7, #32]
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800715c:	6849      	ldr	r1, [r1, #4]
 800715e:	69b8      	ldr	r0, [r7, #24]
 8007160:	9003      	str	r0, [sp, #12]
 8007162:	9102      	str	r1, [sp, #8]
 8007164:	9201      	str	r2, [sp, #4]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	4622      	mov	r2, r4
 800716c:	2100      	movs	r1, #0
 800716e:	6a38      	ldr	r0, [r7, #32]
 8007170:	f7fd ff02 	bl	8004f78 <lfs_bd_cmp>
 8007174:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <lfs_dir_find_match+0x60>
        return res;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	e014      	b.n	80071aa <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	689c      	ldr	r4, [r3, #8]
 8007184:	68b8      	ldr	r0, [r7, #8]
 8007186:	f7fe fa51 	bl	800562c <lfs_tag_size>
 800718a:	4603      	mov	r3, r0
 800718c:	429c      	cmp	r4, r3
 800718e:	d00b      	beq.n	80071a8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	689c      	ldr	r4, [r3, #8]
 8007194:	68b8      	ldr	r0, [r7, #8]
 8007196:	f7fe fa49 	bl	800562c <lfs_tag_size>
 800719a:	4603      	mov	r3, r0
 800719c:	429c      	cmp	r4, r3
 800719e:	d201      	bcs.n	80071a4 <lfs_dir_find_match+0x84>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e002      	b.n	80071aa <lfs_dir_find_match+0x8a>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e000      	b.n	80071aa <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	372c      	adds	r7, #44	; 0x2c
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd90      	pop	{r4, r7, pc}
	...

080071b4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b093      	sub	sp, #76	; 0x4c
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80071d4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80071d6:	4b6e      	ldr	r3, [pc, #440]	; (8007390 <lfs_dir_find+0x1dc>)
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80071ea:	496a      	ldr	r1, [pc, #424]	; (8007394 <lfs_dir_find+0x1e0>)
 80071ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071ee:	f010 fc62 	bl	8017ab6 <strspn>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f6:	4413      	add	r3, r2
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80071fa:	4966      	ldr	r1, [pc, #408]	; (8007394 <lfs_dir_find+0x1e0>)
 80071fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071fe:	f010 fc49 	bl	8017a94 <strcspn>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <lfs_dir_find+0x62>
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	4b62      	ldr	r3, [pc, #392]	; (8007398 <lfs_dir_find+0x1e4>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d00a      	beq.n	800722c <lfs_dir_find+0x78>
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b02      	cmp	r3, #2
 800721a:	d10c      	bne.n	8007236 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800721c:	2202      	movs	r2, #2
 800721e:	495f      	ldr	r1, [pc, #380]	; (800739c <lfs_dir_find+0x1e8>)
 8007220:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007222:	f00f ff03 	bl	801702c <memcmp>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <lfs_dir_find+0x82>
            name += namelen;
 800722c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	4413      	add	r3, r2
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8007234:	e7d9      	b.n	80071ea <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8007236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	4413      	add	r3, r2
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800723e:	2301      	movs	r3, #1
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8007242:	4954      	ldr	r1, [pc, #336]	; (8007394 <lfs_dir_find+0x1e0>)
 8007244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007246:	f010 fc36 	bl	8017ab6 <strspn>
 800724a:	4602      	mov	r2, r0
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	4413      	add	r3, r2
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8007252:	4950      	ldr	r1, [pc, #320]	; (8007394 <lfs_dir_find+0x1e0>)
 8007254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007256:	f010 fc1d 	bl	8017a94 <strcspn>
 800725a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01d      	beq.n	800729e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d112      	bne.n	800728e <lfs_dir_find+0xda>
 8007268:	2202      	movs	r2, #2
 800726a:	494c      	ldr	r1, [pc, #304]	; (800739c <lfs_dir_find+0x1e8>)
 800726c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800726e:	f00f fedd 	bl	801702c <memcmp>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <lfs_dir_find+0xda>
                depth -= 1;
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	3b01      	subs	r3, #1
 800727c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	2b00      	cmp	r3, #0
 8007282:	d107      	bne.n	8007294 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8007284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	4413      	add	r3, r2
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800728c:	e7ad      	b.n	80071ea <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	3301      	adds	r3, #1
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8007294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	4413      	add	r3, r2
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800729c:	e7d1      	b.n	8007242 <lfs_dir_find+0x8e>
                break;
 800729e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <lfs_dir_find+0xf8>
            return tag;
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	e06c      	b.n	8007386 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe f97f 	bl	80055b8 <lfs_tag_type3>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d002      	beq.n	80072c6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80072c0:	f06f 0313 	mvn.w	r3, #19
 80072c4:	e05f      	b.n	8007386 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe f99f 	bl	800560c <lfs_tag_id>
 80072ce:	4603      	mov	r3, r0
 80072d0:	461a      	mov	r2, r3
 80072d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d01c      	beq.n	8007314 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe f995 	bl	800560c <lfs_tag_id>
 80072e2:	4603      	mov	r3, r0
 80072e4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80072e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ea:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80072f2:	9200      	str	r2, [sp, #0]
 80072f4:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <lfs_dir_find+0x1ec>)
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7fe fd99 	bl	8005e30 <lfs_dir_get>
 80072fe:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	da01      	bge.n	800730a <lfs_dir_find+0x156>
                return res;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	e03d      	b.n	8007386 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe f8dd 	bl	80054ce <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800731a:	212f      	movs	r1, #47	; 0x2f
 800731c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800731e:	f010 fbac 	bl	8017a7a <strchr>
 8007322:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <lfs_dir_find+0x178>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	e000      	b.n	800732e <lfs_dir_find+0x17a>
 800732c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	613a      	str	r2, [r7, #16]
 8007332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007334:	617a      	str	r2, [r7, #20]
 8007336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007338:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800733a:	f107 0210 	add.w	r2, r7, #16
 800733e:	9203      	str	r2, [sp, #12]
 8007340:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <lfs_dir_find+0x1f0>)
 8007342:	9202      	str	r2, [sp, #8]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800734e:	4622      	mov	r2, r4
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff face 	bl	80068f4 <lfs_dir_fetchmatch>
 8007358:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2b00      	cmp	r3, #0
 800735e:	da01      	bge.n	8007364 <lfs_dir_find+0x1b0>
                return tag;
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	e010      	b.n	8007386 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800736a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	4413      	add	r3, r2
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8007372:	e73a      	b.n	80071ea <lfs_dir_find+0x36>
            if (!dir->split) {
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	7ddb      	ldrb	r3, [r3, #23]
 8007378:	f083 0301 	eor.w	r3, r3, #1
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0c8      	beq.n	8007314 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8007382:	f06f 0301 	mvn.w	r3, #1
    }
}
 8007386:	4618      	mov	r0, r3
 8007388:	373c      	adds	r7, #60	; 0x3c
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}
 800738e:	bf00      	nop
 8007390:	002ffc00 	.word	0x002ffc00
 8007394:	080195f4 	.word	0x080195f4
 8007398:	080195f8 	.word	0x080195f8
 800739c:	080195fc 	.word	0x080195fc
 80073a0:	700ffc00 	.word	0x700ffc00
 80073a4:	08007121 	.word	0x08007121

080073a8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b08b      	sub	sp, #44	; 0x2c
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f103 0010 	add.w	r0, r3, #16
 80073bc:	68fc      	ldr	r4, [r7, #12]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	6852      	ldr	r2, [r2, #4]
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	9103      	str	r1, [sp, #12]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	9102      	str	r1, [sp, #8]
 80073ce:	9201      	str	r2, [sp, #4]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	2300      	movs	r3, #0
 80073d4:	4622      	mov	r2, r4
 80073d6:	4601      	mov	r1, r0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7fd ff13 	bl	8005204 <lfs_bd_prog>
 80073de:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <lfs_dir_commitprog+0x42>
        return err;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	e010      	b.n	800740c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f003 fce0 	bl	800adb8 <lfs_crc>
 80073f8:	4602      	mov	r2, r0
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	441a      	add	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	605a      	str	r2, [r3, #4]
    return 0;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b08f      	sub	sp, #60	; 0x3c
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fe f90f 	bl	8005646 <lfs_tag_dsize>
 8007428:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	441a      	add	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	429a      	cmp	r2, r3
 8007438:	d902      	bls.n	8007440 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800743a:	f06f 031b 	mvn.w	r3, #27
 800743e:	e065      	b.n	800750c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4053      	eors	r3, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd fbff 	bl	8004c50 <lfs_tobe32>
 8007452:	4603      	mov	r3, r0
 8007454:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8007456:	f107 0214 	add.w	r2, r7, #20
 800745a:	2304      	movs	r3, #4
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7ff ffa2 	bl	80073a8 <lfs_dir_commitprog>
 8007464:	61f8      	str	r0, [r7, #28]
    if (err) {
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <lfs_dir_commitattr+0x5c>
        return err;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	e04d      	b.n	800750c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	db0c      	blt.n	8007490 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	3b04      	subs	r3, #4
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff ff92 	bl	80073a8 <lfs_dir_commitprog>
 8007484:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d039      	beq.n	8007500 <lfs_dir_commitattr+0xec>
            return err;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	e03d      	b.n	800750c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8007494:	2300      	movs	r3, #0
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	e02d      	b.n	80074f6 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800749a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80074a2:	1f1c      	subs	r4, r3, #4
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80074ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ae:	440a      	add	r2, r1
 80074b0:	2101      	movs	r1, #1
 80074b2:	9103      	str	r1, [sp, #12]
 80074b4:	f107 0113 	add.w	r1, r7, #19
 80074b8:	9102      	str	r1, [sp, #8]
 80074ba:	9201      	str	r2, [sp, #4]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4623      	mov	r3, r4
 80074c0:	4602      	mov	r2, r0
 80074c2:	2100      	movs	r1, #0
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7fd fc0b 	bl	8004ce0 <lfs_bd_read>
 80074ca:	61f8      	str	r0, [r7, #28]
            if (err) {
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <lfs_dir_commitattr+0xc2>
                return err;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	e01a      	b.n	800750c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80074d6:	f107 0213 	add.w	r2, r7, #19
 80074da:	2301      	movs	r3, #1
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff62 	bl	80073a8 <lfs_dir_commitprog>
 80074e4:	61f8      	str	r0, [r7, #28]
            if (err) {
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <lfs_dir_commitattr+0xdc>
                return err;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	e00d      	b.n	800750c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	3301      	adds	r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3b04      	subs	r3, #4
 80074fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3cc      	bcc.n	800749a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	609a      	str	r2, [r3, #8]
    return 0;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	372c      	adds	r7, #44	; 0x2c
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b097      	sub	sp, #92	; 0x5c
 8007518:	af04      	add	r7, sp, #16
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8007522:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fd fafb 	bl	8004b2a <lfs_min>
 8007534:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7fd fb18 	bl	8004b74 <lfs_alignup>
 8007544:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800754e:	e0fe      	b.n	800774e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	3b04      	subs	r3, #4
 800755a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd fae3 	bl	8004b2a <lfs_min>
 8007564:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800756c:	3304      	adds	r3, #4
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8007570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	429a      	cmp	r2, r3
 8007576:	d206      	bcs.n	8007586 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	3b14      	subs	r3, #20
 800757c:	4619      	mov	r1, r3
 800757e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007580:	f7fd fad3 	bl	8004b2a <lfs_min>
 8007584:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8007586:	23ff      	movs	r3, #255	; 0xff
 8007588:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800758a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	429a      	cmp	r2, r3
 8007590:	d35f      	bcc.n	8007652 <lfs_dir_commitcrc+0x13e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d855      	bhi.n	8007652 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80075a6:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80075ac:	6998      	ldr	r0, [r3, #24]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2201      	movs	r2, #1
 80075b4:	9203      	str	r2, [sp, #12]
 80075b6:	f107 021b 	add.w	r2, r7, #27
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4603      	mov	r3, r0
 80075c4:	460a      	mov	r2, r1
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7fd fb89 	bl	8004ce0 <lfs_bd_read>
 80075ce:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <lfs_dir_commitcrc+0xce>
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80075dc:	d001      	beq.n	80075e2 <lfs_dir_commitcrc+0xce>
                return err;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	e101      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e6:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80075f0:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 80075f6:	699c      	ldr	r4, [r3, #24]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	f107 0108 	add.w	r1, r7, #8
 8007602:	3104      	adds	r1, #4
 8007604:	9103      	str	r1, [sp, #12]
 8007606:	9202      	str	r2, [sp, #8]
 8007608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800760a:	9201      	str	r2, [sp, #4]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4623      	mov	r3, r4
 8007610:	4602      	mov	r2, r0
 8007612:	2100      	movs	r1, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fd fd00 	bl	800501a <lfs_bd_crc>
 800761a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <lfs_dir_commitcrc+0x11a>
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007628:	d001      	beq.n	800762e <lfs_dir_commitcrc+0x11a>
                    return err;
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	e0db      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe f91e 	bl	8005874 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4a6c      	ldr	r2, [pc, #432]	; (80077f0 <lfs_dir_commitcrc+0x2dc>)
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fee7 	bl	8007414 <lfs_dir_commitattr>
 8007646:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <lfs_dir_commitcrc+0x13e>
                    return err;
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	e0c9      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8007652:	7efb      	ldrb	r3, [r7, #27]
 8007654:	43db      	mvns	r3, r3
 8007656:	b2db      	uxtb	r3, r3
 8007658:	09db      	lsrs	r3, r3, #7
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	051a      	lsls	r2, r3, #20
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007668:	1acb      	subs	r3, r1, r3
 800766a:	3b04      	subs	r3, #4
 800766c:	4313      	orrs	r3, r2
 800766e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8007672:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	4053      	eors	r3, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fae5 	bl	8004c50 <lfs_tobe32>
 8007686:	4603      	mov	r3, r0
 8007688:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f107 0110 	add.w	r1, r7, #16
 8007692:	2204      	movs	r2, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f003 fb8f 	bl	800adb8 <lfs_crc>
 800769a:	4602      	mov	r2, r0
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fd fabb 	bl	8004c20 <lfs_tole32>
 80076aa:	4603      	mov	r3, r0
 80076ac:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f103 0010 	add.w	r0, r3, #16
 80076b4:	687c      	ldr	r4, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	2108      	movs	r1, #8
 80076c0:	9103      	str	r1, [sp, #12]
 80076c2:	f107 0110 	add.w	r1, r7, #16
 80076c6:	9102      	str	r1, [sp, #8]
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2300      	movs	r3, #0
 80076ce:	4622      	mov	r2, r4
 80076d0:	4601      	mov	r1, r0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fd fd96 	bl	8005204 <lfs_bd_prog>
 80076d8:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <lfs_dir_commitcrc+0x1d0>
            return err;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	e080      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80076e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076fc:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80076fe:	7efb      	ldrb	r3, [r7, #27]
 8007700:	43db      	mvns	r3, r3
 8007702:	061b      	lsls	r3, r3, #24
 8007704:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	405a      	eors	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	f04f 32ff 	mov.w	r2, #4294967295
 8007716:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8007718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	429a      	cmp	r2, r3
 800771e:	d208      	bcs.n	8007732 <lfs_dir_commitcrc+0x21e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	4413      	add	r3, r2
 800772c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800772e:	429a      	cmp	r2, r3
 8007730:	d30d      	bcc.n	800774e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f103 0110 	add.w	r1, r3, #16
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	2300      	movs	r3, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7fd fd2d 	bl	800519c <lfs_bd_sync>
 8007742:	6238      	str	r0, [r7, #32]
            if (err) {
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <lfs_dir_commitcrc+0x23a>
                return err;
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	e04b      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007754:	429a      	cmp	r2, r3
 8007756:	f63f aefb 	bhi.w	8007550 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776a:	1d1c      	adds	r4, r3, #4
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007774:	1a8a      	subs	r2, r1, r2
 8007776:	f107 011c 	add.w	r1, r7, #28
 800777a:	9103      	str	r1, [sp, #12]
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4623      	mov	r3, r4
 8007786:	4602      	mov	r2, r0
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fd fc45 	bl	800501a <lfs_bd_crc>
 8007790:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <lfs_dir_commitcrc+0x288>
        return err;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	e024      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d002      	beq.n	80077aa <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80077a4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80077a8:	e01d      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f107 021c 	add.w	r2, r7, #28
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	2204      	movs	r2, #4
 80077b8:	9202      	str	r2, [sp, #8]
 80077ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077bc:	9201      	str	r2, [sp, #4]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2304      	movs	r3, #4
 80077c2:	460a      	mov	r2, r1
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fd fc27 	bl	800501a <lfs_bd_crc>
 80077cc:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <lfs_dir_commitcrc+0x2c4>
        return err;
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	e006      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80077de:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80077e2:	e000      	b.n	80077e6 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	374c      	adds	r7, #76	; 0x4c
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd90      	pop	{r4, r7, pc}
 80077ee:	bf00      	nop
 80077f0:	5ffffc08 	.word	0x5ffffc08

080077f4 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e016      	b.n	8007832 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	3301      	adds	r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	bfb8      	it	lt
 8007810:	425b      	neglt	r3, r3
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	4413      	add	r3, r2
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fe f9a0 	bl	8005b60 <lfs_alloc>
 8007820:	60f8      	str	r0, [r7, #12]
        if (err) {
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <lfs_dir_alloc+0x38>
            return err;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e058      	b.n	80078de <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	3301      	adds	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b01      	cmp	r3, #1
 8007836:	dde5      	ble.n	8007804 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8007848:	2004      	movs	r0, #4
 800784a:	9003      	str	r0, [sp, #12]
 800784c:	9202      	str	r2, [sp, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	2304      	movs	r3, #4
 8007856:	460a      	mov	r2, r1
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fd fa40 	bl	8004ce0 <lfs_bd_read>
 8007860:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd f9cf 	bl	8004c0a <lfs_fromle32>
 800786c:	4602      	mov	r2, r0
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <lfs_dir_alloc+0x90>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800787e:	d001      	beq.n	8007884 <lfs_dir_alloc+0x90>
        return err;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	e02c      	b.n	80078de <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	dd0e      	ble.n	80078ac <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	3301      	adds	r3, #1
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fd f967 	bl	8004b74 <lfs_alignup>
 80078a6:	4602      	mov	r2, r0
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2204      	movs	r2, #4
 80078b0:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2200      	movs	r2, #0
 80078be:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2200      	movs	r2, #0
 80078da:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b092      	sub	sp, #72	; 0x48
 80078ea:	af04      	add	r7, sp, #16
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80078f4:	f107 0310 	add.w	r3, r7, #16
 80078f8:	4619      	mov	r1, r3
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff ff7a 	bl	80077f4 <lfs_dir_alloc>
 8007900:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <lfs_dir_split+0x26>
        return err;
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	e03c      	b.n	8007986 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7ddb      	ldrb	r3, [r3, #23]
 8007910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8007920:	f107 0110 	add.w	r1, r7, #16
 8007924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f879 	bl	8007a30 <lfs_dir_compact>
 800793e:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	da01      	bge.n	800794a <lfs_dir_split+0x64>
        return res;
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	e01d      	b.n	8007986 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2201      	movs	r2, #1
 800795a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3320      	adds	r3, #32
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7fd fd5b 	bl	8005420 <lfs_pair_cmp>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <lfs_dir_split+0x9e>
 8007970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3738      	adds	r7, #56	; 0x38
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800799e:	68b8      	ldr	r0, [r7, #8]
 80079a0:	f7fd fe51 	bl	8005646 <lfs_tag_dsize>
 80079a4:	4602      	mov	r2, r0
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	441a      	add	r2, r3
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	601a      	str	r2, [r3, #0]
    return 0;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b086      	sub	sp, #24
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	6859      	ldr	r1, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	f7ff fd1d 	bl	8007414 <lfs_dir_commitattr>
 80079da:	4603      	mov	r3, r0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd11      	ble.n	8007a1c <lfs_dir_needsrelocation+0x38>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	3301      	adds	r3, #1
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a04:	3201      	adds	r2, #1
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a0e:	fb02 f201 	mul.w	r2, r2, r1
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <lfs_dir_needsrelocation+0x38>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <lfs_dir_needsrelocation+0x3a>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	b2db      	uxtb	r3, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b0a4      	sub	sp, #144	; 0x90
 8007a34:	af0a      	add	r7, sp, #40	; 0x28
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f7ff ffcc 	bl	80079e4 <lfs_dir_needsrelocation>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8007a5c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00e      	beq.n	8007a82 <lfs_dir_compact+0x52>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	657a      	str	r2, [r7, #84]	; 0x54
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a6e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fcd3 	bl	8005420 <lfs_pair_cmp>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8155 	bne.w	8007d2c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a88:	2300      	movs	r3, #0
 8007a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	647b      	str	r3, [r7, #68]	; 0x44
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a98:	2300      	movs	r3, #0
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <lfs_dir_compact+0x80>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aac:	3b08      	subs	r3, #8
 8007aae:	e003      	b.n	8007ab8 <lfs_dir_compact+0x88>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8007ab8:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7fd fc4b 	bl	800535c <lfs_bd_erase>
 8007ac6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8007ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d006      	beq.n	8007adc <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8007ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007ad4:	f000 812c 	beq.w	8007d30 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8007ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ada:	e187      	b.n	8007dec <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fd f89d 	bl	8004c20 <lfs_tole32>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8007af2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007af6:	2304      	movs	r3, #4
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff fc55 	bl	80073a8 <lfs_dir_commitprog>
 8007afe:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd f880 	bl	8004c0a <lfs_fromle32>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
            if (err) {
 8007b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8007b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b1c:	f000 810a 	beq.w	8007d34 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8007b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b22:	e163      	b.n	8007dec <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8007b24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007b28:	425b      	negs	r3, r3
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	637a      	str	r2, [r7, #52]	; 0x34
 8007b32:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b36:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8007b38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007b3c:	9208      	str	r2, [sp, #32]
 8007b3e:	4aad      	ldr	r2, [pc, #692]	; (8007df4 <lfs_dir_compact+0x3c4>)
 8007b40:	9207      	str	r2, [sp, #28]
 8007b42:	9306      	str	r3, [sp, #24]
 8007b44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	2300      	movs	r3, #0
 8007b52:	9303      	str	r3, [sp, #12]
 8007b54:	4ba8      	ldr	r3, [pc, #672]	; (8007df8 <lfs_dir_compact+0x3c8>)
 8007b56:	9302      	str	r3, [sp, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	2200      	movs	r2, #0
 8007b66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7fe fab3 	bl	80060d4 <lfs_dir_traverse>
 8007b6e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8007b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d006      	beq.n	8007b84 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8007b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b78:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007b7c:	f000 80dc 	beq.w	8007d38 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8007b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b82:	e133      	b.n	8007dec <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3318      	adds	r3, #24
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd fc2e 	bl	80053ea <lfs_pair_isnull>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f083 0301 	eor.w	r3, r3, #1
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d022      	beq.n	8007be0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fd fcaf 	bl	8005502 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	7ddb      	ldrb	r3, [r3, #23]
 8007ba8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007bac:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8007bae:	4a93      	ldr	r2, [pc, #588]	; (8007dfc <lfs_dir_compact+0x3cc>)
 8007bb0:	431a      	orrs	r2, r3
                        dir->tail);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8007bb6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fc2a 	bl	8007414 <lfs_dir_commitattr>
 8007bc0:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fc81 	bl	80054ce <lfs_pair_fromle32>
                if (err) {
 8007bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d006      	beq.n	8007be0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8007bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007bd8:	f000 80b0 	beq.w	8007d3c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8007bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bde:	e105      	b.n	8007dec <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8007be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8007bec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bf0:	f083 0301 	eor.w	r3, r3, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d011      	beq.n	8007c1e <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd fd31 	bl	800566e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd fd28 	bl	800566e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fd fd1f 	bl	800566e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8007c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c40:	461a      	mov	r2, r3
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff fa39 	bl	80070bc <lfs_dir_getgstate>
 8007c4a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8007c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <lfs_dir_compact+0x226>
                return err;
 8007c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c54:	e0ca      	b.n	8007dec <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8007c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fd2c 	bl	80056b8 <lfs_gstate_iszero>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f083 0301 	eor.w	r3, r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d016      	beq.n	8007c9a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8007c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fdc7 	bl	8005804 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8007c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c7a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007c7e:	4a60      	ldr	r2, [pc, #384]	; (8007e00 <lfs_dir_compact+0x3d0>)
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fbc7 	bl	8007414 <lfs_dir_commitattr>
 8007c86:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8007c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8007c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c90:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007c94:	d054      	beq.n	8007d40 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8007c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c98:	e0a8      	b.n	8007dec <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8007c9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fc37 	bl	8007514 <lfs_dir_commitcrc>
 8007ca6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8007ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007cb4:	d046      	beq.n	8007d44 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8007cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb8:	e098      	b.n	8007dec <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cc0:	6992      	ldr	r2, [r2, #24]
 8007cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cc6:	fb02 f201 	mul.w	r2, r2, r1
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <lfs_dir_compact+0x2ae>
 8007cd0:	4b4c      	ldr	r3, [pc, #304]	; (8007e04 <lfs_dir_compact+0x3d4>)
 8007cd2:	4a4d      	ldr	r2, [pc, #308]	; (8007e08 <lfs_dir_compact+0x3d8>)
 8007cd4:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8007cd8:	484c      	ldr	r0, [pc, #304]	; (8007e0c <lfs_dir_compact+0x3dc>)
 8007cda:	f00f f843 	bl	8016d64 <__assert_func>
            lfs_pair_swap(dir->pair);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fb6d 	bl	80053c0 <lfs_pair_swap>
            dir->count = end - begin;
 8007ce6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8007cea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8007cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8007cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3348      	adds	r3, #72	; 0x48
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8007d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d12:	f083 0301 	eor.w	r3, r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d064      	beq.n	8007de6 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	333c      	adds	r3, #60	; 0x3c
 8007d22:	3230      	adds	r2, #48	; 0x30
 8007d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8007d2a:	e05c      	b.n	8007de6 <lfs_dir_compact+0x3b6>
        goto relocate;
 8007d2c:	bf00      	nop
 8007d2e:	e00a      	b.n	8007d46 <lfs_dir_compact+0x316>
                    goto relocate;
 8007d30:	bf00      	nop
 8007d32:	e008      	b.n	8007d46 <lfs_dir_compact+0x316>
                    goto relocate;
 8007d34:	bf00      	nop
 8007d36:	e006      	b.n	8007d46 <lfs_dir_compact+0x316>
                    goto relocate;
 8007d38:	bf00      	nop
 8007d3a:	e004      	b.n	8007d46 <lfs_dir_compact+0x316>
                        goto relocate;
 8007d3c:	bf00      	nop
 8007d3e:	e002      	b.n	8007d46 <lfs_dir_compact+0x316>
                        goto relocate;
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <lfs_dir_compact+0x316>
                    goto relocate;
 8007d44:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	4619      	mov	r1, r3
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7fc ff9f 	bl	8004c96 <lfs_cache_drop>
        if (!tired) {
 8007d58:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007d5c:	f083 0301 	eor.w	r3, r3, #1
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4a29      	ldr	r2, [pc, #164]	; (8007e10 <lfs_dir_compact+0x3e0>)
 8007d6c:	9200      	str	r2, [sp, #0]
 8007d6e:	f640 0201 	movw	r2, #2049	; 0x801
 8007d72:	4926      	ldr	r1, [pc, #152]	; (8007e0c <lfs_dir_compact+0x3dc>)
 8007d74:	4827      	ldr	r0, [pc, #156]	; (8007e14 <lfs_dir_compact+0x3e4>)
 8007d76:	f00f fd15 	bl	80177a4 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	617a      	str	r2, [r7, #20]
 8007d80:	2201      	movs	r2, #1
 8007d82:	61ba      	str	r2, [r7, #24]
 8007d84:	f107 0214 	add.w	r2, r7, #20
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fd fb48 	bl	8005420 <lfs_pair_cmp>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <lfs_dir_compact+0x3e0>)
 8007d9c:	9200      	str	r2, [sp, #0]
 8007d9e:	f640 0206 	movw	r2, #2054	; 0x806
 8007da2:	491a      	ldr	r1, [pc, #104]	; (8007e0c <lfs_dir_compact+0x3dc>)
 8007da4:	481c      	ldr	r0, [pc, #112]	; (8007e18 <lfs_dir_compact+0x3e8>)
 8007da6:	f00f fcfd 	bl	80177a4 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8007daa:	f06f 031b 	mvn.w	r3, #27
 8007dae:	e01d      	b.n	8007dec <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7fd fed2 	bl	8005b60 <lfs_alloc>
 8007dbc:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8007dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <lfs_dir_compact+0x3ae>
 8007dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc6:	f113 0f1c 	cmn.w	r3, #28
 8007dca:	d106      	bne.n	8007dda <lfs_dir_compact+0x3aa>
 8007dcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007dd0:	f083 0301 	eor.w	r3, r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <lfs_dir_compact+0x3ae>
            return err;
 8007dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ddc:	e006      	b.n	8007dec <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8007de4:	e64d      	b.n	8007a82 <lfs_dir_compact+0x52>
        break;
 8007de6:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8007de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3768      	adds	r7, #104	; 0x68
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	080079bb 	.word	0x080079bb
 8007df8:	400ffc00 	.word	0x400ffc00
 8007dfc:	000ffc08 	.word	0x000ffc08
 8007e00:	7ffffc0c 	.word	0x7ffffc0c
 8007e04:	08019600 	.word	0x08019600
 8007e08:	0801a044 	.word	0x0801a044
 8007e0c:	08019494 	.word	0x08019494
 8007e10:	080195a8 	.word	0x080195a8
 8007e14:	08019628 	.word	0x08019628
 8007e18:	0801964c 	.word	0x0801964c

08007e1c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b097      	sub	sp, #92	; 0x5c
 8007e20:	af0a      	add	r7, sp, #40	; 0x28
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8007e2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8007e30:	e058      	b.n	8007ee4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3c:	b292      	uxth	r2, r2
 8007e3e:	4252      	negs	r2, r2
 8007e40:	b292      	uxth	r2, r2
 8007e42:	b212      	sxth	r2, r2
 8007e44:	f107 0118 	add.w	r1, r7, #24
 8007e48:	9108      	str	r1, [sp, #32]
 8007e4a:	4978      	ldr	r1, [pc, #480]	; (800802c <lfs_dir_splittingcompact+0x210>)
 8007e4c:	9107      	str	r1, [sp, #28]
 8007e4e:	9206      	str	r2, [sp, #24]
 8007e50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007e54:	9205      	str	r2, [sp, #20]
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9303      	str	r3, [sp, #12]
 8007e5c:	4b74      	ldr	r3, [pc, #464]	; (8008030 <lfs_dir_splittingcompact+0x214>)
 8007e5e:	9302      	str	r3, [sp, #8]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7fe f92f 	bl	80060d4 <lfs_dir_traverse>
 8007e76:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <lfs_dir_splittingcompact+0x66>
                return err;
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	e0d0      	b.n	8008024 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8007e82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8007e8c:	d822      	bhi.n	8007ed4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e92:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8007e94:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	e003      	b.n	8007eb4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb0:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8007eb2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8007eb8:	6992      	ldr	r2, [r2, #24]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fc fe59 	bl	8004b74 <lfs_alignup>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7fc fe2f 	bl	8004b2a <lfs_min>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d20e      	bcs.n	8007ef2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8007ed4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee0:	4413      	add	r3, r2
 8007ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8007ee4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d8a0      	bhi.n	8007e32 <lfs_dir_splittingcompact+0x16>
 8007ef0:	e000      	b.n	8007ef4 <lfs_dir_splittingcompact+0xd8>
                break;
 8007ef2:	bf00      	nop
        }

        if (split == begin) {
 8007ef4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d02d      	beq.n	8007f5a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007f06:	9202      	str	r2, [sp, #8]
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fce6 	bl	80078e6 <lfs_dir_split>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <lfs_dir_splittingcompact+0x112>
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	f113 0f1c 	cmn.w	r3, #28
 8007f28:	d001      	beq.n	8007f2e <lfs_dir_splittingcompact+0x112>
            return err;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	e07a      	b.n	8008024 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	493d      	ldr	r1, [pc, #244]	; (8008034 <lfs_dir_splittingcompact+0x218>)
 8007f3e:	9101      	str	r1, [sp, #4]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	f640 0259 	movw	r2, #2137	; 0x859
 8007f48:	493b      	ldr	r1, [pc, #236]	; (8008038 <lfs_dir_splittingcompact+0x21c>)
 8007f4a:	483c      	ldr	r0, [pc, #240]	; (800803c <lfs_dir_splittingcompact+0x220>)
 8007f4c:	f00f fc2a 	bl	80177a4 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8007f50:	e004      	b.n	8007f5c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8007f58:	e767      	b.n	8007e2a <lfs_dir_splittingcompact+0xe>
            break;
 8007f5a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff fd40 	bl	80079e4 <lfs_dir_needsrelocation>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d04d      	beq.n	8008006 <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	613a      	str	r2, [r7, #16]
 8007f70:	2201      	movs	r2, #1
 8007f72:	617a      	str	r2, [r7, #20]
 8007f74:	f107 0210 	add.w	r2, r7, #16
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd fa50 	bl	8005420 <lfs_pair_cmp>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13f      	bne.n	8008006 <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f002 fe0c 	bl	800aba4 <lfs_fs_rawsize>
 8007f8c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da01      	bge.n	8007f98 <lfs_dir_splittingcompact+0x17c>
            return size;
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	e045      	b.n	8008024 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9c:	085a      	lsrs	r2, r3, #1
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d930      	bls.n	8008006 <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	4a22      	ldr	r2, [pc, #136]	; (8008034 <lfs_dir_splittingcompact+0x218>)
 8007faa:	9200      	str	r2, [sp, #0]
 8007fac:	f640 026d 	movw	r2, #2157	; 0x86d
 8007fb0:	4921      	ldr	r1, [pc, #132]	; (8008038 <lfs_dir_splittingcompact+0x21c>)
 8007fb2:	4823      	ldr	r0, [pc, #140]	; (8008040 <lfs_dir_splittingcompact+0x224>)
 8007fb4:	f00f fbf6 	bl	80177a4 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007fb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fc89 	bl	80078e6 <lfs_dir_split>
 8007fd4:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <lfs_dir_splittingcompact+0x1cc>
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f113 0f1c 	cmn.w	r3, #28
 8007fe2:	d001      	beq.n	8007fe8 <lfs_dir_splittingcompact+0x1cc>
                return err;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	e01d      	b.n	8008024 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <lfs_dir_splittingcompact+0x218>)
 8007ff0:	f640 0277 	movw	r2, #2167	; 0x877
 8007ff4:	4910      	ldr	r1, [pc, #64]	; (8008038 <lfs_dir_splittingcompact+0x21c>)
 8007ff6:	4813      	ldr	r0, [pc, #76]	; (8008044 <lfs_dir_splittingcompact+0x228>)
 8007ff8:	f00f fbd4 	bl	80177a4 <iprintf>
 8007ffc:	e003      	b.n	8008006 <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 8007ffe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008002:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8008006:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800800a:	9302      	str	r3, [sp, #8]
 800800c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fd07 	bl	8007a30 <lfs_dir_compact>
 8008022:	4603      	mov	r3, r0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3734      	adds	r7, #52	; 0x34
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}
 800802c:	0800798f 	.word	0x0800798f
 8008030:	400ffc00 	.word	0x400ffc00
 8008034:	080195a8 	.word	0x080195a8
 8008038:	08019494 	.word	0x08019494
 800803c:	08019684 	.word	0x08019684
 8008040:	080196b4 	.word	0x080196b4
 8008044:	080196e4 	.word	0x080196e4

08008048 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8008048:	b5b0      	push	{r4, r5, r7, lr}
 800804a:	b0a6      	sub	sp, #152	; 0x98
 800804c:	af0a      	add	r7, sp, #40	; 0x28
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
    int state = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8008060:	2300      	movs	r3, #0
 8008062:	667b      	str	r3, [r7, #100]	; 0x64
 8008064:	e06d      	b.n	8008142 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8008066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4413      	add	r3, r2
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd faa1 	bl	80055b8 <lfs_tag_type3>
 8008076:	4603      	mov	r3, r0
 8008078:	461a      	mov	r2, r3
 800807a:	f240 4301 	movw	r3, #1025	; 0x401
 800807e:	429a      	cmp	r2, r3
 8008080:	d106      	bne.n	8008090 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	8a9b      	ldrh	r3, [r3, #20]
 8008086:	3301      	adds	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	829a      	strh	r2, [r3, #20]
 800808e:	e055      	b.n	800813c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8008090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	4413      	add	r3, r2
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd fa8c 	bl	80055b8 <lfs_tag_type3>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d114      	bne.n	80080d6 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	8a9b      	ldrh	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <lfs_dir_relocatingcommit+0x7a>
 80080b4:	4ba4      	ldr	r3, [pc, #656]	; (8008348 <lfs_dir_relocatingcommit+0x300>)
 80080b6:	4aa5      	ldr	r2, [pc, #660]	; (800834c <lfs_dir_relocatingcommit+0x304>)
 80080b8:	f640 018f 	movw	r1, #2191	; 0x88f
 80080bc:	48a4      	ldr	r0, [pc, #656]	; (8008350 <lfs_dir_relocatingcommit+0x308>)
 80080be:	f00e fe51 	bl	8016d64 <__assert_func>
            dir->count -= 1;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	8a9b      	ldrh	r3, [r3, #20]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80080d4:	e032      	b.n	800813c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80080d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd fa49 	bl	8005578 <lfs_tag_type1>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080ec:	d126      	bne.n	800813c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80080ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80080fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4413      	add	r3, r2
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800810e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4413      	add	r3, r2
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd fa5d 	bl	80055d8 <lfs_tag_chunk>
 800811e:	4603      	mov	r3, r0
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	3318      	adds	r3, #24
 8008136:	4618      	mov	r0, r3
 8008138:	f7fd f9c9 	bl	80054ce <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800813c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813e:	3301      	adds	r3, #1
 8008140:	667b      	str	r3, [r7, #100]	; 0x64
 8008142:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008148:	429a      	cmp	r2, r3
 800814a:	db8c      	blt.n	8008066 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800814c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02b      	beq.n	80081ac <lfs_dir_relocatingcommit+0x164>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	8a9b      	ldrh	r3, [r3, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d127      	bne.n	80081ac <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800815c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <lfs_dir_relocatingcommit+0x12a>
 8008164:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <lfs_dir_relocatingcommit+0x30c>)
 8008166:	4a79      	ldr	r2, [pc, #484]	; (800834c <lfs_dir_relocatingcommit+0x304>)
 8008168:	f640 019c 	movw	r1, #2204	; 0x89c
 800816c:	4878      	ldr	r0, [pc, #480]	; (8008350 <lfs_dir_relocatingcommit+0x308>)
 800816e:	f00e fdf9 	bl	8016d64 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008178:	4619      	mov	r1, r3
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f002 f86e 	bl	800a25c <lfs_fs_pred>
 8008180:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8008182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <lfs_dir_relocatingcommit+0x14c>
 8008188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800818a:	f113 0f02 	cmn.w	r3, #2
 800818e:	d001      	beq.n	8008194 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8008190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008192:	e203      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8008194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008196:	f113 0f02 	cmn.w	r3, #2
 800819a:	d007      	beq.n	80081ac <lfs_dir_relocatingcommit+0x164>
 800819c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081a0:	7ddb      	ldrb	r3, [r3, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80081a6:	2302      	movs	r3, #2
 80081a8:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80081aa:	e121      	b.n	80083f0 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	7d9b      	ldrb	r3, [r3, #22]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80fb 	beq.w	80083ac <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80081c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c8:	f04f 33ff 	mov.w	r3, #4294967295
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80081d2:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <lfs_dir_relocatingcommit+0x1a0>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e4:	3b08      	subs	r3, #8
 80081e6:	e003      	b.n	80081f0 <lfs_dir_relocatingcommit+0x1a8>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3318      	adds	r3, #24
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd f983 	bl	8005502 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
 8008208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800820e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008212:	9308      	str	r3, [sp, #32]
 8008214:	4b50      	ldr	r3, [pc, #320]	; (8008358 <lfs_dir_relocatingcommit+0x310>)
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	2300      	movs	r3, #0
 800821a:	9306      	str	r3, [sp, #24]
 800821c:	2300      	movs	r3, #0
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	2300      	movs	r3, #0
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	2300      	movs	r3, #0
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	2300      	movs	r3, #0
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	460b      	mov	r3, r1
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7fd ff4a 	bl	80060d4 <lfs_dir_traverse>
 8008240:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3318      	adds	r3, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fd f941 	bl	80054ce <lfs_pair_fromle32>
        if (err) {
 800824c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8008252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008254:	f113 0f1c 	cmn.w	r3, #28
 8008258:	f000 80aa 	beq.w	80083b0 <lfs_dir_relocatingcommit+0x368>
 800825c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008262:	f000 80a5 	beq.w	80083b0 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8008266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008268:	e198      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800826a:	f107 031c 	add.w	r3, r7, #28
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	605a      	str	r2, [r3, #4]
 8008274:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800827c:	f107 031c 	add.w	r3, r7, #28
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd f9f3 	bl	800566e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800828e:	f107 031c 	add.w	r3, r7, #28
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7fd f9ea 	bl	800566e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80082a0:	f107 031c 	add.w	r3, r7, #28
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fd f9e1 	bl	800566e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80082b8:	f107 031c 	add.w	r3, r7, #28
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd f9fb 	bl	80056b8 <lfs_gstate_iszero>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f083 0301 	eor.w	r3, r3, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d027      	beq.n	800831e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80082ce:	f107 031c 	add.w	r3, r7, #28
 80082d2:	461a      	mov	r2, r3
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7fe fef0 	bl	80070bc <lfs_dir_getgstate>
 80082dc:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80082de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80082e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e6:	e159      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 80082e8:	f107 031c 	add.w	r3, r7, #28
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd fa89 	bl	8005804 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80082f2:	f107 031c 	add.w	r3, r7, #28
 80082f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80082fa:	4a18      	ldr	r2, [pc, #96]	; (800835c <lfs_dir_relocatingcommit+0x314>)
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff f889 	bl	8007414 <lfs_dir_commitattr>
 8008302:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8008304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800830a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830c:	f113 0f1c 	cmn.w	r3, #28
 8008310:	d050      	beq.n	80083b4 <lfs_dir_relocatingcommit+0x36c>
 8008312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008314:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008318:	d04c      	beq.n	80083b4 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800831a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831c:	e13e      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800831e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008322:	4619      	mov	r1, r3
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff f8f5 	bl	8007514 <lfs_dir_commitcrc>
 800832a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 800832c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8008332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008334:	f113 0f1c 	cmn.w	r3, #28
 8008338:	d03e      	beq.n	80083b8 <lfs_dir_relocatingcommit+0x370>
 800833a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800833c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008340:	d03a      	beq.n	80083b8 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8008342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008344:	e12a      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
 8008346:	bf00      	nop
 8008348:	08019710 	.word	0x08019710
 800834c:	0801a054 	.word	0x0801a054
 8008350:	08019494 	.word	0x08019494
 8008354:	08019720 	.word	0x08019720
 8008358:	080079bb 	.word	0x080079bb
 800835c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008366:	6992      	ldr	r2, [r2, #24]
 8008368:	fbb3 f1f2 	udiv	r1, r3, r2
 800836c:	fb02 f201 	mul.w	r2, r2, r1
 8008370:	1a9b      	subs	r3, r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d006      	beq.n	8008384 <lfs_dir_relocatingcommit+0x33c>
 8008376:	4b8b      	ldr	r3, [pc, #556]	; (80085a4 <lfs_dir_relocatingcommit+0x55c>)
 8008378:	4a8b      	ldr	r2, [pc, #556]	; (80085a8 <lfs_dir_relocatingcommit+0x560>)
 800837a:	f640 01e6 	movw	r1, #2278	; 0x8e6
 800837e:	488b      	ldr	r0, [pc, #556]	; (80085ac <lfs_dir_relocatingcommit+0x564>)
 8008380:	f00e fcf0 	bl	8016d64 <__assert_func>
        dir->off = commit.off;
 8008384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800838a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	333c      	adds	r3, #60	; 0x3c
 8008396:	3230      	adds	r2, #48	; 0x30
 8008398:	ca07      	ldmia	r2, {r0, r1, r2}
 800839a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3348      	adds	r3, #72	; 0x48
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	609a      	str	r2, [r3, #8]
 80083aa:	e021      	b.n	80083f0 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80083b8:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3310      	adds	r3, #16
 80083be:	4619      	mov	r1, r3
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7fc fc68 	bl	8004c96 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	8a9b      	ldrh	r3, [r3, #20]
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	2300      	movs	r3, #0
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fd1d 	bl	8007e1c <lfs_dir_splittingcompact>
 80083e2:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80083e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da01      	bge.n	80083ee <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80083ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ec:	e0d6      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 80083ee:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	663b      	str	r3, [r7, #96]	; 0x60
 8008402:	e0c6      	b.n	8008592 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8008404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008406:	3308      	adds	r3, #8
 8008408:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd f806 	bl	8005420 <lfs_pair_cmp>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 80b8 	bne.w	800858c <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 800841c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	f103 0408 	add.w	r4, r3, #8
 8008424:	4615      	mov	r5, r2
 8008426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800842a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800842e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8008432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008434:	3308      	adds	r3, #8
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	f000 809d 	beq.w	8008578 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 800843e:	2300      	movs	r3, #0
 8008440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008442:	e07b      	b.n	800853c <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8008444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	4413      	add	r3, r2
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd f8b2 	bl	80055b8 <lfs_tag_type3>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800845c:	429a      	cmp	r2, r3
 800845e:	d115      	bne.n	800848c <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8008460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008462:	889c      	ldrh	r4, [r3, #4]
 8008464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	4413      	add	r3, r2
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7fd f8cc 	bl	800560c <lfs_tag_id>
 8008474:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8008476:	429c      	cmp	r4, r3
 8008478:	d108      	bne.n	800848c <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800847a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8008482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e054      	b.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800848c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	4413      	add	r3, r2
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7fd f88e 	bl	80055b8 <lfs_tag_type3>
 800849c:	4603      	mov	r3, r0
 800849e:	461a      	mov	r2, r3
 80084a0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d11c      	bne.n	80084e2 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80084a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084aa:	889c      	ldrh	r4, [r3, #4]
 80084ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	4413      	add	r3, r2
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd f8a8 	bl	800560c <lfs_tag_id>
 80084bc:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80084be:	429c      	cmp	r4, r3
 80084c0:	d90f      	bls.n	80084e2 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 80084c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084c4:	889b      	ldrh	r3, [r3, #4]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084cc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80084ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d0:	799b      	ldrb	r3, [r3, #6]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d12f      	bne.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 80084d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	1e5a      	subs	r2, r3, #1
 80084dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80084e0:	e029      	b.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80084e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4413      	add	r3, r2
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fd f863 	bl	80055b8 <lfs_tag_type3>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	f240 4301 	movw	r3, #1025	; 0x401
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d11b      	bne.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80084fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008500:	889c      	ldrh	r4, [r3, #4]
 8008502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4413      	add	r3, r2
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd f87d 	bl	800560c <lfs_tag_id>
 8008512:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8008514:	429c      	cmp	r4, r3
 8008516:	d30e      	bcc.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8008518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851a:	889b      	ldrh	r3, [r3, #4]
 800851c:	3301      	adds	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008522:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8008524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008526:	799b      	ldrb	r3, [r3, #6]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d104      	bne.n	8008536 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 800852c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008534:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8008536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008538:	3301      	adds	r3, #1
 800853a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800853c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800853e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008542:	429a      	cmp	r2, r3
 8008544:	f6ff af7e 	blt.w	8008444 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8008548:	e016      	b.n	8008578 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 800854a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800854c:	889a      	ldrh	r2, [r3, #4]
 800854e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008550:	8b9b      	ldrh	r3, [r3, #28]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	b29a      	uxth	r2, r3
 8008556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008558:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800855a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800855c:	f103 0108 	add.w	r1, r3, #8
 8008560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008562:	3320      	adds	r3, #32
 8008564:	461a      	mov	r2, r3
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7fe fd8c 	bl	8007084 <lfs_dir_fetch>
 800856c:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 800856e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8008574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008576:	e011      	b.n	800859c <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8008578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800857a:	889a      	ldrh	r2, [r3, #4]
 800857c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800857e:	8b9b      	ldrh	r3, [r3, #28]
 8008580:	429a      	cmp	r2, r3
 8008582:	d303      	bcc.n	800858c <lfs_dir_relocatingcommit+0x544>
 8008584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008586:	7fdb      	ldrb	r3, [r3, #31]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1de      	bne.n	800854a <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800858c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	663b      	str	r3, [r7, #96]	; 0x60
 8008592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af35 	bne.w	8008404 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800859a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800859c:	4618      	mov	r0, r3
 800859e:	3770      	adds	r7, #112	; 0x70
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bdb0      	pop	{r4, r5, r7, pc}
 80085a4:	08019600 	.word	0x08019600
 80085a8:	0801a054 	.word	0x0801a054
 80085ac:	08019494 	.word	0x08019494

080085b0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80085b0:	b5b0      	push	{r4, r5, r7, lr}
 80085b2:	b0bc      	sub	sp, #240	; 0xf0
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085c6:	e045      	b.n	8008654 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80085c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085cc:	3308      	adds	r3, #8
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d03a      	beq.n	800864a <lfs_dir_orphaningcommit+0x9a>
 80085d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d8:	3308      	adds	r3, #8
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc ff1e 	bl	8005420 <lfs_pair_cmp>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d12f      	bne.n	800864a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ee:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d12a      	bne.n	800864a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80085f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d023      	beq.n	800864a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800860e:	429a      	cmp	r2, r3
 8008610:	d91b      	bls.n	800864a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8008612:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fff2 	bl	8009600 <lfs_file_outline>
 800861c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8008620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8008628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800862c:	e2ad      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800862e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f001 f806 	bl	8009644 <lfs_file_flush>
 8008638:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800863c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8008644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008648:	e29f      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800864a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1b5      	bne.n	80085c8 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8008672:	461d      	mov	r5, r3
 8008674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800867c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8008686:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fcd8 	bl	8008048 <lfs_dir_relocatingcommit>
 8008698:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800869c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da02      	bge.n	80086aa <lfs_dir_orphaningcommit+0xfa>
        return state;
 80086a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a8:	e26f      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc feb4 	bl	8005420 <lfs_pair_cmp>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	461d      	mov	r5, r3
 80086c2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80086c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80086ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80086d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d14a      	bne.n	8008770 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3348      	adds	r3, #72	; 0x48
 80086de:	461a      	mov	r2, r3
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7fe fcea 	bl	80070bc <lfs_dir_getgstate>
 80086e8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80086ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <lfs_dir_orphaningcommit+0x14a>
            return err;
 80086f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086f8:	e247      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80086fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8008700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3318      	adds	r3, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f7fc fef9 	bl	8005502 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	7ddb      	ldrb	r3, [r3, #23]
 8008714:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008718:	051a      	lsls	r2, r3, #20
 800871a:	4bc2      	ldr	r3, [pc, #776]	; (8008a24 <lfs_dir_orphaningcommit+0x474>)
 800871c:	4313      	orrs	r3, r2
 800871e:	667b      	str	r3, [r7, #100]	; 0x64
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3318      	adds	r3, #24
 8008724:	66bb      	str	r3, [r7, #104]	; 0x68
 8008726:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800872a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800872e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008732:	2000      	movs	r0, #0
 8008734:	9001      	str	r0, [sp, #4]
 8008736:	2001      	movs	r0, #1
 8008738:	9000      	str	r0, [sp, #0]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff fc84 	bl	8008048 <lfs_dir_relocatingcommit>
 8008740:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	3318      	adds	r3, #24
 8008748:	4618      	mov	r0, r3
 800874a:	f7fc fec0 	bl	80054ce <lfs_pair_fromle32>
        if (state < 0) {
 800874e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008752:	2b00      	cmp	r3, #0
 8008754:	da02      	bge.n	800875c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8008756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800875a:	e216      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800875c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8008760:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8008764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008768:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800876c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8008770:	2300      	movs	r3, #0
 8008772:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8008776:	e1fc      	b.n	8008b72 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8008778:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800877c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008780:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008784:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008788:	4ca7      	ldr	r4, [pc, #668]	; (8008a28 <lfs_dir_orphaningcommit+0x478>)
 800878a:	9403      	str	r4, [sp, #12]
 800878c:	9102      	str	r1, [sp, #8]
 800878e:	9201      	str	r2, [sp, #4]
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	4603      	mov	r3, r0
 8008794:	f44f 6217 	mov.w	r2, #2416	; 0x970
 8008798:	49a4      	ldr	r1, [pc, #656]	; (8008a2c <lfs_dir_orphaningcommit+0x47c>)
 800879a:	48a5      	ldr	r0, [pc, #660]	; (8008a30 <lfs_dir_orphaningcommit+0x480>)
 800879c:	f00f f802 	bl	80177a4 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0220 	add.w	r2, r3, #32
 80087ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fc fe34 	bl	8005420 <lfs_pair_cmp>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80087be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80087c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087d6:	e037      	b.n	8008848 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80087d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087dc:	f103 0208 	add.w	r2, r3, #8
 80087e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fc fe1a 	bl	8005420 <lfs_pair_cmp>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d109      	bne.n	8008806 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80087f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087fa:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80087fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008800:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008804:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8008806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800880a:	799b      	ldrb	r3, [r3, #6]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d116      	bne.n	800883e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8008810:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008814:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008818:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fc fdfe 	bl	8005420 <lfs_pair_cmp>
 8008824:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800882a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800882e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008832:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8008834:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008838:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800883c:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800883e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1c3      	bne.n	80087d8 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8008850:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008854:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008858:	4619      	mov	r1, r3
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f001 fdb0 	bl	800a3c0 <lfs_fs_parent>
 8008860:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8008864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008868:	2b00      	cmp	r3, #0
 800886a:	da07      	bge.n	800887c <lfs_dir_orphaningcommit+0x2cc>
 800886c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008870:	f113 0f02 	cmn.w	r3, #2
 8008874:	d002      	beq.n	800887c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8008876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800887a:	e186      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800887c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008880:	f113 0f02 	cmn.w	r3, #2
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800888e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008892:	f113 0f02 	cmn.w	r3, #2
 8008896:	f000 809e 	beq.w	80089d6 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800889a:	2101      	movs	r1, #1
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f001 fe27 	bl	800a4f0 <lfs_fs_preporphans>
 80088a2:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80088a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <lfs_dir_orphaningcommit+0x304>
                return err;
 80088ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088b2:	e16a      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80088b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80088b8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3330      	adds	r3, #48	; 0x30
 80088c0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fc ff5c 	bl	8005784 <lfs_gstate_hasmovehere>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d02d      	beq.n	800892e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fc fe98 	bl	800560c <lfs_tag_id>
 80088dc:	4603      	mov	r3, r0
 80088de:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80088e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80088e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80088ea:	484f      	ldr	r0, [pc, #316]	; (8008a28 <lfs_dir_orphaningcommit+0x478>)
 80088ec:	9002      	str	r0, [sp, #8]
 80088ee:	9201      	str	r2, [sp, #4]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	460b      	mov	r3, r1
 80088f4:	f640 129d 	movw	r2, #2461	; 0x99d
 80088f8:	494c      	ldr	r1, [pc, #304]	; (8008a2c <lfs_dir_orphaningcommit+0x47c>)
 80088fa:	484e      	ldr	r0, [pc, #312]	; (8008a34 <lfs_dir_orphaningcommit+0x484>)
 80088fc:	f00e ff52 	bl	80177a4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008900:	2200      	movs	r2, #0
 8008902:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f001 fe42 	bl	800a590 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800890c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008910:	4618      	mov	r0, r3
 8008912:	f7fc fe7b 	bl	800560c <lfs_tag_id>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800891e:	4293      	cmp	r3, r2
 8008920:	d205      	bcs.n	800892e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8008922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008926:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800892a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008930:	657b      	str	r3, [r7, #84]	; 0x54
 8008932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008934:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8008936:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800893a:	4618      	mov	r0, r3
 800893c:	f7fc fde1 	bl	8005502 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8008940:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8008944:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008948:	4293      	cmp	r3, r2
 800894a:	d007      	beq.n	800895c <lfs_dir_orphaningcommit+0x3ac>
 800894c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8008950:	029b      	lsls	r3, r3, #10
 8008952:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008956:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800895a:	e000      	b.n	800895e <lfs_dir_orphaningcommit+0x3ae>
 800895c:	2300      	movs	r3, #0
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
 8008960:	2300      	movs	r3, #0
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48
 8008964:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800896e:	653b      	str	r3, [r7, #80]	; 0x50
 8008970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008974:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008978:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800897c:	2000      	movs	r0, #0
 800897e:	9001      	str	r0, [sp, #4]
 8008980:	2002      	movs	r0, #2
 8008982:	9000      	str	r0, [sp, #0]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff fb5f 	bl	8008048 <lfs_dir_relocatingcommit>
 800898a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800898e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008992:	4618      	mov	r0, r3
 8008994:	f7fc fd9b 	bl	80054ce <lfs_pair_fromle32>
            if (state < 0) {
 8008998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800899c:	2b00      	cmp	r3, #0
 800899e:	da02      	bge.n	80089a6 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80089a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089a4:	e0f1      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80089a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d113      	bne.n	80089d6 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80089ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80089b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80089ba:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80089be:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80089c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80089d4:	e0cd      	b.n	8008b72 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80089d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80089da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80089de:	4619      	mov	r1, r3
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f001 fc3b 	bl	800a25c <lfs_fs_pred>
 80089e6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80089ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <lfs_dir_orphaningcommit+0x452>
 80089f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089f6:	f113 0f02 	cmn.w	r3, #2
 80089fa:	d002      	beq.n	8008a02 <lfs_dir_orphaningcommit+0x452>
            return err;
 80089fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a00:	e0c3      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8008a02:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01a      	beq.n	8008a40 <lfs_dir_orphaningcommit+0x490>
 8008a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a0e:	f113 0f02 	cmn.w	r3, #2
 8008a12:	d115      	bne.n	8008a40 <lfs_dir_orphaningcommit+0x490>
 8008a14:	4b08      	ldr	r3, [pc, #32]	; (8008a38 <lfs_dir_orphaningcommit+0x488>)
 8008a16:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <lfs_dir_orphaningcommit+0x48c>)
 8008a18:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 8008a1c:	4803      	ldr	r0, [pc, #12]	; (8008a2c <lfs_dir_orphaningcommit+0x47c>)
 8008a1e:	f00e f9a1 	bl	8016d64 <__assert_func>
 8008a22:	bf00      	nop
 8008a24:	000ffc08 	.word	0x000ffc08
 8008a28:	080195a8 	.word	0x080195a8
 8008a2c:	08019494 	.word	0x08019494
 8008a30:	08019728 	.word	0x08019728
 8008a34:	08019764 	.word	0x08019764
 8008a38:	080197a8 	.word	0x080197a8
 8008a3c:	0801a070 	.word	0x0801a070

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8008a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a44:	f113 0f02 	cmn.w	r3, #2
 8008a48:	f000 8093 	beq.w	8008b72 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3330      	adds	r3, #48	; 0x30
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fc fe4e 	bl	80056f2 <lfs_gstate_hasorphans>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d011      	beq.n	8008a80 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8008a5c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8008a60:	425b      	negs	r3, r3
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f001 fd41 	bl	800a4f0 <lfs_fs_preporphans>
 8008a6e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8008a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8008a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a7e:	e084      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8008a80:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008a84:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3330      	adds	r3, #48	; 0x30
 8008a8c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fc fe76 	bl	8005784 <lfs_gstate_hasmovehere>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01c      	beq.n	8008ad8 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fc fdb2 	bl	800560c <lfs_tag_id>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8008aae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ab2:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8008ab6:	4837      	ldr	r0, [pc, #220]	; (8008b94 <lfs_dir_orphaningcommit+0x5e4>)
 8008ab8:	9002      	str	r0, [sp, #8]
 8008aba:	9201      	str	r2, [sp, #4]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8008ac4:	4934      	ldr	r1, [pc, #208]	; (8008b98 <lfs_dir_orphaningcommit+0x5e8>)
 8008ac6:	4835      	ldr	r0, [pc, #212]	; (8008b9c <lfs_dir_orphaningcommit+0x5ec>)
 8008ac8:	f00e fe6c 	bl	80177a4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008acc:	2200      	movs	r2, #0
 8008ace:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 fd5c 	bl	800a590 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8008ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8008ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8008ae4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fc fd0a 	bl	8005502 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8008aee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8008af2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d007      	beq.n	8008b0a <lfs_dir_orphaningcommit+0x55a>
 8008afa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8008afe:	029b      	lsls	r3, r3, #10
 8008b00:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008b04:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008b08:	e000      	b.n	8008b0c <lfs_dir_orphaningcommit+0x55c>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0e:	2300      	movs	r3, #0
 8008b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008b16:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008b1a:	051a      	lsls	r2, r3, #20
 8008b1c:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <lfs_dir_orphaningcommit+0x5f0>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008b26:	633b      	str	r3, [r7, #48]	; 0x30
 8008b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8008b30:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008b34:	2000      	movs	r0, #0
 8008b36:	9001      	str	r0, [sp, #4]
 8008b38:	2002      	movs	r0, #2
 8008b3a:	9000      	str	r0, [sp, #0]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fa83 	bl	8008048 <lfs_dir_relocatingcommit>
 8008b42:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8008b46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fc fcbf 	bl	80054ce <lfs_pair_fromle32>
            if (state < 0) {
 8008b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da02      	bge.n	8008b5e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8008b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b5c:	e015      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8008b5e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8008b62:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8008b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8008b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f43f adfe 	beq.w	8008778 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8008b7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <lfs_dir_orphaningcommit+0x5d8>
 8008b84:	2303      	movs	r3, #3
 8008b86:	e000      	b.n	8008b8a <lfs_dir_orphaningcommit+0x5da>
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	37e0      	adds	r7, #224	; 0xe0
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bdb0      	pop	{r4, r5, r7, pc}
 8008b92:	bf00      	nop
 8008b94:	080195a8 	.word	0x080195a8
 8008b98:	08019494 	.word	0x08019494
 8008b9c:	08019764 	.word	0x08019764
 8008ba0:	000ffc08 	.word	0x000ffc08

08008ba4 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff fcf9 	bl	80085b0 <lfs_dir_orphaningcommit>
 8008bbe:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da01      	bge.n	8008bca <lfs_dir_commit+0x26>
        return orphans;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	e00d      	b.n	8008be6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f001 fdfe 	bl	800a7d4 <lfs_fs_deorphan>
 8008bd8:	6138      	str	r0, [r7, #16]
        if (err) {
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <lfs_dir_commit+0x40>
            return err;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	e000      	b.n	8008be6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8008bee:	b590      	push	{r4, r7, lr}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	3b08      	subs	r3, #8
 8008c06:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c10:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <lfs_ctz_index+0x2e>
        return 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e01c      	b.n	8008c56 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fb ffd8 	bl	8004bd6 <lfs_popc>
 8008c26:	4603      	mov	r3, r0
 8008c28:	3302      	adds	r3, #2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c36:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	1ad4      	subs	r4, r2, r3
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7fb ffc6 	bl	8004bd6 <lfs_popc>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	1ae2      	subs	r2, r4, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	601a      	str	r2, [r3, #0]
    return i;
 8008c54:	68fb      	ldr	r3, [r7, #12]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd90      	pop	{r4, r7, pc}

08008c5e <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8008c5e:	b590      	push	{r4, r7, lr}
 8008c60:	b08f      	sub	sp, #60	; 0x3c
 8008c62:	af04      	add	r7, sp, #16
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295
 8008c78:	601a      	str	r2, [r3, #0]
        *off = 0;
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
        return 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e053      	b.n	8008d2c <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	3b01      	subs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	f107 0314 	add.w	r3, r7, #20
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff ffac 	bl	8008bee <lfs_ctz_index>
 8008c96:	4603      	mov	r3, r0
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8008c9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff ffa4 	bl	8008bee <lfs_ctz_index>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8008caa:	e034      	b.n	8008d16 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8008cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fb ff6f 	bl	8004b98 <lfs_npw2>
 8008cba:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8008cbc:	1e5c      	subs	r4, r3, #1
 8008cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cc0:	f7fb ff7a 	bl	8004bb8 <lfs_ctz>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7fb ff2e 	bl	8004b2a <lfs_min>
 8008cce:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	2104      	movs	r1, #4
 8008cd8:	9103      	str	r1, [sp, #12]
 8008cda:	4639      	mov	r1, r7
 8008cdc:	9102      	str	r1, [sp, #8]
 8008cde:	9201      	str	r2, [sp, #4]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	2304      	movs	r3, #4
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7fb fff9 	bl	8004ce0 <lfs_bd_read>
 8008cee:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fb ff89 	bl	8004c0a <lfs_fromle32>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	603b      	str	r3, [r7, #0]
        if (err) {
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <lfs_ctz_find+0xa8>
            return err;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	e012      	b.n	8008d2c <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8008d06:	2201      	movs	r2, #1
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d8c6      	bhi.n	8008cac <lfs_ctz_find+0x4e>
    }

    *block = head;
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d22:	601a      	str	r2, [r3, #0]
    *off = pos;
 8008d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d28:	601a      	str	r2, [r3, #0]
    return 0;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	372c      	adds	r7, #44	; 0x2c
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}

08008d34 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b092      	sub	sp, #72	; 0x48
 8008d38:	af04      	add	r7, sp, #16
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008d42:	f107 0320 	add.w	r3, r7, #32
 8008d46:	4619      	mov	r1, r3
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7fc ff09 	bl	8005b60 <lfs_alloc>
 8008d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <lfs_ctz_extend+0x26>
            return err;
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	e0e9      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7fc fafc 	bl	800535c <lfs_bd_erase>
 8008d64:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d006      	beq.n	8008d7a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008d72:	f000 80cb 	beq.w	8008f0c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	e0d9      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8008d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d107      	bne.n	8008d90 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8008d80:	6a3a      	ldr	r2, [r7, #32]
 8008d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d84:	601a      	str	r2, [r3, #0]
                *off = 0;
 8008d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
                return 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e0ce      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8008d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d92:	3b01      	subs	r3, #1
 8008d94:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8008d96:	f107 031c 	add.w	r3, r7, #28
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7ff ff26 	bl	8008bee <lfs_ctz_index>
 8008da2:	4603      	mov	r3, r0
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d044      	beq.n	8008e42 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
 8008dbc:	e035      	b.n	8008e2a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	1ad2      	subs	r2, r2, r3
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9303      	str	r3, [sp, #12]
 8008dc8:	f107 0317 	add.w	r3, r7, #23
 8008dcc:	9302      	str	r3, [sp, #8]
 8008dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	2100      	movs	r1, #0
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7fb ff7f 	bl	8004ce0 <lfs_bd_read>
 8008de2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <lfs_ctz_extend+0xba>
                        return err;
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	e09f      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	2201      	movs	r2, #1
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	f107 0217 	add.w	r2, r7, #23
 8008df8:	9202      	str	r2, [sp, #8]
 8008dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dfc:	9201      	str	r2, [sp, #4]
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	2301      	movs	r3, #1
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7fc f9fc 	bl	8005204 <lfs_bd_prog>
 8008e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008e1a:	d101      	bne.n	8008e20 <lfs_ctz_extend+0xec>
                            goto relocate;
 8008e1c:	bf00      	nop
                    goto relocate;
 8008e1e:	e075      	b.n	8008f0c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8008e22:	e084      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	3301      	adds	r3, #1
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d3c5      	bcc.n	8008dbe <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8008e32:	6a3a      	ldr	r2, [r7, #32]
 8008e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e36:	601a      	str	r2, [r3, #0]
                *off = noff;
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e3c:	601a      	str	r2, [r3, #0]
                return 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e075      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	3301      	adds	r3, #1
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8008e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4a:	f7fb feb5 	bl	8004bb8 <lfs_ctz>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	3301      	adds	r3, #1
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8008e58:	2300      	movs	r3, #0
 8008e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e5c:	e049      	b.n	8008ef2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fb fedd 	bl	8004c20 <lfs_tole32>
 8008e66:	4603      	mov	r3, r0
 8008e68:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	2104      	movs	r1, #4
 8008e72:	9103      	str	r1, [sp, #12]
 8008e74:	f107 0118 	add.w	r1, r7, #24
 8008e78:	9102      	str	r1, [sp, #8]
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2301      	movs	r3, #1
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7fc f9bd 	bl	8005204 <lfs_bd_prog>
 8008e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fb febb 	bl	8004c0a <lfs_fromle32>
 8008e94:	4603      	mov	r3, r0
 8008e96:	61bb      	str	r3, [r7, #24]
                if (err) {
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008ea4:	d034      	beq.n	8008f10 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	e041      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	3b01      	subs	r3, #1
 8008eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d01b      	beq.n	8008eec <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb8:	0092      	lsls	r2, r2, #2
 8008eba:	2104      	movs	r1, #4
 8008ebc:	9103      	str	r1, [sp, #12]
 8008ebe:	f107 0118 	add.w	r1, r7, #24
 8008ec2:	9102      	str	r1, [sp, #8]
 8008ec4:	9201      	str	r2, [sp, #4]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	2304      	movs	r3, #4
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fb ff06 	bl	8004ce0 <lfs_bd_read>
 8008ed4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fb fe96 	bl	8004c0a <lfs_fromle32>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <lfs_ctz_extend+0x1b8>
                        return err;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	e020      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	3301      	adds	r3, #1
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d3b1      	bcc.n	8008e5e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8008efa:	6a3a      	ldr	r2, [r7, #32]
 8008efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efe:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	009a      	lsls	r2, r3, #2
 8008f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f06:	601a      	str	r2, [r3, #0]
            return 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e010      	b.n	8008f2e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8008f0c:	bf00      	nop
 8008f0e:	e000      	b.n	8008f12 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8008f10:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <lfs_ctz_extend+0x204>)
 8008f16:	9200      	str	r2, [sp, #0]
 8008f18:	f640 328a 	movw	r2, #2954	; 0xb8a
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <lfs_ctz_extend+0x208>)
 8008f1e:	4808      	ldr	r0, [pc, #32]	; (8008f40 <lfs_ctz_extend+0x20c>)
 8008f20:	f00e fc40 	bl	80177a4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7fb feb5 	bl	8004c96 <lfs_cache_drop>
    while (true) {
 8008f2c:	e709      	b.n	8008d42 <lfs_ctz_extend+0xe>
    }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3738      	adds	r7, #56	; 0x38
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	080195a8 	.word	0x080195a8
 8008f3c:	08019494 	.word	0x08019494
 8008f40:	08019628 	.word	0x08019628

08008f44 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b090      	sub	sp, #64	; 0x40
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <lfs_ctz_traverse+0x18>
        return 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e06d      	b.n	8009038 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	f107 031c 	add.w	r3, r7, #28
 8008f66:	4619      	mov	r1, r3
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff fe40 	bl	8008bee <lfs_ctz_index>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f78:	4798      	blx	r3
 8008f7a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <lfs_ctz_traverse+0x42>
            return err;
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	e058      	b.n	8009038 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <lfs_ctz_traverse+0x4c>
            return 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e053      	b.n	8009038 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	f1c3 0302 	rsb	r3, r3, #2
 8008f9a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8008f9e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8008fa2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8008fa4:	9303      	str	r3, [sp, #12]
 8008fa6:	f107 0314 	add.w	r3, r7, #20
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7fb fe90 	bl	8004ce0 <lfs_bd_read>
 8008fc0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fb fe20 	bl	8004c0a <lfs_fromle32>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fb fe1a 	bl	8004c0a <lfs_fromle32>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	61bb      	str	r3, [r7, #24]
        if (err) {
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <lfs_ctz_traverse+0xa0>
            return err;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	e029      	b.n	8009038 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fe8:	e013      	b.n	8009012 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ffe:	4798      	blx	r3
 8009000:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <lfs_ctz_traverse+0xc8>
                return err;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	e015      	b.n	8009038 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	3301      	adds	r3, #1
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	3b01      	subs	r3, #1
 8009016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009018:	429a      	cmp	r2, r3
 800901a:	dbe6      	blt.n	8008fea <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	3b01      	subs	r3, #1
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009026:	4413      	add	r3, r2
 8009028:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800902c:	603b      	str	r3, [r7, #0]
        index -= count;
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8009036:	e79c      	b.n	8008f72 <lfs_ctz_traverse+0x2e>
    }
}
 8009038:	4618      	mov	r0, r3
 800903a:	3730      	adds	r7, #48	; 0x30
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b09a      	sub	sp, #104	; 0x68
 8009044:	af02      	add	r7, sp, #8
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f001 fd6b 	bl	800ab34 <lfs_fs_forceconsistency>
 800905e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8009060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <lfs_file_rawopencfg+0x2a>
            return err;
 8009066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009068:	e1b0      	b.n	80093cc <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800906e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f103 0108 	add.w	r1, r3, #8
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	3304      	adds	r3, #4
 8009092:	1d3a      	adds	r2, r7, #4
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7fe f88d 	bl	80071b4 <lfs_dir_find>
 800909a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800909c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800909e:	2b00      	cmp	r3, #0
 80090a0:	da0c      	bge.n	80090bc <lfs_file_rawopencfg+0x7c>
 80090a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090a4:	f113 0f02 	cmn.w	r3, #2
 80090a8:	d105      	bne.n	80090b6 <lfs_file_rawopencfg+0x76>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	889b      	ldrh	r3, [r3, #4]
 80090ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d102      	bne.n	80090bc <lfs_file_rawopencfg+0x7c>
        err = tag;
 80090b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80090ba:	e17c      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2201      	movs	r2, #1
 80090c0:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7fc fc94 	bl	80059f2 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80090ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090cc:	f113 0f02 	cmn.w	r3, #2
 80090d0:	d14e      	bne.n	8009170 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d103      	bne.n	80090e4 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 80090dc:	f06f 0301 	mvn.w	r3, #1
 80090e0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80090e2:	e168      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f7 f882 	bl	80001f0 <strlen>
 80090ec:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d903      	bls.n	8009100 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80090f8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80090fc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80090fe:	e15a      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f103 0108 	add.w	r1, r3, #8
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	889b      	ldrh	r3, [r3, #4]
 800910a:	029b      	lsls	r3, r3, #10
 800910c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009116:	2300      	movs	r3, #0
 8009118:	633b      	str	r3, [r7, #48]	; 0x30
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	889b      	ldrh	r3, [r3, #4]
 800911e:	029a      	lsls	r2, r3, #10
 8009120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009122:	4313      	orrs	r3, r2
 8009124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	889b      	ldrh	r3, [r3, #4]
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800913e:	2300      	movs	r3, #0
 8009140:	643b      	str	r3, [r7, #64]	; 0x40
 8009142:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009146:	2303      	movs	r3, #3
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff fd2b 	bl	8008ba4 <lfs_dir_commit>
 800914e:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8009150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009152:	f113 0f1c 	cmn.w	r3, #28
 8009156:	d001      	beq.n	800915c <lfs_file_rawopencfg+0x11c>
 8009158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800915a:	e001      	b.n	8009160 <lfs_file_rawopencfg+0x120>
 800915c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009160:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8009162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8125 	bne.w	80093b4 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800916a:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <lfs_file_rawopencfg+0x394>)
 800916c:	65bb      	str	r3, [r7, #88]	; 0x58
 800916e:	e044      	b.n	80091fa <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800917a:	f06f 0310 	mvn.w	r3, #16
 800917e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8009180:	e119      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8009182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009184:	4618      	mov	r0, r3
 8009186:	f7fc fa17 	bl	80055b8 <lfs_tag_type3>
 800918a:	4603      	mov	r3, r0
 800918c:	2b01      	cmp	r3, #1
 800918e:	d003      	beq.n	8009198 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8009190:	f06f 0314 	mvn.w	r3, #20
 8009194:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8009196:	e10e      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091b0:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
 80091be:	e01c      	b.n	80091fa <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	889b      	ldrh	r3, [r3, #4]
 80091ca:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80091cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091d0:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80091d8:	9200      	str	r2, [sp, #0]
 80091da:	4a7f      	ldr	r2, [pc, #508]	; (80093d8 <lfs_file_rawopencfg+0x398>)
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7fc fe27 	bl	8005e30 <lfs_dir_get>
 80091e2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80091e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da02      	bge.n	80091f0 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 80091ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80091ee:	e0e2      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	3328      	adds	r3, #40	; 0x28
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fc fb55 	bl	80058a4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80091fa:	2300      	movs	r3, #0
 80091fc:	657b      	str	r3, [r7, #84]	; 0x54
 80091fe:	e063      	b.n	80092c8 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d03c      	beq.n	8009286 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800922a:	051a      	lsls	r2, r3, #20
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	889b      	ldrh	r3, [r3, #4]
 8009230:	029b      	lsls	r3, r3, #10
 8009232:	ea42 0103 	orr.w	r1, r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923a:	6858      	ldr	r0, [r3, #4]
 800923c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800923e:	4613      	mov	r3, r2
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4403      	add	r3, r0
 8009248:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800924a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009252:	6859      	ldr	r1, [r3, #4]
 8009254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009256:	4613      	mov	r3, r2
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	4a5d      	ldr	r2, [pc, #372]	; (80093dc <lfs_file_rawopencfg+0x39c>)
 8009268:	4621      	mov	r1, r4
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7fc fde0 	bl	8005e30 <lfs_dir_get>
 8009270:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8009272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009274:	2b00      	cmp	r3, #0
 8009276:	da06      	bge.n	8009286 <lfs_file_rawopencfg+0x246>
 8009278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800927a:	f113 0f02 	cmn.w	r3, #2
 800927e:	d002      	beq.n	8009286 <lfs_file_rawopencfg+0x246>
                err = res;
 8009280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009282:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8009284:	e097      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009296:	6859      	ldr	r1, [r3, #4]
 8009298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800929a:	4613      	mov	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d903      	bls.n	80092b6 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80092ae:	f06f 031b 	mvn.w	r3, #27
 80092b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80092b4:	e07f      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80092c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c4:	3301      	adds	r3, #1
 80092c6:	657b      	str	r3, [r7, #84]	; 0x54
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d395      	bcc.n	8009200 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80092e8:	e010      	b.n	800930c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fb fcb9 	bl	8004c68 <lfs_malloc>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8009304:	f06f 030b 	mvn.w	r3, #11
 8009308:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800930a:	e054      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	3340      	adds	r3, #64	; 0x40
 8009310:	4619      	mov	r1, r3
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7fb fcce 	bl	8004cb4 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8009318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800931a:	4618      	mov	r0, r3
 800931c:	f7fc f94c 	bl	80055b8 <lfs_tag_type3>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	f240 2301 	movw	r3, #513	; 0x201
 8009328:	429a      	cmp	r2, r3
 800932a:	d141      	bne.n	80093b0 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f06f 0201 	mvn.w	r2, #1
 8009332:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8009334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009336:	4618      	mov	r0, r3
 8009338:	f7fc f978 	bl	800562c <lfs_tag_size>
 800933c:	4602      	mov	r2, r0
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d020      	beq.n	80093b0 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	889b      	ldrh	r3, [r3, #4]
 8009378:	029c      	lsls	r4, r3, #10
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8009382:	4618      	mov	r0, r3
 8009384:	f7fb fbd1 	bl	8004b2a <lfs_min>
 8009388:	4603      	mov	r3, r0
 800938a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800938c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4613      	mov	r3, r2
 8009398:	4a0f      	ldr	r2, [pc, #60]	; (80093d8 <lfs_file_rawopencfg+0x398>)
 800939a:	4629      	mov	r1, r5
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7fc fd47 	bl	8005e30 <lfs_dir_get>
 80093a2:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80093a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da02      	bge.n	80093b0 <lfs_file_rawopencfg+0x370>
                err = res;
 80093aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80093ae:	e002      	b.n	80093b6 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e00b      	b.n	80093cc <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80093b4:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f823 	bl	8009410 <lfs_file_rawclose>
    return err;
 80093ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3760      	adds	r7, #96	; 0x60
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bdb0      	pop	{r4, r5, r7, pc}
 80093d4:	20100000 	.word	0x20100000
 80093d8:	700ffc00 	.word	0x700ffc00
 80093dc:	7ffffc00 	.word	0x7ffffc00

080093e0 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80093ee:	4b07      	ldr	r3, [pc, #28]	; (800940c <lfs_file_rawopen+0x2c>)
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff fe21 	bl	8009040 <lfs_file_rawopencfg>
 80093fe:	6178      	str	r0, [r7, #20]
    return err;
 8009400:	697b      	ldr	r3, [r7, #20]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	0801a088 	.word	0x0801a088

08009410 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f9e5 	bl	80097ec <lfs_file_rawsync>
 8009422:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fc fac1 	bl	80059ae <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943a:	4618      	mov	r0, r3
 800943c:	f7fb fc20 	bl	8004c80 <lfs_free>
    }

    return err;
 8009440:	68fb      	ldr	r3, [r7, #12]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b08d      	sub	sp, #52	; 0x34
 8009450:	af06      	add	r7, sp, #24
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7fc fb7f 	bl	8005b60 <lfs_alloc>
 8009462:	6138      	str	r0, [r7, #16]
        if (err) {
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <lfs_file_relocate+0x22>
            return err;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	e0bb      	b.n	80095e6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7fb ff72 	bl	800535c <lfs_bd_erase>
 8009478:	6138      	str	r0, [r7, #16]
        if (err) {
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d006      	beq.n	800948e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009486:	f000 809b 	beq.w	80095c0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	e0ab      	b.n	80095e6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	e069      	b.n	8009568 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d027      	beq.n	80094f0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f103 0008 	add.w	r0, r3, #8
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	889b      	ldrh	r3, [r3, #4]
 80094b8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80094ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094c2:	2101      	movs	r1, #1
 80094c4:	9105      	str	r1, [sp, #20]
 80094c6:	f107 010b 	add.w	r1, r7, #11
 80094ca:	9104      	str	r1, [sp, #16]
 80094cc:	6979      	ldr	r1, [r7, #20]
 80094ce:	9103      	str	r1, [sp, #12]
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	4b47      	ldr	r3, [pc, #284]	; (80095f0 <lfs_file_relocate+0x1a4>)
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	9200      	str	r2, [sp, #0]
 80094d8:	4623      	mov	r3, r4
 80094da:	2200      	movs	r2, #0
 80094dc:	4601      	mov	r1, r0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fc fcc1 	bl	8005e66 <lfs_dir_getread>
 80094e4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01e      	beq.n	800952a <lfs_file_relocate+0xde>
                    return err;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	e07a      	b.n	80095e6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80094f6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	1ad4      	subs	r4, r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	2201      	movs	r2, #1
 8009506:	9203      	str	r2, [sp, #12]
 8009508:	f107 020b 	add.w	r2, r7, #11
 800950c:	9202      	str	r2, [sp, #8]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	9201      	str	r2, [sp, #4]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4623      	mov	r3, r4
 8009516:	4602      	mov	r2, r0
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fb fbe1 	bl	8004ce0 <lfs_bd_read>
 800951e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <lfs_file_relocate+0xde>
                    return err;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e05d      	b.n	80095e6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f103 0110 	add.w	r1, r3, #16
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	9203      	str	r2, [sp, #12]
 8009538:	f107 020b 	add.w	r2, r7, #11
 800953c:	9202      	str	r2, [sp, #8]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	9201      	str	r2, [sp, #4]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	2301      	movs	r3, #1
 8009546:	4602      	mov	r2, r0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fb fe5b 	bl	8005204 <lfs_bd_prog>
 800954e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800955c:	d032      	beq.n	80095c4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	e041      	b.n	80095e6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	3301      	adds	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	429a      	cmp	r2, r3
 8009570:	d390      	bcc.n	8009494 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69d9      	ldr	r1, [r3, #28]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	461a      	mov	r2, r3
 8009582:	f00d fd61 	bl	8017048 <memcpy>
        file->cache.block = lfs->pcache.block;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695a      	ldr	r2, [r3, #20]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699a      	ldr	r2, [r3, #24]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3310      	adds	r3, #16
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7fb fb85 	bl	8004cb4 <lfs_cache_zero>

        file->block = nblock;
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	e012      	b.n	80095e6 <lfs_file_relocate+0x19a>
                goto relocate;
 80095c0:	bf00      	nop
 80095c2:	e000      	b.n	80095c6 <lfs_file_relocate+0x17a>
                    goto relocate;
 80095c4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <lfs_file_relocate+0x1a8>)
 80095ca:	9200      	str	r2, [sp, #0]
 80095cc:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80095d0:	4909      	ldr	r1, [pc, #36]	; (80095f8 <lfs_file_relocate+0x1ac>)
 80095d2:	480a      	ldr	r0, [pc, #40]	; (80095fc <lfs_file_relocate+0x1b0>)
 80095d4:	f00e f8e6 	bl	80177a4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3310      	adds	r3, #16
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fb fb59 	bl	8004c96 <lfs_cache_drop>
    while (true) {
 80095e4:	e737      	b.n	8009456 <lfs_file_relocate+0xa>
    }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd90      	pop	{r4, r7, pc}
 80095ee:	bf00      	nop
 80095f0:	fff7fc00 	.word	0xfff7fc00
 80095f4:	080195a8 	.word	0x080195a8
 80095f8:	08019494 	.word	0x08019494
 80095fc:	08019628 	.word	0x08019628

08009600 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fc fa43 	bl	8005a9e <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ff16 	bl	800944c <lfs_file_relocate>
 8009620:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <lfs_file_outline+0x2c>
        return err;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	e006      	b.n	800963a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009630:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b09f      	sub	sp, #124	; 0x7c
 8009648:	af02      	add	r7, sp, #8
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	3340      	adds	r3, #64	; 0x40
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fb fb12 	bl	8004c96 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80a4 	beq.w	80097d4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009690:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d176      	bne.n	800978c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	2254      	movs	r2, #84	; 0x54
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f00d fcdc 	bl	8017064 <memset>
                .ctz.head = file->ctz.head,
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80096b0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096b8:	2301      	movs	r3, #1
 80096ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80096c0:	643b      	str	r3, [r7, #64]	; 0x40
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80096c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7fb fadf 	bl	8004c96 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80096d8:	e02b      	b.n	8009732 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80096da:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80096de:	f107 010c 	add.w	r1, r7, #12
 80096e2:	2301      	movs	r3, #1
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f90d 	bl	8009904 <lfs_file_flushedread>
 80096ea:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80096ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da01      	bge.n	80096f6 <lfs_file_flush+0xb2>
                    return res;
 80096f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f4:	e06f      	b.n	80097d6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80096f6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80096fa:	2301      	movs	r3, #1
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa08 	bl	8009b14 <lfs_file_flushedwrite>
 8009704:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8009706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009708:	2b00      	cmp	r3, #0
 800970a:	da01      	bge.n	8009710 <lfs_file_flush+0xcc>
                    return res;
 800970c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970e:	e062      	b.n	80097d6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d00b      	beq.n	8009732 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	3340      	adds	r3, #64	; 0x40
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fb fab7 	bl	8004c96 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fb fab2 	bl	8004c96 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	429a      	cmp	r2, r3
 800973c:	d3cd      	bcc.n	80096da <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	2301      	movs	r3, #1
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7fb fcad 	bl	80050a8 <lfs_bd_flush>
 800974e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8009750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009752:	2b00      	cmp	r3, #0
 8009754:	d026      	beq.n	80097a4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8009756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009758:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800975c:	d001      	beq.n	8009762 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800975e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009760:	e039      	b.n	80097d6 <lfs_file_flush+0x192>
                        goto relocate;
 8009762:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	4a1d      	ldr	r2, [pc, #116]	; (80097e0 <lfs_file_flush+0x19c>)
 800976a:	9200      	str	r2, [sp, #0]
 800976c:	f640 520f 	movw	r2, #3343	; 0xd0f
 8009770:	491c      	ldr	r1, [pc, #112]	; (80097e4 <lfs_file_flush+0x1a0>)
 8009772:	481d      	ldr	r0, [pc, #116]	; (80097e8 <lfs_file_flush+0x1a4>)
 8009774:	f00e f816 	bl	80177a4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fe66 	bl	800944c <lfs_file_relocate>
 8009780:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8009782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0da      	beq.n	800973e <lfs_file_flush+0xfa>
                    return err;
 8009788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800978a:	e024      	b.n	80097d6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7fb f9b7 	bl	8004b0a <lfs_max>
 800979c:	4602      	mov	r2, r0
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	635a      	str	r2, [r3, #52]	; 0x34
 80097a2:	e000      	b.n	80097a6 <lfs_file_flush+0x162>
                break;
 80097a4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097d2:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3774      	adds	r7, #116	; 0x74
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd90      	pop	{r4, r7, pc}
 80097de:	bf00      	nop
 80097e0:	080195a8 	.word	0x080195a8
 80097e4:	08019494 	.word	0x08019494
 80097e8:	08019628 	.word	0x08019628

080097ec <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b090      	sub	sp, #64	; 0x40
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8009802:	2300      	movs	r3, #0
 8009804:	e07a      	b.n	80098fc <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ff1b 	bl	8009644 <lfs_file_flush>
 800980e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	e06a      	b.n	80098fc <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d063      	beq.n	80098fa <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	4618      	mov	r0, r3
 8009838:	f7fb fdd7 	bl	80053ea <lfs_pair_isnull>
 800983c:	4603      	mov	r3, r0
 800983e:	f083 0301 	eor.w	r3, r3, #1
 8009842:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8009844:	2b00      	cmp	r3, #0
 8009846:	d058      	beq.n	80098fa <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d009      	beq.n	8009868 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8009854:	f240 2301 	movw	r3, #513	; 0x201
 8009858:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	637b      	str	r3, [r7, #52]	; 0x34
 8009866:	e014      	b.n	8009892 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8009868:	f240 2302 	movw	r3, #514	; 0x202
 800986c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009874:	3228      	adds	r2, #40	; 0x28
 8009876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800987a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800987e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009882:	4618      	mov	r0, r3
 8009884:	f7fc f826 	bl	80058d4 <lfs_ctz_tole32>
            buffer = &ctz;
 8009888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800988e:	2308      	movs	r3, #8
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	f103 0108 	add.w	r1, r3, #8
 8009898:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800989a:	051a      	lsls	r2, r3, #20
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	889b      	ldrh	r3, [r3, #4]
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	431a      	orrs	r2, r3
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	4313      	orrs	r3, r2
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	889b      	ldrh	r3, [r3, #4]
 80098b2:	029a      	lsls	r2, r3, #10
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80098c0:	623b      	str	r3, [r7, #32]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
 80098ca:	f107 0218 	add.w	r2, r7, #24
 80098ce:	2302      	movs	r3, #2
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff f967 	bl	8008ba4 <lfs_dir_commit>
 80098d6:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	e006      	b.n	80098fc <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3740      	adds	r7, #64	; 0x40
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009904:	b5b0      	push	{r4, r5, r7, lr}
 8009906:	b090      	sub	sp, #64	; 0x40
 8009908:	af06      	add	r7, sp, #24
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	429a      	cmp	r2, r3
 8009924:	d301      	bcc.n	800992a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8009926:	2300      	movs	r3, #0
 8009928:	e0b7      	b.n	8009a9a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	4619      	mov	r1, r3
 8009936:	6838      	ldr	r0, [r7, #0]
 8009938:	f7fb f8f7 	bl	8004b2a <lfs_min>
 800993c:	6038      	str	r0, [r7, #0]
    nsize = size;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8009942:	e0a5      	b.n	8009a90 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009958:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800995a:	429a      	cmp	r2, r3
 800995c:	d130      	bne.n	80099c0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d11c      	bne.n	80099a4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	3138      	adds	r1, #56	; 0x38
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	303c      	adds	r0, #60	; 0x3c
 8009984:	9003      	str	r0, [sp, #12]
 8009986:	9102      	str	r1, [sp, #8]
 8009988:	9201      	str	r2, [sp, #4]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	462b      	mov	r3, r5
 800998e:	4622      	mov	r2, r4
 8009990:	2100      	movs	r1, #0
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff f963 	bl	8008c5e <lfs_ctz_find>
 8009998:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <lfs_file_flushedread+0xb0>
                    return err;
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	e07a      	b.n	8009a9a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f06f 0201 	mvn.w	r2, #1
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c4:	69da      	ldr	r2, [r3, #28]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	4619      	mov	r1, r3
 80099ce:	6a38      	ldr	r0, [r7, #32]
 80099d0:	f7fb f8ab 	bl	8004b2a <lfs_min>
 80099d4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d026      	beq.n	8009a30 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f103 0408 	add.w	r4, r3, #8
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80099f2:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	889b      	ldrh	r3, [r3, #4]
 80099f8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80099fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009a06:	69b8      	ldr	r0, [r7, #24]
 8009a08:	9005      	str	r0, [sp, #20]
 8009a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a0c:	9004      	str	r0, [sp, #16]
 8009a0e:	9103      	str	r1, [sp, #12]
 8009a10:	9302      	str	r3, [sp, #8]
 8009a12:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <lfs_file_flushedread+0x1a0>)
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	9200      	str	r2, [sp, #0]
 8009a18:	462b      	mov	r3, r5
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7fc fa21 	bl	8005e66 <lfs_dir_getread>
 8009a24:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01d      	beq.n	8009a68 <lfs_file_flushedread+0x164>
                return err;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	e034      	b.n	8009a9a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8009a3a:	69dc      	ldr	r4, [r3, #28]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	9103      	str	r1, [sp, #12]
 8009a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4a:	9102      	str	r1, [sp, #8]
 8009a4c:	9201      	str	r2, [sp, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4623      	mov	r3, r4
 8009a52:	4602      	mov	r2, r0
 8009a54:	2100      	movs	r1, #0
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7fb f942 	bl	8004ce0 <lfs_bd_read>
 8009a5c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <lfs_file_flushedread+0x164>
                return err;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	e018      	b.n	8009a9a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	441a      	add	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8009a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	4413      	add	r3, r2
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8009a88:	6a3a      	ldr	r2, [r7, #32]
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f47f af56 	bne.w	8009944 <lfs_file_flushedread+0x40>
    }

    return size;
 8009a98:	683b      	ldr	r3, [r7, #0]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3728      	adds	r7, #40	; 0x28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	fff7fc00 	.word	0xfff7fc00

08009aa8 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <lfs_file_rawread+0x28>
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <lfs_file_rawread+0x60>)
 8009ac4:	4a11      	ldr	r2, [pc, #68]	; (8009b0c <lfs_file_rawread+0x64>)
 8009ac6:	f640 519a 	movw	r1, #3482	; 0xd9a
 8009aca:	4811      	ldr	r0, [pc, #68]	; (8009b10 <lfs_file_rawread+0x68>)
 8009acc:	f00d f94a 	bl	8016d64 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d009      	beq.n	8009af0 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fdb0 	bl	8009644 <lfs_file_flush>
 8009ae4:	6178      	str	r0, [r7, #20]
        if (err) {
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <lfs_file_rawread+0x48>
            return err;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	e006      	b.n	8009afe <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff ff04 	bl	8009904 <lfs_file_flushedread>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	080197d0 	.word	0x080197d0
 8009b0c:	0801a094 	.word	0x0801a094
 8009b10:	08019494 	.word	0x08019494

08009b14 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009b14:	b5b0      	push	{r4, r5, r7, lr}
 8009b16:	b090      	sub	sp, #64	; 0x40
 8009b18:	af04      	add	r7, sp, #16
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 810e 	beq.w	8009d54 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	441a      	add	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	4619      	mov	r1, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	f7fa ffdf 	bl	8004b0a <lfs_max>
 8009b4c:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8009b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8009b64:	08db      	lsrs	r3, r3, #3
 8009b66:	e003      	b.n	8009b70 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b6c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8009b6e:	08db      	lsrs	r3, r3, #3
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f7fa ffd9 	bl	8004b2a <lfs_min>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8009b80:	f7fa ffd3 	bl	8004b2a <lfs_min>
 8009b84:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8009b86:	429c      	cmp	r4, r3
 8009b88:	f240 80e4 	bls.w	8009d54 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fd36 	bl	8009600 <lfs_file_outline>
 8009b94:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80db 	beq.w	8009d54 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	e0d7      	b.n	8009d5e <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d16d      	bne.n	8009ca4 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d159      	bne.n	8009c88 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d12f      	bne.n	8009c40 <lfs_file_flushedwrite+0x12c>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02b      	beq.n	8009c40 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8009c00:	2000      	movs	r0, #0
 8009c02:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009c04:	f107 0010 	add.w	r0, r7, #16
 8009c08:	9003      	str	r0, [sp, #12]
 8009c0a:	9102      	str	r1, [sp, #8]
 8009c0c:	9201      	str	r2, [sp, #4]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	462b      	mov	r3, r5
 8009c12:	4622      	mov	r2, r4
 8009c14:	2100      	movs	r1, #0
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff f821 	bl	8008c5e <lfs_ctz_find>
 8009c1c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c28:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	e094      	b.n	8009d5e <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3340      	adds	r3, #64	; 0x40
 8009c38:	4619      	mov	r1, r3
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7fb f83a 	bl	8004cb4 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7fb ff2c 	bl	8005a9e <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009c4c:	68fc      	ldr	r4, [r7, #12]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	3238      	adds	r2, #56	; 0x38
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	313c      	adds	r1, #60	; 0x3c
 8009c5e:	9102      	str	r1, [sp, #8]
 8009c60:	9201      	str	r2, [sp, #4]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462b      	mov	r3, r5
 8009c66:	4622      	mov	r2, r4
 8009c68:	4601      	mov	r1, r0
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff f862 	bl	8008d34 <lfs_ctz_extend>
 8009c70:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	e06a      	b.n	8009d5e <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f06f 0201 	mvn.w	r2, #1
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ca8:	69da      	ldr	r2, [r3, #28]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb4:	f7fa ff39 	bl	8004b2a <lfs_min>
 8009cb8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009cc0:	68fc      	ldr	r4, [r7, #12]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009cca:	69b9      	ldr	r1, [r7, #24]
 8009ccc:	9103      	str	r1, [sp, #12]
 8009cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd0:	9102      	str	r1, [sp, #8]
 8009cd2:	9201      	str	r2, [sp, #4]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4601      	mov	r1, r0
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7fb fa91 	bl	8005204 <lfs_bd_prog>
 8009ce2:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d01c      	beq.n	8009d24 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009cf0:	d007      	beq.n	8009d02 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	e02d      	b.n	8009d5e <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8009d02:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7ff fba0 	bl	800944c <lfs_file_relocate>
 8009d0c:	6178      	str	r0, [r7, #20]
            if (err) {
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0d2      	beq.n	8009cba <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	e01c      	b.n	8009d5e <lfs_file_flushedwrite+0x24a>
            break;
 8009d24:	bf00      	nop
            }
        }

        file->pos += diff;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	441a      	add	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	441a      	add	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8009d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	4413      	add	r3, r2
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8009d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7fb fea5 	bl	8005a9e <lfs_alloc_ack>
    while (nsize > 0) {
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f47f af29 	bne.w	8009bae <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8009d5c:	683b      	ldr	r3, [r7, #0]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3730      	adds	r7, #48	; 0x30
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009d68 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08a      	sub	sp, #40	; 0x28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <lfs_file_rawwrite+0x28>
 8009d82:	4b38      	ldr	r3, [pc, #224]	; (8009e64 <lfs_file_rawwrite+0xfc>)
 8009d84:	4a38      	ldr	r2, [pc, #224]	; (8009e68 <lfs_file_rawwrite+0x100>)
 8009d86:	f640 6105 	movw	r1, #3589	; 0xe05
 8009d8a:	4838      	ldr	r0, [pc, #224]	; (8009e6c <lfs_file_rawwrite+0x104>)
 8009d8c:	f00c ffea 	bl	8016d64 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fc50 	bl	8009644 <lfs_file_flush>
 8009da4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <lfs_file_rawwrite+0x48>
            return err;
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	e055      	b.n	8009e5c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <lfs_file_rawwrite+0x68>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d203      	bcs.n	8009dd0 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d902      	bls.n	8009de6 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8009de0:	f06f 031a 	mvn.w	r3, #26
 8009de4:	e03a      	b.n	8009e5c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d121      	bne.n	8009e36 <lfs_file_rawwrite+0xce>
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d91b      	bls.n	8009e36 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e02:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8009e0c:	e00e      	b.n	8009e2c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
 8009e12:	f107 0217 	add.w	r2, r7, #23
 8009e16:	2301      	movs	r3, #1
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7ff fe7a 	bl	8009b14 <lfs_file_flushedwrite>
 8009e20:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da01      	bge.n	8009e2c <lfs_file_rawwrite+0xc4>
                return res;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	e017      	b.n	8009e5c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e30:	6a3a      	ldr	r2, [r7, #32]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d8eb      	bhi.n	8009e0e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	68b9      	ldr	r1, [r7, #8]
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fe69 	bl	8009b14 <lfs_file_flushedwrite>
 8009e42:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da01      	bge.n	8009e4e <lfs_file_rawwrite+0xe6>
        return nsize;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	e006      	b.n	8009e5c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3728      	adds	r7, #40	; 0x28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	08019800 	.word	0x08019800
 8009e68:	0801a0a8 	.word	0x0801a0a8
 8009e6c:	08019494 	.word	0x08019494

08009e70 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08c      	sub	sp, #48	; 0x30
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <lfs_file_rawseek+0x20>
        npos = off;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e8e:	e025      	b.n	8009edc <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d10f      	bne.n	8009eb6 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da02      	bge.n	8009eaa <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8009ea4:	f06f 0315 	mvn.w	r3, #21
 8009ea8:	e067      	b.n	8009f7a <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb4:	e012      	b.n	8009edc <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d10f      	bne.n	8009edc <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 f85f 	bl	8009f82 <lfs_file_rawsize>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4413      	add	r3, r2
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	da02      	bge.n	8009ed8 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8009ed2:	f06f 0315 	mvn.w	r3, #21
 8009ed6:	e050      	b.n	8009f7a <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d902      	bls.n	8009eec <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8009ee6:	f06f 0315 	mvn.w	r3, #21
 8009eea:	e046      	b.n	8009f7a <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d101      	bne.n	8009efa <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	e03f      	b.n	8009f7a <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d12b      	bne.n	8009f5e <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	61bb      	str	r3, [r7, #24]
 8009f0c:	f107 0318 	add.w	r3, r7, #24
 8009f10:	4619      	mov	r1, r3
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7fe fe6b 	bl	8008bee <lfs_ctz_index>
 8009f18:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8009f1e:	f107 0314 	add.w	r3, r7, #20
 8009f22:	4619      	mov	r1, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fe fe62 	bl	8008bee <lfs_ctz_index>
 8009f2a:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8009f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d114      	bne.n	8009f5e <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d80f      	bhi.n	8009f5e <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f46:	441a      	add	r2, r3
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d907      	bls.n	8009f5e <lfs_file_rawseek+0xee>
            file->pos = npos;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f52:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	e00d      	b.n	8009f7a <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fb6f 	bl	8009644 <lfs_file_flush>
 8009f66:	61f8      	str	r0, [r7, #28]
    if (err) {
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <lfs_file_rawseek+0x102>
        return err;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	e003      	b.n	8009f7a <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f76:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3730      	adds	r7, #48	; 0x30
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d009      	beq.n	8009fac <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f7fa fdb1 	bl	8004b0a <lfs_max>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	e001      	b.n	8009fb0 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009fb8:	b590      	push	{r4, r7, lr}
 8009fba:	b0a1      	sub	sp, #132	; 0x84
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fca:	2220      	movs	r2, #32
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f00d f848 	bl	8017064 <memset>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009fd8:	4a9b      	ldr	r2, [pc, #620]	; (800a248 <lfs_fs_rawtraverse+0x290>)
 8009fda:	f107 031c 	add.w	r3, r7, #28
 8009fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fe2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009fee:	e0c1      	b.n	800a174 <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009ff0:	f107 021c 	add.w	r2, r7, #28
 8009ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ff8:	3318      	adds	r3, #24
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fb fa39 	bl	8005474 <lfs_pair_issync>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d009      	beq.n	800a01c <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 800a008:	4b90      	ldr	r3, [pc, #576]	; (800a24c <lfs_fs_rawtraverse+0x294>)
 800a00a:	f241 12d2 	movw	r2, #4562	; 0x11d2
 800a00e:	4990      	ldr	r1, [pc, #576]	; (800a250 <lfs_fs_rawtraverse+0x298>)
 800a010:	4890      	ldr	r0, [pc, #576]	; (800a254 <lfs_fs_rawtraverse+0x29c>)
 800a012:	f00d fbc7 	bl	80177a4 <iprintf>
            return LFS_ERR_CORRUPT;
 800a016:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a01a:	e110      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 800a01c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a01e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a020:	429a      	cmp	r2, r3
 800a022:	d108      	bne.n	800a036 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 800a024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a026:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 800a028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a02a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 800a030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 800a036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a038:	3301      	adds	r3, #1
 800a03a:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 800a03c:	2300      	movs	r3, #0
 800a03e:	667b      	str	r3, [r7, #100]	; 0x64
 800a040:	e014      	b.n	800a06c <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 800a042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a044:	3306      	adds	r3, #6
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a04c:	4413      	add	r3, r2
 800a04e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4611      	mov	r1, r2
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 800a05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <lfs_fs_rawtraverse+0xae>
                return err;
 800a062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a064:	e0eb      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 800a066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a068:	3301      	adds	r3, #1
 800a06a:	667b      	str	r3, [r7, #100]	; 0x64
 800a06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a06e:	2b01      	cmp	r3, #1
 800a070:	dde7      	ble.n	800a042 <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800a072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a076:	f103 0218 	add.w	r2, r3, #24
 800a07a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7fc ffff 	bl	8007084 <lfs_dir_fetch>
 800a086:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 800a088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <lfs_fs_rawtraverse+0xda>
            return err;
 800a08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a090:	e0d5      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800a092:	2300      	movs	r3, #0
 800a094:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a098:	e067      	b.n	800a16a <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800a09a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a09e:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800a0a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0a4:	f043 0308 	orr.w	r3, r3, #8
 800a0a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a0ac:	f107 0214 	add.w	r2, r7, #20
 800a0b0:	9200      	str	r2, [sp, #0]
 800a0b2:	4a69      	ldr	r2, [pc, #420]	; (800a258 <lfs_fs_rawtraverse+0x2a0>)
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7fb febb 	bl	8005e30 <lfs_dir_get>
 800a0ba:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da05      	bge.n	800a0ce <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 800a0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c4:	f113 0f02 	cmn.w	r3, #2
 800a0c8:	d049      	beq.n	800a15e <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 800a0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0cc:	e0b7      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 800a0ce:	f107 0314 	add.w	r3, r7, #20
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fb fbe6 	bl	80058a4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800a0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fb fa6c 	bl	80055b8 <lfs_tag_type3>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f240 2302 	movw	r3, #514	; 0x202
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d113      	bne.n	800a114 <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	6978      	ldr	r0, [r7, #20]
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	9202      	str	r2, [sp, #8]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	9201      	str	r2, [sp, #4]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	460a      	mov	r2, r1
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7fe ff1e 	bl	8008f44 <lfs_ctz_traverse>
 800a108:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d027      	beq.n	800a160 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 800a110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a112:	e094      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d022      	beq.n	800a160 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800a11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fb fa4b 	bl	80055b8 <lfs_tag_type3>
 800a122:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800a124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a128:	d11a      	bne.n	800a160 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 800a12a:	2300      	movs	r3, #0
 800a12c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12e:	e012      	b.n	800a156 <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 800a130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	f107 0214 	add.w	r2, r7, #20
 800a138:	4413      	add	r3, r2
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4611      	mov	r1, r2
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
 800a144:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 800a146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <lfs_fs_rawtraverse+0x198>
                        return err;
 800a14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a14e:	e076      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 800a150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a152:	3301      	adds	r3, #1
 800a154:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a158:	2b01      	cmp	r3, #1
 800a15a:	dde9      	ble.n	800a130 <lfs_fs_rawtraverse+0x178>
 800a15c:	e000      	b.n	800a160 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 800a15e:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800a160:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a164:	3301      	adds	r3, #1
 800a166:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a16a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a16c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800a170:	429a      	cmp	r2, r3
 800a172:	d392      	bcc.n	800a09a <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 800a174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a178:	3318      	adds	r3, #24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fb f935 	bl	80053ea <lfs_pair_isnull>
 800a180:	4603      	mov	r3, r0
 800a182:	f083 0301 	eor.w	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f47f af31 	bne.w	8009ff0 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a192:	65bb      	str	r3, [r7, #88]	; 0x58
 800a194:	e04f      	b.n	800a236 <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800a196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a198:	799b      	ldrb	r3, [r3, #6]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d147      	bne.n	800a22e <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800a19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01d      	beq.n	800a1e6 <lfs_fs_rawtraverse+0x22e>
 800a1aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d117      	bne.n	800a1e6 <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800a1b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800a1c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	9202      	str	r2, [sp, #8]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	9201      	str	r2, [sp, #4]
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7fe feb5 	bl	8008f44 <lfs_ctz_traverse>
 800a1da:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800a1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <lfs_fs_rawtraverse+0x22e>
                return err;
 800a1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1e4:	e02b      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800a1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01e      	beq.n	800a230 <lfs_fs_rawtraverse+0x278>
 800a1f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d118      	bne.n	800a230 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800a1fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a200:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a208:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a20a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	9201      	str	r2, [sp, #4]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4623      	mov	r3, r4
 800a21a:	4602      	mov	r2, r0
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7fe fe91 	bl	8008f44 <lfs_ctz_traverse>
 800a222:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 800a224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <lfs_fs_rawtraverse+0x278>
                return err;
 800a22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a22c:	e007      	b.n	800a23e <lfs_fs_rawtraverse+0x286>
            continue;
 800a22e:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800a230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	65bb      	str	r3, [r7, #88]	; 0x58
 800a236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1ac      	bne.n	800a196 <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3774      	adds	r7, #116	; 0x74
 800a242:	46bd      	mov	sp, r7
 800a244:	bd90      	pop	{r4, r7, pc}
 800a246:	bf00      	nop
 800a248:	080195ec 	.word	0x080195ec
 800a24c:	080195a8 	.word	0x080195a8
 800a250:	08019494 	.word	0x08019494
 800a254:	08019ac0 	.word	0x08019ac0
 800a258:	700ffc00 	.word	0x700ffc00

0800a25c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	; 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a274:	4a2d      	ldr	r2, [pc, #180]	; (800a32c <lfs_fs_pred+0xd0>)
 800a276:	f107 0314 	add.w	r3, r7, #20
 800a27a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a27e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800a282:	2301      	movs	r3, #1
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 800a286:	2301      	movs	r3, #1
 800a288:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 800a28a:	e03e      	b.n	800a30a <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3318      	adds	r3, #24
 800a290:	f107 0214 	add.w	r2, r7, #20
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7fb f8ec 	bl	8005474 <lfs_pair_issync>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <lfs_fs_pred+0xd4>)
 800a2a4:	f241 2230 	movw	r2, #4656	; 0x1230
 800a2a8:	4922      	ldr	r1, [pc, #136]	; (800a334 <lfs_fs_pred+0xd8>)
 800a2aa:	4823      	ldr	r0, [pc, #140]	; (800a338 <lfs_fs_pred+0xdc>)
 800a2ac:	f00d fa7a 	bl	80177a4 <iprintf>
            return LFS_ERR_CORRUPT;
 800a2b0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a2b4:	e036      	b.n	800a324 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d10a      	bne.n	800a2d4 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3318      	adds	r3, #24
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fb f89d 	bl	8005420 <lfs_pair_cmp>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <lfs_fs_pred+0x94>
            return 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e019      	b.n	800a324 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3318      	adds	r3, #24
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7fc fec3 	bl	8007084 <lfs_dir_fetch>
 800a2fe:	61f8      	str	r0, [r7, #28]
        if (err) {
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <lfs_fs_pred+0xae>
            return err;
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	e00c      	b.n	800a324 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3318      	adds	r3, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fb f86b 	bl	80053ea <lfs_pair_isnull>
 800a314:	4603      	mov	r3, r0
 800a316:	f083 0301 	eor.w	r3, r3, #1
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1b5      	bne.n	800a28c <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800a320:	f06f 0301 	mvn.w	r3, #1
}
 800a324:	4618      	mov	r0, r3
 800a326:	3728      	adds	r7, #40	; 0x28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	080195ec 	.word	0x080195ec
 800a330:	080195a8 	.word	0x080195a8
 800a334:	08019494 	.word	0x08019494
 800a338:	08019ac0 	.word	0x08019ac0

0800a33c <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800a33c:	b5b0      	push	{r4, r5, r7, lr}
 800a33e:	b08e      	sub	sp, #56	; 0x38
 800a340:	af04      	add	r7, sp, #16
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800a35c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800a362:	69dd      	ldr	r5, [r3, #28]
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	6852      	ldr	r2, [r2, #4]
 800a36c:	2108      	movs	r1, #8
 800a36e:	9103      	str	r1, [sp, #12]
 800a370:	f107 0110 	add.w	r1, r7, #16
 800a374:	9102      	str	r1, [sp, #8]
 800a376:	9201      	str	r2, [sp, #4]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	462b      	mov	r3, r5
 800a37c:	4622      	mov	r2, r4
 800a37e:	4601      	mov	r1, r0
 800a380:	6a38      	ldr	r0, [r7, #32]
 800a382:	f7fa fcad 	bl	8004ce0 <lfs_bd_read>
 800a386:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <lfs_fs_parent_match+0x56>
        return err;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	e012      	b.n	800a3b8 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800a392:	f107 0310 	add.w	r3, r7, #16
 800a396:	4618      	mov	r0, r3
 800a398:	f7fb f899 	bl	80054ce <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	1d1a      	adds	r2, r3, #4
 800a3a0:	f107 0310 	add.w	r3, r7, #16
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fb f83a 	bl	8005420 <lfs_pair_cmp>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bf14      	ite	ne
 800a3b2:	2301      	movne	r3, #1
 800a3b4:	2300      	moveq	r3, #0
 800a3b6:	b2db      	uxtb	r3, r3
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3728      	adds	r7, #40	; 0x28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b090      	sub	sp, #64	; 0x40
 800a3c4:	af04      	add	r7, sp, #16
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a3d8:	4a33      	ldr	r2, [pc, #204]	; (800a4a8 <lfs_fs_parent+0xe8>)
 800a3da:	f107 031c 	add.w	r3, r7, #28
 800a3de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3e2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800a3ee:	e049      	b.n	800a484 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3318      	adds	r3, #24
 800a3f4:	f107 021c 	add.w	r2, r7, #28
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fb f83a 	bl	8005474 <lfs_pair_issync>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800a406:	4b29      	ldr	r3, [pc, #164]	; (800a4ac <lfs_fs_parent+0xec>)
 800a408:	f241 2271 	movw	r2, #4721	; 0x1271
 800a40c:	4928      	ldr	r1, [pc, #160]	; (800a4b0 <lfs_fs_parent+0xf0>)
 800a40e:	4829      	ldr	r0, [pc, #164]	; (800a4b4 <lfs_fs_parent+0xf4>)
 800a410:	f00d f9c8 	bl	80177a4 <iprintf>
            return LFS_ERR_CORRUPT;
 800a414:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a418:	e041      	b.n	800a49e <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 800a41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	429a      	cmp	r2, r3
 800a420:	d10a      	bne.n	800a438 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	3301      	adds	r3, #1
 800a43c:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a454:	f107 0310 	add.w	r3, r7, #16
 800a458:	9303      	str	r3, [sp, #12]
 800a45a:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <lfs_fs_parent+0xf8>)
 800a45c:	9302      	str	r3, [sp, #8]
 800a45e:	2300      	movs	r3, #0
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <lfs_fs_parent+0xfc>)
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4b16      	ldr	r3, [pc, #88]	; (800a4c0 <lfs_fs_parent+0x100>)
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7fc fa42 	bl	80068f4 <lfs_dir_fetchmatch>
 800a470:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <lfs_fs_parent+0xc4>
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	f113 0f02 	cmn.w	r3, #2
 800a47e:	d001      	beq.n	800a484 <lfs_fs_parent+0xc4>
            return tag;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	e00c      	b.n	800a49e <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3318      	adds	r3, #24
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fa ffae 	bl	80053ea <lfs_pair_isnull>
 800a48e:	4603      	mov	r3, r0
 800a490:	f083 0301 	eor.w	r3, r3, #1
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1aa      	bne.n	800a3f0 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800a49a:	f06f 0301 	mvn.w	r3, #1
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3730      	adds	r7, #48	; 0x30
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	080195ec 	.word	0x080195ec
 800a4ac:	080195a8 	.word	0x080195a8
 800a4b0:	08019494 	.word	0x08019494
 800a4b4:	08019ac0 	.word	0x08019ac0
 800a4b8:	0800a33d 	.word	0x0800a33d
 800a4bc:	20000008 	.word	0x20000008
 800a4c0:	7ff003ff 	.word	0x7ff003ff

0800a4c4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	025b      	lsls	r3, r3, #9
 800a4dc:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	4618      	mov	r0, r3
 800a502:	f7fb f893 	bl	800562c <lfs_tag_size>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <lfs_fs_preporphans+0x32>
 800a50c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da06      	bge.n	800a522 <lfs_fs_preporphans+0x32>
 800a514:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <lfs_fs_preporphans+0x90>)
 800a516:	4a1b      	ldr	r2, [pc, #108]	; (800a584 <lfs_fs_preporphans+0x94>)
 800a518:	f241 2192 	movw	r1, #4754	; 0x1292
 800a51c:	481a      	ldr	r0, [pc, #104]	; (800a588 <lfs_fs_preporphans+0x98>)
 800a51e:	f00c fc21 	bl	8016d64 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	4618      	mov	r0, r3
 800a528:	f7fb f880 	bl	800562c <lfs_tag_size>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a532:	d90a      	bls.n	800a54a <lfs_fs_preporphans+0x5a>
 800a534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	dd06      	ble.n	800a54a <lfs_fs_preporphans+0x5a>
 800a53c:	4b13      	ldr	r3, [pc, #76]	; (800a58c <lfs_fs_preporphans+0x9c>)
 800a53e:	4a11      	ldr	r2, [pc, #68]	; (800a584 <lfs_fs_preporphans+0x94>)
 800a540:	f241 2193 	movw	r1, #4755	; 0x1293
 800a544:	4810      	ldr	r0, [pc, #64]	; (800a588 <lfs_fs_preporphans+0x98>)
 800a546:	f00c fc0d 	bl	8016d64 <__assert_func>
    lfs->gstate.tag += orphans;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a54e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a552:	441a      	add	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3330      	adds	r3, #48	; 0x30
 800a564:	4618      	mov	r0, r3
 800a566:	f7fb f8c4 	bl	80056f2 <lfs_gstate_hasorphans>
 800a56a:	4603      	mov	r3, r0
 800a56c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a56e:	ea44 0203 	orr.w	r2, r4, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd90      	pop	{r4, r7, pc}
 800a580:	08019c9c 	.word	0x08019c9c
 800a584:	0801a0bc 	.word	0x0801a0bc
 800a588:	08019494 	.word	0x08019494
 800a58c:	08019cd4 	.word	0x08019cd4

0800a590 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	460b      	mov	r3, r1
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	4a17      	ldr	r2, [pc, #92]	; (800a600 <lfs_fs_prepmove+0x70>)
 800a5a4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800a5a6:	897b      	ldrh	r3, [r7, #10]
 800a5a8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	d006      	beq.n	800a5be <lfs_fs_prepmove+0x2e>
 800a5b0:	897b      	ldrh	r3, [r7, #10]
 800a5b2:	029b      	lsls	r3, r3, #10
 800a5b4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a5b8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a5bc:	e000      	b.n	800a5c0 <lfs_fs_prepmove+0x30>
 800a5be:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d002      	beq.n	800a5d6 <lfs_fs_prepmove+0x46>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	e000      	b.n	800a5d8 <lfs_fs_prepmove+0x48>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800a5dc:	897b      	ldrh	r3, [r7, #10]
 800a5de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d003      	beq.n	800a5ee <lfs_fs_prepmove+0x5e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	e000      	b.n	800a5f0 <lfs_fs_prepmove+0x60>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a5f4:	bf00      	nop
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	800003ff 	.word	0x800003ff

0800a604 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b098      	sub	sp, #96	; 0x60
 800a608:	af02      	add	r7, sp, #8
 800a60a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3330      	adds	r3, #48	; 0x30
 800a610:	4618      	mov	r0, r3
 800a612:	f7fb f8a3 	bl	800575c <lfs_gstate_needssuperblock>
 800a616:	4603      	mov	r3, r0
 800a618:	f083 0301 	eor.w	r3, r3, #1
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <lfs_fs_desuperblock+0x22>
        return 0;
 800a622:	2300      	movs	r3, #0
 800a624:	e04e      	b.n	800a6c4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	4927      	ldr	r1, [pc, #156]	; (800a6cc <lfs_fs_desuperblock+0xc8>)
 800a630:	9101      	str	r1, [sp, #4]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	f241 22ac 	movw	r2, #4780	; 0x12ac
 800a63a:	4925      	ldr	r1, [pc, #148]	; (800a6d0 <lfs_fs_desuperblock+0xcc>)
 800a63c:	4825      	ldr	r0, [pc, #148]	; (800a6d4 <lfs_fs_desuperblock+0xd0>)
 800a63e:	f00d f8b1 	bl	80177a4 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f103 0220 	add.w	r2, r3, #32
 800a648:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7fc fd18 	bl	8007084 <lfs_dir_fetch>
 800a654:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 800a656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <lfs_fs_desuperblock+0x5c>
        return err;
 800a65c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a65e:	e031      	b.n	800a6c4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7fb f9d9 	bl	8005a18 <lfs_fs_disk_version>
 800a666:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800a668:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a66e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800a670:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 800a676:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 800a682:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 800a688:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 800a68a:	f107 031c 	add.w	r3, r7, #28
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fb f938 	bl	8005904 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a694:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <lfs_fs_desuperblock+0xd4>)
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	f107 031c 	add.w	r3, r7, #28
 800a69c:	61bb      	str	r3, [r7, #24]
 800a69e:	f107 0214 	add.w	r2, r7, #20
 800a6a2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fe fa7b 	bl	8008ba4 <lfs_dir_commit>
 800a6ae:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800a6b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <lfs_fs_desuperblock+0xb6>
        return err;
 800a6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b8:	e004      	b.n	800a6c4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff ff01 	bl	800a4c4 <lfs_fs_prepsuperblock>
    return 0;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3758      	adds	r7, #88	; 0x58
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	080195a8 	.word	0x080195a8
 800a6d0:	08019494 	.word	0x08019494
 800a6d4:	08019d0c 	.word	0x08019d0c
 800a6d8:	20100018 	.word	0x20100018

0800a6dc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800a6dc:	b5b0      	push	{r4, r5, r7, lr}
 800a6de:	b094      	sub	sp, #80	; 0x50
 800a6e0:	af04      	add	r7, sp, #16
 800a6e2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	333c      	adds	r3, #60	; 0x3c
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fb f824 	bl	8005736 <lfs_gstate_hasmove>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f083 0301 	eor.w	r3, r3, #1
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <lfs_fs_demove+0x22>
        return 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e05b      	b.n	800a7b6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fa ff7e 	bl	800560c <lfs_tag_id>
 800a710:	4603      	mov	r3, r0
 800a712:	461a      	mov	r2, r3
 800a714:	4b2a      	ldr	r3, [pc, #168]	; (800a7c0 <lfs_fs_demove+0xe4>)
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	9201      	str	r2, [sp, #4]
 800a71a:	9400      	str	r4, [sp, #0]
 800a71c:	462b      	mov	r3, r5
 800a71e:	f241 22d4 	movw	r2, #4820	; 0x12d4
 800a722:	4928      	ldr	r1, [pc, #160]	; (800a7c4 <lfs_fs_demove+0xe8>)
 800a724:	4828      	ldr	r0, [pc, #160]	; (800a7c8 <lfs_fs_demove+0xec>)
 800a726:	f00d f83d 	bl	80177a4 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fa ff42 	bl	80055b8 <lfs_tag_type3>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d006      	beq.n	800a74e <lfs_fs_demove+0x72>
 800a740:	4b22      	ldr	r3, [pc, #136]	; (800a7cc <lfs_fs_demove+0xf0>)
 800a742:	4a23      	ldr	r2, [pc, #140]	; (800a7d0 <lfs_fs_demove+0xf4>)
 800a744:	f241 21db 	movw	r1, #4827	; 0x12db
 800a748:	481e      	ldr	r0, [pc, #120]	; (800a7c4 <lfs_fs_demove+0xe8>)
 800a74a:	f00c fb0b 	bl	8016d64 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a754:	f107 0318 	add.w	r3, r7, #24
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fc fc92 	bl	8007084 <lfs_dir_fetch>
 800a760:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800a762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <lfs_fs_demove+0x90>
        return err;
 800a768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76a:	e024      	b.n	800a7b6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a770:	4618      	mov	r0, r3
 800a772:	f7fa ff4b 	bl	800560c <lfs_tag_id>
 800a776:	4603      	mov	r3, r0
 800a778:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a77a:	2200      	movs	r2, #0
 800a77c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff ff05 	bl	800a590 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800a786:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a788:	029b      	lsls	r3, r3, #10
 800a78a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a78e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	f107 0210 	add.w	r2, r7, #16
 800a79c:	f107 0118 	add.w	r1, r7, #24
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7fe f9fe 	bl	8008ba4 <lfs_dir_commit>
 800a7a8:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800a7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <lfs_fs_demove+0xd8>
        return err;
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b2:	e000      	b.n	800a7b6 <lfs_fs_demove+0xda>
    }

    return 0;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3740      	adds	r7, #64	; 0x40
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bdb0      	pop	{r4, r5, r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	080195a8 	.word	0x080195a8
 800a7c4:	08019494 	.word	0x08019494
 800a7c8:	08019d40 	.word	0x08019d40
 800a7cc:	08019d74 	.word	0x08019d74
 800a7d0:	0801a0d0 	.word	0x0801a0d0

0800a7d4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800a7d4:	b5b0      	push	{r4, r5, r7, lr}
 800a7d6:	b0b2      	sub	sp, #200	; 0xc8
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3330      	adds	r3, #48	; 0x30
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fa ff84 	bl	80056f2 <lfs_gstate_hasorphans>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f083 0301 	eor.w	r3, r3, #1
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <lfs_fs_deorphan+0x26>
        return 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	e187      	b.n	800ab0a <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a800:	e170      	b.n	800aae4 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	2220      	movs	r2, #32
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f00c fc2a 	bl	8017064 <memset>
 800a810:	2301      	movs	r3, #1
 800a812:	77fb      	strb	r3, [r7, #31]
 800a814:	2301      	movs	r3, #1
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a81e:	e149      	b.n	800aab4 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	f103 0218 	add.w	r2, r3, #24
 800a828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7fc fc28 	bl	8007084 <lfs_dir_fetch>
 800a834:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 800a838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <lfs_fs_deorphan+0x72>
                return err;
 800a840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a844:	e161      	b.n	800ab0a <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a846:	7ffb      	ldrb	r3, [r7, #31]
 800a848:	f083 0301 	eor.w	r3, r3, #1
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8126 	beq.w	800aaa0 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a858:	f107 0308 	add.w	r3, r7, #8
 800a85c:	3318      	adds	r3, #24
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff fdad 	bl	800a3c0 <lfs_fs_parent>
 800a866:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a86a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a86e:	2b00      	cmp	r3, #0
 800a870:	da07      	bge.n	800a882 <lfs_fs_deorphan+0xae>
 800a872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a876:	f113 0f02 	cmn.w	r3, #2
 800a87a:	d002      	beq.n	800a882 <lfs_fs_deorphan+0xae>
                    return tag;
 800a87c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a880:	e143      	b.n	800ab0a <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 80ac 	bne.w	800a9e4 <lfs_fs_deorphan+0x210>
 800a88c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a890:	f113 0f02 	cmn.w	r3, #2
 800a894:	f000 80a6 	beq.w	800a9e4 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a898:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a89c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a8a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	4a9a      	ldr	r2, [pc, #616]	; (800ab14 <lfs_fs_deorphan+0x340>)
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fb fac0 	bl	8005e30 <lfs_dir_get>
 800a8b0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a8b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da02      	bge.n	800a8c2 <lfs_fs_deorphan+0xee>
                        return state;
 800a8bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8c0:	e0eb      	b.n	800aa9a <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800a8c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fa fe01 	bl	80054ce <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a8cc:	f107 0308 	add.w	r3, r7, #8
 800a8d0:	f103 0218 	add.w	r2, r3, #24
 800a8d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fa fdca 	bl	8005474 <lfs_pair_issync>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f083 0301 	eor.w	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d07b      	beq.n	800a9e4 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a8ec:	6a38      	ldr	r0, [r7, #32]
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a8f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a8f8:	4c87      	ldr	r4, [pc, #540]	; (800ab18 <lfs_fs_deorphan+0x344>)
 800a8fa:	9403      	str	r4, [sp, #12]
 800a8fc:	9102      	str	r1, [sp, #8]
 800a8fe:	9201      	str	r2, [sp, #4]
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	4603      	mov	r3, r0
 800a904:	f241 3221 	movw	r2, #4897	; 0x1321
 800a908:	4984      	ldr	r1, [pc, #528]	; (800ab1c <lfs_fs_deorphan+0x348>)
 800a90a:	4885      	ldr	r0, [pc, #532]	; (800ab20 <lfs_fs_deorphan+0x34c>)
 800a90c:	f00c ff4a 	bl	80177a4 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a910:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a914:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3330      	adds	r3, #48	; 0x30
 800a91c:	f107 0208 	add.w	r2, r7, #8
 800a920:	4611      	mov	r1, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f7fa ff2e 	bl	8005784 <lfs_gstate_hasmovehere>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01c      	beq.n	800a968 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a932:	4618      	mov	r0, r3
 800a934:	f7fa fe6a 	bl	800560c <lfs_tag_id>
 800a938:	4603      	mov	r3, r0
 800a93a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800a946:	4874      	ldr	r0, [pc, #464]	; (800ab18 <lfs_fs_deorphan+0x344>)
 800a948:	9002      	str	r0, [sp, #8]
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	460b      	mov	r3, r1
 800a950:	f241 322c 	movw	r2, #4908	; 0x132c
 800a954:	4971      	ldr	r1, [pc, #452]	; (800ab1c <lfs_fs_deorphan+0x348>)
 800a956:	4873      	ldr	r0, [pc, #460]	; (800ab24 <lfs_fs_deorphan+0x350>)
 800a958:	f00c ff24 	bl	80177a4 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a95c:	2200      	movs	r2, #0
 800a95e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fe14 	bl	800a590 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a968:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fa fdc8 	bl	8005502 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a972:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a976:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d007      	beq.n	800a98e <lfs_fs_deorphan+0x1ba>
 800a97e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a982:	029b      	lsls	r3, r3, #10
 800a984:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a988:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a98c:	e000      	b.n	800a990 <lfs_fs_deorphan+0x1bc>
 800a98e:	2300      	movs	r3, #0
 800a990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a994:	2300      	movs	r3, #0
 800a996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a99a:	4b63      	ldr	r3, [pc, #396]	; (800ab28 <lfs_fs_deorphan+0x354>)
 800a99c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a9a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a9ac:	f107 0108 	add.w	r1, r7, #8
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7fd fdfc 	bl	80085b0 <lfs_dir_orphaningcommit>
 800a9b8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a9bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fa fd84 	bl	80054ce <lfs_pair_fromle32>
                        if (state < 0) {
 800a9c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da02      	bge.n	800a9d4 <lfs_fs_deorphan+0x200>
                            return state;
 800a9ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800a9d2:	e062      	b.n	800aa9a <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a9d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d16b      	bne.n	800aab4 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a9e2:	e067      	b.n	800aab4 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a9e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d159      	bne.n	800aaa0 <lfs_fs_deorphan+0x2cc>
 800a9ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9f0:	f113 0f02 	cmn.w	r3, #2
 800a9f4:	d154      	bne.n	800aaa0 <lfs_fs_deorphan+0x2cc>
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d051      	beq.n	800aaa0 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a9fc:	6a3a      	ldr	r2, [r7, #32]
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	4945      	ldr	r1, [pc, #276]	; (800ab18 <lfs_fs_deorphan+0x344>)
 800aa02:	9101      	str	r1, [sp, #4]
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	4613      	mov	r3, r2
 800aa08:	f241 324c 	movw	r2, #4940	; 0x134c
 800aa0c:	4943      	ldr	r1, [pc, #268]	; (800ab1c <lfs_fs_deorphan+0x348>)
 800aa0e:	4847      	ldr	r0, [pc, #284]	; (800ab2c <lfs_fs_deorphan+0x358>)
 800aa10:	f00c fec8 	bl	80177a4 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aa1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7fc fb4b 	bl	80070bc <lfs_dir_getgstate>
 800aa26:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800aa2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <lfs_fs_deorphan+0x264>
                        return err;
 800aa32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa36:	e030      	b.n	800aa9a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800aa38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa3c:	3318      	adds	r3, #24
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fa fd5f 	bl	8005502 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800aa44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa48:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800aa4c:	051a      	lsls	r2, r3, #20
 800aa4e:	4b38      	ldr	r3, [pc, #224]	; (800ab30 <lfs_fs_deorphan+0x35c>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	673b      	str	r3, [r7, #112]	; 0x70
 800aa54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa58:	3318      	adds	r3, #24
 800aa5a:	677b      	str	r3, [r7, #116]	; 0x74
 800aa5c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aa60:	f107 0108 	add.w	r1, r7, #8
 800aa64:	2301      	movs	r3, #1
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7fd fda2 	bl	80085b0 <lfs_dir_orphaningcommit>
 800aa6c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800aa70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa74:	3318      	adds	r3, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fa fd29 	bl	80054ce <lfs_pair_fromle32>
                    if (state < 0) {
 800aa7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da02      	bge.n	800aa8a <lfs_fs_deorphan+0x2b6>
                        return state;
 800aa84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800aa88:	e03f      	b.n	800ab0a <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800aa8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d104      	bne.n	800aa9c <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 800aa92:	2301      	movs	r3, #1
 800aa94:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800aa98:	e00c      	b.n	800aab4 <lfs_fs_deorphan+0x2e0>
                return err;
 800aa9a:	e036      	b.n	800ab0a <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800aa9c:	bf00      	nop
 800aa9e:	e009      	b.n	800aab4 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 800aaa0:	f107 0408 	add.w	r4, r7, #8
 800aaa4:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800aaa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800aab4:	f107 0308 	add.w	r3, r7, #8
 800aab8:	3318      	adds	r3, #24
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fa fc95 	bl	80053ea <lfs_pair_isnull>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f083 0301 	eor.w	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f47f aea9 	bne.w	800a820 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800aace:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <lfs_fs_deorphan+0x306>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e002      	b.n	800aae0 <lfs_fs_deorphan+0x30c>
 800aada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aade:	3301      	adds	r3, #1
 800aae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800aae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	f77f ae8a 	ble.w	800a802 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3330      	adds	r3, #48	; 0x30
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fa fe10 	bl	8005718 <lfs_gstate_getorphans>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	425b      	negs	r3, r3
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	b25b      	sxtb	r3, r3
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff fcf4 	bl	800a4f0 <lfs_fs_preporphans>
 800ab08:	4603      	mov	r3, r0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	37b8      	adds	r7, #184	; 0xb8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bdb0      	pop	{r4, r5, r7, pc}
 800ab12:	bf00      	nop
 800ab14:	7ffffc00 	.word	0x7ffffc00
 800ab18:	080195a8 	.word	0x080195a8
 800ab1c:	08019494 	.word	0x08019494
 800ab20:	08019da8 	.word	0x08019da8
 800ab24:	08019dec 	.word	0x08019dec
 800ab28:	600ffc08 	.word	0x600ffc08
 800ab2c:	08019e34 	.word	0x08019e34
 800ab30:	000ffc08 	.word	0x000ffc08

0800ab34 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff fd61 	bl	800a604 <lfs_fs_desuperblock>
 800ab42:	60f8      	str	r0, [r7, #12]
    if (err) {
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <lfs_fs_forceconsistency+0x1a>
        return err;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	e013      	b.n	800ab76 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff fdc4 	bl	800a6dc <lfs_fs_demove>
 800ab54:	60f8      	str	r0, [r7, #12]
    if (err) {
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <lfs_fs_forceconsistency+0x2c>
        return err;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	e00a      	b.n	800ab76 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800ab60:	2101      	movs	r1, #1
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff fe36 	bl	800a7d4 <lfs_fs_deorphan>
 800ab68:	60f8      	str	r0, [r7, #12]
    if (err) {
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <lfs_fs_forceconsistency+0x40>
        return err;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	e000      	b.n	800ab76 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	601a      	str	r2, [r3, #0]
    return 0;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800abb0:	f107 0208 	add.w	r2, r7, #8
 800abb4:	2300      	movs	r3, #0
 800abb6:	4907      	ldr	r1, [pc, #28]	; (800abd4 <lfs_fs_rawsize+0x30>)
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff f9fd 	bl	8009fb8 <lfs_fs_rawtraverse>
 800abbe:	60f8      	str	r0, [r7, #12]
    if (err) {
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <lfs_fs_rawsize+0x26>
        return err;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	e000      	b.n	800abcc <lfs_fs_rawsize+0x28>
    }

    return size;
 800abca:	68bb      	ldr	r3, [r7, #8]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	0800ab7f 	.word	0x0800ab7f

0800abd8 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800abe6:	2300      	movs	r3, #0
 800abe8:	617b      	str	r3, [r7, #20]
    if (err) {
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <lfs_file_open+0x1c>
        return err;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	e01a      	b.n	800ac2a <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fa feba 	bl	8005974 <lfs_mlist_isopen>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f083 0301 	eor.w	r3, r3, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <lfs_file_open+0x42>
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <lfs_file_open+0x5c>)
 800ac0e:	4a0a      	ldr	r2, [pc, #40]	; (800ac38 <lfs_file_open+0x60>)
 800ac10:	f241 712a 	movw	r1, #5930	; 0x172a
 800ac14:	4809      	ldr	r0, [pc, #36]	; (800ac3c <lfs_file_open+0x64>)
 800ac16:	f00c f8a5 	bl	8016d64 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7fe fbdd 	bl	80093e0 <lfs_file_rawopen>
 800ac26:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800ac28:	697b      	ldr	r3, [r7, #20]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	08019e84 	.word	0x08019e84
 800ac38:	0801a0e0 	.word	0x0801a0e0
 800ac3c:	08019494 	.word	0x08019494

0800ac40 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]


	int err = LFS_LOCK(lfs->cfg);
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <lfs_file_close+0x18>
        return err;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	e015      	b.n	800ac84 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fa fe88 	bl	8005974 <lfs_mlist_isopen>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <lfs_file_close+0x38>
 800ac6a:	4b08      	ldr	r3, [pc, #32]	; (800ac8c <lfs_file_close+0x4c>)
 800ac6c:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <lfs_file_close+0x50>)
 800ac6e:	f241 7150 	movw	r1, #5968	; 0x1750
 800ac72:	4808      	ldr	r0, [pc, #32]	; (800ac94 <lfs_file_close+0x54>)
 800ac74:	f00c f876 	bl	8016d64 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7fe fbc8 	bl	8009410 <lfs_file_rawclose>
 800ac80:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800ac82:	68fb      	ldr	r3, [r7, #12]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	08019ebc 	.word	0x08019ebc
 800ac90:	0801a0f0 	.word	0x0801a0f0
 800ac94:	08019494 	.word	0x08019494

0800ac98 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
    if (err) {
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <lfs_file_read+0x1c>
        return err;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	e017      	b.n	800ace4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	68b9      	ldr	r1, [r7, #8]
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fa fe5a 	bl	8005974 <lfs_mlist_isopen>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <lfs_file_read+0x3c>
 800acc6:	4b09      	ldr	r3, [pc, #36]	; (800acec <lfs_file_read+0x54>)
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <lfs_file_read+0x58>)
 800acca:	f241 7172 	movw	r1, #6002	; 0x1772
 800acce:	4809      	ldr	r0, [pc, #36]	; (800acf4 <lfs_file_read+0x5c>)
 800acd0:	f00c f848 	bl	8016d64 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7fe fee4 	bl	8009aa8 <lfs_file_rawread>
 800ace0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800ace2:	693b      	ldr	r3, [r7, #16]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	08019ebc 	.word	0x08019ebc
 800acf0:	0801a100 	.word	0x0801a100
 800acf4:	08019494 	.word	0x08019494

0800acf8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]
    if (err) {
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <lfs_file_write+0x1c>
        return err;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	e017      	b.n	800ad44 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fa fe2a 	bl	8005974 <lfs_mlist_isopen>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <lfs_file_write+0x3c>
 800ad26:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <lfs_file_write+0x54>)
 800ad28:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <lfs_file_write+0x58>)
 800ad2a:	f241 7184 	movw	r1, #6020	; 0x1784
 800ad2e:	4809      	ldr	r0, [pc, #36]	; (800ad54 <lfs_file_write+0x5c>)
 800ad30:	f00c f818 	bl	8016d64 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff f814 	bl	8009d68 <lfs_file_rawwrite>
 800ad40:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800ad42:	693b      	ldr	r3, [r7, #16]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08019ebc 	.word	0x08019ebc
 800ad50:	0801a110 	.word	0x0801a110
 800ad54:	08019494 	.word	0x08019494

0800ad58 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]
    if (err) {
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <lfs_file_seek+0x1c>
        return err;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	e017      	b.n	800ada4 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	68b9      	ldr	r1, [r7, #8]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fa fdfa 	bl	8005974 <lfs_mlist_isopen>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <lfs_file_seek+0x3c>
 800ad86:	4b09      	ldr	r3, [pc, #36]	; (800adac <lfs_file_seek+0x54>)
 800ad88:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <lfs_file_seek+0x58>)
 800ad8a:	f241 7196 	movw	r1, #6038	; 0x1796
 800ad8e:	4809      	ldr	r0, [pc, #36]	; (800adb4 <lfs_file_seek+0x5c>)
 800ad90:	f00b ffe8 	bl	8016d64 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff f868 	bl	8009e70 <lfs_file_rawseek>
 800ada0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800ada2:	693b      	ldr	r3, [r7, #16]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	08019ebc 	.word	0x08019ebc
 800adb0:	0801a120 	.word	0x0801a120
 800adb4:	08019494 	.word	0x08019494

0800adb8 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	e024      	b.n	800ae18 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	091a      	lsrs	r2, r3, #4
 800add2:	6939      	ldr	r1, [r7, #16]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	440b      	add	r3, r1
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	4619      	mov	r1, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	404b      	eors	r3, r1
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	4912      	ldr	r1, [pc, #72]	; (800ae30 <lfs_crc+0x78>)
 800ade6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adea:	4053      	eors	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	091a      	lsrs	r2, r3, #4
 800adf2:	6939      	ldr	r1, [r7, #16]
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	440b      	add	r3, r1
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	091b      	lsrs	r3, r3, #4
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4619      	mov	r1, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	404b      	eors	r3, r1
 800ae04:	f003 030f 	and.w	r3, r3, #15
 800ae08:	4909      	ldr	r1, [pc, #36]	; (800ae30 <lfs_crc+0x78>)
 800ae0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae0e:	4053      	eors	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	3301      	adds	r3, #1
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d3d6      	bcc.n	800adce <lfs_crc+0x16>
    }

    return crc;
 800ae20:	68fb      	ldr	r3, [r7, #12]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	0801a130 	.word	0x0801a130

0800ae34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ae38:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <HAL_Init+0x40>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <HAL_Init+0x40>)
 800ae3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ae44:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <HAL_Init+0x40>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a0a      	ldr	r2, [pc, #40]	; (800ae74 <HAL_Init+0x40>)
 800ae4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ae50:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <HAL_Init+0x40>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a07      	ldr	r2, [pc, #28]	; (800ae74 <HAL_Init+0x40>)
 800ae56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae5c:	2003      	movs	r0, #3
 800ae5e:	f000 fcc2 	bl	800b7e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae62:	200f      	movs	r0, #15
 800ae64:	f7f8 fea2 	bl	8003bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae68:	f7f8 fe6c 	bl	8003b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	40023c00 	.word	0x40023c00

0800ae78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  return uwTick;
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <HAL_GetTick+0x14>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20008650 	.word	0x20008650

0800ae90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae98:	f7ff ffee 	bl	800ae78 <HAL_GetTick>
 800ae9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea8:	d005      	beq.n	800aeb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aeaa:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <HAL_Delay+0x44>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aeb6:	bf00      	nop
 800aeb8:	f7ff ffde 	bl	800ae78 <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d8f7      	bhi.n	800aeb8 <HAL_Delay+0x28>
  {
  }
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000050 	.word	0x20000050

0800aed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e033      	b.n	800af56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f6 fc94 	bl	8001824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f003 0310 	and.w	r3, r3, #16
 800af12:	2b00      	cmp	r3, #0
 800af14:	d118      	bne.n	800af48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800af1e:	f023 0302 	bic.w	r3, r3, #2
 800af22:	f043 0202 	orr.w	r2, r3, #2
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 faa8 	bl	800b480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	f043 0201 	orr.w	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	641a      	str	r2, [r3, #64]	; 0x40
 800af46:	e001      	b.n	800af4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	2300      	movs	r3, #0
 800af6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b02      	cmp	r3, #2
 800af7a:	bf0c      	ite	eq
 800af7c:	2301      	moveq	r3, #1
 800af7e:	2300      	movne	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	2b20      	cmp	r3, #32
 800af90:	bf0c      	ite	eq
 800af92:	2301      	moveq	r3, #1
 800af94:	2300      	movne	r3, #0
 800af96:	b2db      	uxtb	r3, r3
 800af98:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d049      	beq.n	800b034 <HAL_ADC_IRQHandler+0xd6>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d046      	beq.n	800b034 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	f003 0310 	and.w	r3, r3, #16
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d105      	bne.n	800afbe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d12b      	bne.n	800b024 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d127      	bne.n	800b024 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afec:	2b00      	cmp	r3, #0
 800afee:	d119      	bne.n	800b024 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0220 	bic.w	r2, r2, #32
 800affe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d105      	bne.n	800b024 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01c:	f043 0201 	orr.w	r2, r3, #1
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f8db 	bl	800b1e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f06f 0212 	mvn.w	r2, #18
 800b032:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b04      	cmp	r3, #4
 800b040:	bf0c      	ite	eq
 800b042:	2301      	moveq	r3, #1
 800b044:	2300      	movne	r3, #0
 800b046:	b2db      	uxtb	r3, r3
 800b048:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b054:	2b80      	cmp	r3, #128	; 0x80
 800b056:	bf0c      	ite	eq
 800b058:	2301      	moveq	r3, #1
 800b05a:	2300      	movne	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d057      	beq.n	800b116 <HAL_ADC_IRQHandler+0x1b8>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d054      	beq.n	800b116 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d139      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b098:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d12b      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d124      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d11d      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d119      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	f043 0201 	orr.w	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fab6 	bl	800b678 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f06f 020c 	mvn.w	r2, #12
 800b114:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b01      	cmp	r3, #1
 800b122:	bf0c      	ite	eq
 800b124:	2301      	moveq	r3, #1
 800b126:	2300      	movne	r3, #0
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b136:	2b40      	cmp	r3, #64	; 0x40
 800b138:	bf0c      	ite	eq
 800b13a:	2301      	moveq	r3, #1
 800b13c:	2300      	movne	r3, #0
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <HAL_ADC_IRQHandler+0x21a>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d014      	beq.n	800b178 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d10d      	bne.n	800b178 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f843 	bl	800b1f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f06f 0201 	mvn.w	r2, #1
 800b176:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b20      	cmp	r3, #32
 800b184:	bf0c      	ite	eq
 800b186:	2301      	moveq	r3, #1
 800b188:	2300      	movne	r3, #0
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b19c:	bf0c      	ite	eq
 800b19e:	2301      	moveq	r3, #1
 800b1a0:	2300      	movne	r3, #0
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d015      	beq.n	800b1d8 <HAL_ADC_IRQHandler+0x27a>
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d012      	beq.n	800b1d8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	f043 0202 	orr.w	r2, r3, #2
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f06f 0220 	mvn.w	r2, #32
 800b1c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f81d 	bl	800b208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f06f 0220 	mvn.w	r2, #32
 800b1d6:	601a      	str	r2, [r3, #0]
  }
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_ADC_ConfigChannel+0x1c>
 800b234:	2302      	movs	r3, #2
 800b236:	e113      	b.n	800b460 <HAL_ADC_ConfigChannel+0x244>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b09      	cmp	r3, #9
 800b246:	d925      	bls.n	800b294 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68d9      	ldr	r1, [r3, #12]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	461a      	mov	r2, r3
 800b256:	4613      	mov	r3, r2
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	4413      	add	r3, r2
 800b25c:	3b1e      	subs	r3, #30
 800b25e:	2207      	movs	r2, #7
 800b260:	fa02 f303 	lsl.w	r3, r2, r3
 800b264:	43da      	mvns	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	400a      	ands	r2, r1
 800b26c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68d9      	ldr	r1, [r3, #12]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	4618      	mov	r0, r3
 800b280:	4603      	mov	r3, r0
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	4403      	add	r3, r0
 800b286:	3b1e      	subs	r3, #30
 800b288:	409a      	lsls	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	60da      	str	r2, [r3, #12]
 800b292:	e022      	b.n	800b2da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6919      	ldr	r1, [r3, #16]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	4413      	add	r3, r2
 800b2a8:	2207      	movs	r2, #7
 800b2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ae:	43da      	mvns	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	400a      	ands	r2, r1
 800b2b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6919      	ldr	r1, [r3, #16]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4403      	add	r3, r0
 800b2d0:	409a      	lsls	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2b06      	cmp	r3, #6
 800b2e0:	d824      	bhi.n	800b32c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	3b05      	subs	r3, #5
 800b2f4:	221f      	movs	r2, #31
 800b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fa:	43da      	mvns	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	400a      	ands	r2, r1
 800b302:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	4618      	mov	r0, r3
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4613      	mov	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	3b05      	subs	r3, #5
 800b31e:	fa00 f203 	lsl.w	r2, r0, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	635a      	str	r2, [r3, #52]	; 0x34
 800b32a:	e04c      	b.n	800b3c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b0c      	cmp	r3, #12
 800b332:	d824      	bhi.n	800b37e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	3b23      	subs	r3, #35	; 0x23
 800b346:	221f      	movs	r2, #31
 800b348:	fa02 f303 	lsl.w	r3, r2, r3
 800b34c:	43da      	mvns	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	400a      	ands	r2, r1
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	b29b      	uxth	r3, r3
 800b362:	4618      	mov	r0, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	3b23      	subs	r3, #35	; 0x23
 800b370:	fa00 f203 	lsl.w	r2, r0, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	430a      	orrs	r2, r1
 800b37a:	631a      	str	r2, [r3, #48]	; 0x30
 800b37c:	e023      	b.n	800b3c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	3b41      	subs	r3, #65	; 0x41
 800b390:	221f      	movs	r2, #31
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	43da      	mvns	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	400a      	ands	r2, r1
 800b39e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3b41      	subs	r3, #65	; 0x41
 800b3ba:	fa00 f203 	lsl.w	r2, r0, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b3c6:	4b29      	ldr	r3, [pc, #164]	; (800b46c <HAL_ADC_ConfigChannel+0x250>)
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a28      	ldr	r2, [pc, #160]	; (800b470 <HAL_ADC_ConfigChannel+0x254>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d10f      	bne.n	800b3f4 <HAL_ADC_ConfigChannel+0x1d8>
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b12      	cmp	r3, #18
 800b3da:	d10b      	bne.n	800b3f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a1d      	ldr	r2, [pc, #116]	; (800b470 <HAL_ADC_ConfigChannel+0x254>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d12b      	bne.n	800b456 <HAL_ADC_ConfigChannel+0x23a>
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a1c      	ldr	r2, [pc, #112]	; (800b474 <HAL_ADC_ConfigChannel+0x258>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <HAL_ADC_ConfigChannel+0x1f4>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b11      	cmp	r3, #17
 800b40e:	d122      	bne.n	800b456 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a11      	ldr	r2, [pc, #68]	; (800b474 <HAL_ADC_ConfigChannel+0x258>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d111      	bne.n	800b456 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <HAL_ADC_ConfigChannel+0x25c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a11      	ldr	r2, [pc, #68]	; (800b47c <HAL_ADC_ConfigChannel+0x260>)
 800b438:	fba2 2303 	umull	r2, r3, r2, r3
 800b43c:	0c9a      	lsrs	r2, r3, #18
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b448:	e002      	b.n	800b450 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f9      	bne.n	800b44a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	40012300 	.word	0x40012300
 800b470:	40012000 	.word	0x40012000
 800b474:	10000012 	.word	0x10000012
 800b478:	20000048 	.word	0x20000048
 800b47c:	431bde83 	.word	0x431bde83

0800b480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b488:	4b79      	ldr	r3, [pc, #484]	; (800b670 <ADC_Init+0x1f0>)
 800b48a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6859      	ldr	r1, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	021a      	lsls	r2, r3, #8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b4d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6859      	ldr	r1, [r3, #4]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689a      	ldr	r2, [r3, #8]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689a      	ldr	r2, [r3, #8]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6899      	ldr	r1, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	4a58      	ldr	r2, [pc, #352]	; (800b674 <ADC_Init+0x1f4>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d022      	beq.n	800b55e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6899      	ldr	r1, [r3, #8]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689a      	ldr	r2, [r3, #8]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6899      	ldr	r1, [r3, #8]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	609a      	str	r2, [r3, #8]
 800b55c:	e00f      	b.n	800b57e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b56c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b57c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f022 0202 	bic.w	r2, r2, #2
 800b58c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6899      	ldr	r1, [r3, #8]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	7e1b      	ldrb	r3, [r3, #24]
 800b598:	005a      	lsls	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01b      	beq.n	800b5e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b5ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6859      	ldr	r1, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	035a      	lsls	r2, r3, #13
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
 800b5e2:	e007      	b.n	800b5f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	3b01      	subs	r3, #1
 800b610:	051a      	lsls	r2, r3, #20
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6899      	ldr	r1, [r3, #8]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b636:	025a      	lsls	r2, r3, #9
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689a      	ldr	r2, [r3, #8]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b64e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6899      	ldr	r1, [r3, #8]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	029a      	lsls	r2, r3, #10
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	609a      	str	r2, [r3, #8]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	40012300 	.word	0x40012300
 800b674:	0f000001 	.word	0x0f000001

0800b678 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <__NVIC_SetPriorityGrouping+0x44>)
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b6b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b6b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b6be:	4a04      	ldr	r2, [pc, #16]	; (800b6d0 <__NVIC_SetPriorityGrouping+0x44>)
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	60d3      	str	r3, [r2, #12]
}
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	e000ed00 	.word	0xe000ed00

0800b6d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6d8:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <__NVIC_GetPriorityGrouping+0x18>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	0a1b      	lsrs	r3, r3, #8
 800b6de:	f003 0307 	and.w	r3, r3, #7
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	e000ed00 	.word	0xe000ed00

0800b6f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	db0b      	blt.n	800b71a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	f003 021f 	and.w	r2, r3, #31
 800b708:	4907      	ldr	r1, [pc, #28]	; (800b728 <__NVIC_EnableIRQ+0x38>)
 800b70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b70e:	095b      	lsrs	r3, r3, #5
 800b710:	2001      	movs	r0, #1
 800b712:	fa00 f202 	lsl.w	r2, r0, r2
 800b716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	e000e100 	.word	0xe000e100

0800b72c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	db0a      	blt.n	800b756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	b2da      	uxtb	r2, r3
 800b744:	490c      	ldr	r1, [pc, #48]	; (800b778 <__NVIC_SetPriority+0x4c>)
 800b746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b74a:	0112      	lsls	r2, r2, #4
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	440b      	add	r3, r1
 800b750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b754:	e00a      	b.n	800b76c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	4908      	ldr	r1, [pc, #32]	; (800b77c <__NVIC_SetPriority+0x50>)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	f003 030f 	and.w	r3, r3, #15
 800b762:	3b04      	subs	r3, #4
 800b764:	0112      	lsls	r2, r2, #4
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	440b      	add	r3, r1
 800b76a:	761a      	strb	r2, [r3, #24]
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	e000e100 	.word	0xe000e100
 800b77c:	e000ed00 	.word	0xe000ed00

0800b780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b780:	b480      	push	{r7}
 800b782:	b089      	sub	sp, #36	; 0x24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	f1c3 0307 	rsb	r3, r3, #7
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	bf28      	it	cs
 800b79e:	2304      	movcs	r3, #4
 800b7a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	2b06      	cmp	r3, #6
 800b7a8:	d902      	bls.n	800b7b0 <NVIC_EncodePriority+0x30>
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	3b03      	subs	r3, #3
 800b7ae:	e000      	b.n	800b7b2 <NVIC_EncodePriority+0x32>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b7be:	43da      	mvns	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d2:	43d9      	mvns	r1, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7d8:	4313      	orrs	r3, r2
         );
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3724      	adds	r7, #36	; 0x24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff ff4c 	bl	800b68c <__NVIC_SetPriorityGrouping>
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b80e:	f7ff ff61 	bl	800b6d4 <__NVIC_GetPriorityGrouping>
 800b812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	68b9      	ldr	r1, [r7, #8]
 800b818:	6978      	ldr	r0, [r7, #20]
 800b81a:	f7ff ffb1 	bl	800b780 <NVIC_EncodePriority>
 800b81e:	4602      	mov	r2, r0
 800b820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff ff80 	bl	800b72c <__NVIC_SetPriority>
}
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff ff54 	bl	800b6f0 <__NVIC_EnableIRQ>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b85c:	f7ff fb0c 	bl	800ae78 <HAL_GetTick>
 800b860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e099      	b.n	800b9a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f022 0201 	bic.w	r2, r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b88c:	e00f      	b.n	800b8ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b88e:	f7ff faf3 	bl	800ae78 <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	2b05      	cmp	r3, #5
 800b89a:	d908      	bls.n	800b8ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e078      	b.n	800b9a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e8      	bne.n	800b88e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4b38      	ldr	r3, [pc, #224]	; (800b9a8 <HAL_DMA_Init+0x158>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	2b04      	cmp	r3, #4
 800b906:	d107      	bne.n	800b918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	4313      	orrs	r3, r2
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	4313      	orrs	r3, r2
 800b916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4313      	orrs	r3, r2
 800b938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d117      	bne.n	800b972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	4313      	orrs	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00e      	beq.n	800b972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fb01 	bl	800bf5c <DMA_CheckFifoParam>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2240      	movs	r2, #64	; 0x40
 800b964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b96e:	2301      	movs	r3, #1
 800b970:	e016      	b.n	800b9a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fab8 	bl	800bef0 <DMA_CalcBaseAndBitshift>
 800b980:	4603      	mov	r3, r0
 800b982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b988:	223f      	movs	r2, #63	; 0x3f
 800b98a:	409a      	lsls	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	f010803f 	.word	0xf010803f

0800b9ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d101      	bne.n	800b9d2 <HAL_DMA_Start_IT+0x26>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e040      	b.n	800ba54 <HAL_DMA_Start_IT+0xa8>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d12f      	bne.n	800ba46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68b9      	ldr	r1, [r7, #8]
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 fa4a 	bl	800be94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba04:	223f      	movs	r2, #63	; 0x3f
 800ba06:	409a      	lsls	r2, r3
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f042 0216 	orr.w	r2, r2, #22
 800ba1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f042 0208 	orr.w	r2, r2, #8
 800ba32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f042 0201 	orr.w	r2, r2, #1
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e005      	b.n	800ba52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ba4e:	2302      	movs	r3, #2
 800ba50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ba6a:	f7ff fa05 	bl	800ae78 <HAL_GetTick>
 800ba6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d008      	beq.n	800ba8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2280      	movs	r2, #128	; 0x80
 800ba80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e052      	b.n	800bb34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0216 	bic.w	r2, r2, #22
 800ba9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	695a      	ldr	r2, [r3, #20]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <HAL_DMA_Abort+0x62>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baba:	2b00      	cmp	r3, #0
 800babc:	d007      	beq.n	800bace <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 0208 	bic.w	r2, r2, #8
 800bacc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f022 0201 	bic.w	r2, r2, #1
 800badc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bade:	e013      	b.n	800bb08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bae0:	f7ff f9ca 	bl	800ae78 <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b05      	cmp	r3, #5
 800baec:	d90c      	bls.n	800bb08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2203      	movs	r2, #3
 800baf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e015      	b.n	800bb34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1e4      	bne.n	800bae0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb1a:	223f      	movs	r2, #63	; 0x3f
 800bb1c:	409a      	lsls	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d004      	beq.n	800bb5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2280      	movs	r2, #128	; 0x80
 800bb54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	e00c      	b.n	800bb74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2205      	movs	r2, #5
 800bb5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0201 	bic.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bb8c:	4b92      	ldr	r3, [pc, #584]	; (800bdd8 <HAL_DMA_IRQHandler+0x258>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a92      	ldr	r2, [pc, #584]	; (800bddc <HAL_DMA_IRQHandler+0x25c>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	0a9b      	lsrs	r3, r3, #10
 800bb98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbaa:	2208      	movs	r2, #8
 800bbac:	409a      	lsls	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01a      	beq.n	800bbec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d013      	beq.n	800bbec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f022 0204 	bic.w	r2, r2, #4
 800bbd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd8:	2208      	movs	r2, #8
 800bbda:	409a      	lsls	r2, r3
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe4:	f043 0201 	orr.w	r2, r3, #1
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	409a      	lsls	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d012      	beq.n	800bc22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0e:	2201      	movs	r2, #1
 800bc10:	409a      	lsls	r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1a:	f043 0202 	orr.w	r2, r3, #2
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc26:	2204      	movs	r2, #4
 800bc28:	409a      	lsls	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d012      	beq.n	800bc58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc44:	2204      	movs	r2, #4
 800bc46:	409a      	lsls	r2, r3
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc50:	f043 0204 	orr.w	r2, r3, #4
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	409a      	lsls	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4013      	ands	r3, r2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d043      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d03c      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc7a:	2210      	movs	r2, #16
 800bc7c:	409a      	lsls	r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d018      	beq.n	800bcc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d108      	bne.n	800bcb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d024      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
 800bcae:	e01f      	b.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01b      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
 800bcc0:	e016      	b.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d107      	bne.n	800bce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 0208 	bic.w	r2, r2, #8
 800bcde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	409a      	lsls	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 808e 	beq.w	800be1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0310 	and.w	r3, r3, #16
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 8086 	beq.w	800be1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd16:	2220      	movs	r2, #32
 800bd18:	409a      	lsls	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d136      	bne.n	800bd98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 0216 	bic.w	r2, r2, #22
 800bd38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	695a      	ldr	r2, [r3, #20]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d103      	bne.n	800bd5a <HAL_DMA_IRQHandler+0x1da>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d007      	beq.n	800bd6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0208 	bic.w	r2, r2, #8
 800bd68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd6e:	223f      	movs	r2, #63	; 0x3f
 800bd70:	409a      	lsls	r2, r3
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d07d      	beq.n	800be8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
        }
        return;
 800bd96:	e078      	b.n	800be8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d01c      	beq.n	800bde0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d108      	bne.n	800bdc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d030      	beq.n	800be1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4798      	blx	r3
 800bdc4:	e02b      	b.n	800be1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d027      	beq.n	800be1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4798      	blx	r3
 800bdd6:	e022      	b.n	800be1e <HAL_DMA_IRQHandler+0x29e>
 800bdd8:	20000048 	.word	0x20000048
 800bddc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10f      	bne.n	800be0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 0210 	bic.w	r2, r2, #16
 800bdfc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d003      	beq.n	800be1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be22:	2b00      	cmp	r3, #0
 800be24:	d032      	beq.n	800be8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d022      	beq.n	800be78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2205      	movs	r2, #5
 800be36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f022 0201 	bic.w	r2, r2, #1
 800be48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	429a      	cmp	r2, r3
 800be54:	d307      	bcc.n	800be66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f2      	bne.n	800be4a <HAL_DMA_IRQHandler+0x2ca>
 800be64:	e000      	b.n	800be68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800be66:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d005      	beq.n	800be8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	4798      	blx	r3
 800be88:	e000      	b.n	800be8c <HAL_DMA_IRQHandler+0x30c>
        return;
 800be8a:	bf00      	nop
    }
  }
}
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop

0800be94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800beb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b40      	cmp	r3, #64	; 0x40
 800bec0:	d108      	bne.n	800bed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bed2:	e007      	b.n	800bee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	60da      	str	r2, [r3, #12]
}
 800bee4:	bf00      	nop
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	3b10      	subs	r3, #16
 800bf00:	4a14      	ldr	r2, [pc, #80]	; (800bf54 <DMA_CalcBaseAndBitshift+0x64>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	091b      	lsrs	r3, r3, #4
 800bf08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bf0a:	4a13      	ldr	r2, [pc, #76]	; (800bf58 <DMA_CalcBaseAndBitshift+0x68>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d909      	bls.n	800bf32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	659a      	str	r2, [r3, #88]	; 0x58
 800bf30:	e007      	b.n	800bf42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf3a:	f023 0303 	bic.w	r3, r3, #3
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	aaaaaaab 	.word	0xaaaaaaab
 800bf58:	0801a170 	.word	0x0801a170

0800bf5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d11f      	bne.n	800bfb6 <DMA_CheckFifoParam+0x5a>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d856      	bhi.n	800c02a <DMA_CheckFifoParam+0xce>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <DMA_CheckFifoParam+0x28>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bf95 	.word	0x0800bf95
 800bf88:	0800bfa7 	.word	0x0800bfa7
 800bf8c:	0800bf95 	.word	0x0800bf95
 800bf90:	0800c02b 	.word	0x0800c02b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d046      	beq.n	800c02e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfa4:	e043      	b.n	800c02e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfae:	d140      	bne.n	800c032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfb4:	e03d      	b.n	800c032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfbe:	d121      	bne.n	800c004 <DMA_CheckFifoParam+0xa8>
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d837      	bhi.n	800c036 <DMA_CheckFifoParam+0xda>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <DMA_CheckFifoParam+0x70>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800bfe3 	.word	0x0800bfe3
 800bfd4:	0800bfdd 	.word	0x0800bfdd
 800bfd8:	0800bff5 	.word	0x0800bff5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe0:	e030      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d025      	beq.n	800c03a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bff2:	e022      	b.n	800c03a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bffc:	d11f      	bne.n	800c03e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c002:	e01c      	b.n	800c03e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d903      	bls.n	800c012 <DMA_CheckFifoParam+0xb6>
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d003      	beq.n	800c018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c010:	e018      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	73fb      	strb	r3, [r7, #15]
      break;
 800c016:	e015      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00e      	beq.n	800c042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	73fb      	strb	r3, [r7, #15]
      break;
 800c028:	e00b      	b.n	800c042 <DMA_CheckFifoParam+0xe6>
      break;
 800c02a:	bf00      	nop
 800c02c:	e00a      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c02e:	bf00      	nop
 800c030:	e008      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c032:	bf00      	nop
 800c034:	e006      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c036:	bf00      	nop
 800c038:	e004      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c03a:	bf00      	nop
 800c03c:	e002      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;   
 800c03e:	bf00      	nop
 800c040:	e000      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c042:	bf00      	nop
    }
  } 
  
  return status; 
 800c044:	7bfb      	ldrb	r3, [r7, #15]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop

0800c054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c054:	b480      	push	{r7}
 800c056:	b089      	sub	sp, #36	; 0x24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c05e:	2300      	movs	r3, #0
 800c060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c066:	2300      	movs	r3, #0
 800c068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c06a:	2300      	movs	r3, #0
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	e177      	b.n	800c360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c070:	2201      	movs	r2, #1
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	fa02 f303 	lsl.w	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	4013      	ands	r3, r2
 800c082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	f040 8166 	bne.w	800c35a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b01      	cmp	r3, #1
 800c098:	d005      	beq.n	800c0a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d130      	bne.n	800c108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b6:	43db      	mvns	r3, r3
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c0dc:	2201      	movs	r2, #1
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e4:	43db      	mvns	r3, r3
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	091b      	lsrs	r3, r3, #4
 800c0f2:	f003 0201 	and.w	r2, r3, #1
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f003 0303 	and.w	r3, r3, #3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d017      	beq.n	800c144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	2203      	movs	r2, #3
 800c120:	fa02 f303 	lsl.w	r3, r2, r3
 800c124:	43db      	mvns	r3, r3
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	4013      	ands	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	689a      	ldr	r2, [r3, #8]
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	fa02 f303 	lsl.w	r3, r2, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d123      	bne.n	800c198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	08da      	lsrs	r2, r3, #3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3208      	adds	r2, #8
 800c158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	f003 0307 	and.w	r3, r3, #7
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	220f      	movs	r2, #15
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	43db      	mvns	r3, r3
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	4013      	ands	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	691a      	ldr	r2, [r3, #16]
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f003 0307 	and.w	r3, r3, #7
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	fa02 f303 	lsl.w	r3, r2, r3
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	4313      	orrs	r3, r2
 800c188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	08da      	lsrs	r2, r3, #3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3208      	adds	r2, #8
 800c192:	69b9      	ldr	r1, [r7, #24]
 800c194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a8:	43db      	mvns	r3, r3
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f003 0203 	and.w	r2, r3, #3
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80c0 	beq.w	800c35a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	4b66      	ldr	r3, [pc, #408]	; (800c378 <HAL_GPIO_Init+0x324>)
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e2:	4a65      	ldr	r2, [pc, #404]	; (800c378 <HAL_GPIO_Init+0x324>)
 800c1e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1e8:	6453      	str	r3, [r2, #68]	; 0x44
 800c1ea:	4b63      	ldr	r3, [pc, #396]	; (800c378 <HAL_GPIO_Init+0x324>)
 800c1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c1f6:	4a61      	ldr	r2, [pc, #388]	; (800c37c <HAL_GPIO_Init+0x328>)
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	089b      	lsrs	r3, r3, #2
 800c1fc:	3302      	adds	r3, #2
 800c1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	220f      	movs	r2, #15
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	43db      	mvns	r3, r3
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	4013      	ands	r3, r2
 800c218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a58      	ldr	r2, [pc, #352]	; (800c380 <HAL_GPIO_Init+0x32c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d037      	beq.n	800c292 <HAL_GPIO_Init+0x23e>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a57      	ldr	r2, [pc, #348]	; (800c384 <HAL_GPIO_Init+0x330>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d031      	beq.n	800c28e <HAL_GPIO_Init+0x23a>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a56      	ldr	r2, [pc, #344]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d02b      	beq.n	800c28a <HAL_GPIO_Init+0x236>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a55      	ldr	r2, [pc, #340]	; (800c38c <HAL_GPIO_Init+0x338>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d025      	beq.n	800c286 <HAL_GPIO_Init+0x232>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a54      	ldr	r2, [pc, #336]	; (800c390 <HAL_GPIO_Init+0x33c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d01f      	beq.n	800c282 <HAL_GPIO_Init+0x22e>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a53      	ldr	r2, [pc, #332]	; (800c394 <HAL_GPIO_Init+0x340>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d019      	beq.n	800c27e <HAL_GPIO_Init+0x22a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a52      	ldr	r2, [pc, #328]	; (800c398 <HAL_GPIO_Init+0x344>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d013      	beq.n	800c27a <HAL_GPIO_Init+0x226>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a51      	ldr	r2, [pc, #324]	; (800c39c <HAL_GPIO_Init+0x348>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d00d      	beq.n	800c276 <HAL_GPIO_Init+0x222>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a50      	ldr	r2, [pc, #320]	; (800c3a0 <HAL_GPIO_Init+0x34c>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d007      	beq.n	800c272 <HAL_GPIO_Init+0x21e>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a4f      	ldr	r2, [pc, #316]	; (800c3a4 <HAL_GPIO_Init+0x350>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d101      	bne.n	800c26e <HAL_GPIO_Init+0x21a>
 800c26a:	2309      	movs	r3, #9
 800c26c:	e012      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c26e:	230a      	movs	r3, #10
 800c270:	e010      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c272:	2308      	movs	r3, #8
 800c274:	e00e      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c276:	2307      	movs	r3, #7
 800c278:	e00c      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c27a:	2306      	movs	r3, #6
 800c27c:	e00a      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c27e:	2305      	movs	r3, #5
 800c280:	e008      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c282:	2304      	movs	r3, #4
 800c284:	e006      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c286:	2303      	movs	r3, #3
 800c288:	e004      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c28a:	2302      	movs	r3, #2
 800c28c:	e002      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c28e:	2301      	movs	r3, #1
 800c290:	e000      	b.n	800c294 <HAL_GPIO_Init+0x240>
 800c292:	2300      	movs	r3, #0
 800c294:	69fa      	ldr	r2, [r7, #28]
 800c296:	f002 0203 	and.w	r2, r2, #3
 800c29a:	0092      	lsls	r2, r2, #2
 800c29c:	4093      	lsls	r3, r2
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c2a4:	4935      	ldr	r1, [pc, #212]	; (800c37c <HAL_GPIO_Init+0x328>)
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	089b      	lsrs	r3, r3, #2
 800c2aa:	3302      	adds	r3, #2
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c2b2:	4b3d      	ldr	r3, [pc, #244]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	43db      	mvns	r3, r3
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c2d6:	4a34      	ldr	r2, [pc, #208]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c2dc:	4b32      	ldr	r3, [pc, #200]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	43db      	mvns	r3, r3
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c300:	4a29      	ldr	r2, [pc, #164]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c306:	4b28      	ldr	r3, [pc, #160]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	43db      	mvns	r3, r3
 800c310:	69ba      	ldr	r2, [r7, #24]
 800c312:	4013      	ands	r3, r2
 800c314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	4313      	orrs	r3, r2
 800c328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c32a:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c330:	4b1d      	ldr	r3, [pc, #116]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	43db      	mvns	r3, r3
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	4013      	ands	r3, r2
 800c33e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	4313      	orrs	r3, r2
 800c352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c354:	4a14      	ldr	r2, [pc, #80]	; (800c3a8 <HAL_GPIO_Init+0x354>)
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	3301      	adds	r3, #1
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	2b0f      	cmp	r3, #15
 800c364:	f67f ae84 	bls.w	800c070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	3724      	adds	r7, #36	; 0x24
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	40023800 	.word	0x40023800
 800c37c:	40013800 	.word	0x40013800
 800c380:	40020000 	.word	0x40020000
 800c384:	40020400 	.word	0x40020400
 800c388:	40020800 	.word	0x40020800
 800c38c:	40020c00 	.word	0x40020c00
 800c390:	40021000 	.word	0x40021000
 800c394:	40021400 	.word	0x40021400
 800c398:	40021800 	.word	0x40021800
 800c39c:	40021c00 	.word	0x40021c00
 800c3a0:	40022000 	.word	0x40022000
 800c3a4:	40022400 	.word	0x40022400
 800c3a8:	40013c00 	.word	0x40013c00

0800c3ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	807b      	strh	r3, [r7, #2]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3bc:	787b      	ldrb	r3, [r7, #1]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d003      	beq.n	800c3ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3c2:	887a      	ldrh	r2, [r7, #2]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c3c8:	e003      	b.n	800c3d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c3ca:	887b      	ldrh	r3, [r7, #2]
 800c3cc:	041a      	lsls	r2, r3, #16
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	619a      	str	r2, [r3, #24]
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e0:	b08f      	sub	sp, #60	; 0x3c
 800c3e2:	af0a      	add	r7, sp, #40	; 0x28
 800c3e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e10f      	b.n	800c610 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f00a f996 	bl	801673c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2203      	movs	r2, #3
 800c414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c420:	2b00      	cmp	r3, #0
 800c422:	d102      	bne.n	800c42a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4618      	mov	r0, r3
 800c430:	f004 fb23 	bl	8010a7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	603b      	str	r3, [r7, #0]
 800c43a:	687e      	ldr	r6, [r7, #4]
 800c43c:	466d      	mov	r5, sp
 800c43e:	f106 0410 	add.w	r4, r6, #16
 800c442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c44a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c44e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c452:	1d33      	adds	r3, r6, #4
 800c454:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c456:	6838      	ldr	r0, [r7, #0]
 800c458:	f004 f9fa 	bl	8010850 <USB_CoreInit>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2202      	movs	r2, #2
 800c466:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e0d0      	b.n	800c610 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2100      	movs	r1, #0
 800c474:	4618      	mov	r0, r3
 800c476:	f004 fb11 	bl	8010a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c47a:	2300      	movs	r3, #0
 800c47c:	73fb      	strb	r3, [r7, #15]
 800c47e:	e04a      	b.n	800c516 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c480:	7bfa      	ldrb	r2, [r7, #15]
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	4613      	mov	r3, r2
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	1a9b      	subs	r3, r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	333d      	adds	r3, #61	; 0x3d
 800c490:	2201      	movs	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c494:	7bfa      	ldrb	r2, [r7, #15]
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	4613      	mov	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	1a9b      	subs	r3, r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	440b      	add	r3, r1
 800c4a2:	333c      	adds	r3, #60	; 0x3c
 800c4a4:	7bfa      	ldrb	r2, [r7, #15]
 800c4a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c4a8:	7bfa      	ldrb	r2, [r7, #15]
 800c4aa:	7bfb      	ldrb	r3, [r7, #15]
 800c4ac:	b298      	uxth	r0, r3
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	1a9b      	subs	r3, r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	440b      	add	r3, r1
 800c4ba:	3342      	adds	r3, #66	; 0x42
 800c4bc:	4602      	mov	r2, r0
 800c4be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c4c0:	7bfa      	ldrb	r2, [r7, #15]
 800c4c2:	6879      	ldr	r1, [r7, #4]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	1a9b      	subs	r3, r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	440b      	add	r3, r1
 800c4ce:	333f      	adds	r3, #63	; 0x3f
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c4d4:	7bfa      	ldrb	r2, [r7, #15]
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	1a9b      	subs	r3, r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	440b      	add	r3, r1
 800c4e2:	3344      	adds	r3, #68	; 0x44
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c4e8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	1a9b      	subs	r3, r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	3348      	adds	r3, #72	; 0x48
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c4fc:	7bfa      	ldrb	r2, [r7, #15]
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	4613      	mov	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	1a9b      	subs	r3, r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	440b      	add	r3, r1
 800c50a:	3350      	adds	r3, #80	; 0x50
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	3301      	adds	r3, #1
 800c514:	73fb      	strb	r3, [r7, #15]
 800c516:	7bfa      	ldrb	r2, [r7, #15]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d3af      	bcc.n	800c480 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
 800c524:	e044      	b.n	800c5b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c526:	7bfa      	ldrb	r2, [r7, #15]
 800c528:	6879      	ldr	r1, [r7, #4]
 800c52a:	4613      	mov	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	1a9b      	subs	r3, r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	440b      	add	r3, r1
 800c534:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c538:	2200      	movs	r2, #0
 800c53a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c53c:	7bfa      	ldrb	r2, [r7, #15]
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4613      	mov	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	1a9b      	subs	r3, r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	440b      	add	r3, r1
 800c54a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c54e:	7bfa      	ldrb	r2, [r7, #15]
 800c550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c552:	7bfa      	ldrb	r2, [r7, #15]
 800c554:	6879      	ldr	r1, [r7, #4]
 800c556:	4613      	mov	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	1a9b      	subs	r3, r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	440b      	add	r3, r1
 800c560:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c568:	7bfa      	ldrb	r2, [r7, #15]
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c57a:	2200      	movs	r2, #0
 800c57c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c57e:	7bfa      	ldrb	r2, [r7, #15]
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	4613      	mov	r3, r2
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	440b      	add	r3, r1
 800c58c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c594:	7bfa      	ldrb	r2, [r7, #15]
 800c596:	6879      	ldr	r1, [r7, #4]
 800c598:	4613      	mov	r3, r2
 800c59a:	00db      	lsls	r3, r3, #3
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	440b      	add	r3, r1
 800c5a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
 800c5b0:	7bfa      	ldrb	r2, [r7, #15]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d3b5      	bcc.n	800c526 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	687e      	ldr	r6, [r7, #4]
 800c5c2:	466d      	mov	r5, sp
 800c5c4:	f106 0410 	add.w	r4, r6, #16
 800c5c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c5d4:	e885 0003 	stmia.w	r5, {r0, r1}
 800c5d8:	1d33      	adds	r3, r6, #4
 800c5da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5dc:	6838      	ldr	r0, [r7, #0]
 800c5de:	f004 faa9 	bl	8010b34 <USB_DevInit>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e00d      	b.n	800c610 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f005 fb25 	bl	8011c58 <USB_DevDisconnect>

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c618 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d101      	bne.n	800c634 <HAL_PCD_Start+0x1c>
 800c630:	2302      	movs	r3, #2
 800c632:	e020      	b.n	800c676 <HAL_PCD_Start+0x5e>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	2b01      	cmp	r3, #1
 800c642:	d109      	bne.n	800c658 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d005      	beq.n	800c658 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c650:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f004 f9fb 	bl	8010a58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4618      	mov	r0, r3
 800c668:	f005 fad5 	bl	8011c16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c67e:	b590      	push	{r4, r7, lr}
 800c680:	b08d      	sub	sp, #52	; 0x34
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f005 fb93 	bl	8011dc0 <USB_GetMode>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f040 839d 	bne.w	800cddc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f005 faf7 	bl	8011c9a <USB_ReadInterrupts>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8393 	beq.w	800cdda <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f005 faee 	bl	8011c9a <USB_ReadInterrupts>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d107      	bne.n	800c6d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	695a      	ldr	r2, [r3, #20]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f002 0202 	and.w	r2, r2, #2
 800c6d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f005 fadc 	bl	8011c9a <USB_ReadInterrupts>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	2b10      	cmp	r3, #16
 800c6ea:	d161      	bne.n	800c7b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	699a      	ldr	r2, [r3, #24]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 0210 	bic.w	r2, r2, #16
 800c6fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	6a1b      	ldr	r3, [r3, #32]
 800c700:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	f003 020f 	and.w	r2, r3, #15
 800c708:	4613      	mov	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	1a9b      	subs	r3, r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	4413      	add	r3, r2
 800c718:	3304      	adds	r3, #4
 800c71a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	0c5b      	lsrs	r3, r3, #17
 800c720:	f003 030f 	and.w	r3, r3, #15
 800c724:	2b02      	cmp	r3, #2
 800c726:	d124      	bne.n	800c772 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c72e:	4013      	ands	r3, r2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d035      	beq.n	800c7a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	091b      	lsrs	r3, r3, #4
 800c73c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c73e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c742:	b29b      	uxth	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	6a38      	ldr	r0, [r7, #32]
 800c748:	f005 f913 	bl	8011972 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	091b      	lsrs	r3, r3, #4
 800c754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c758:	441a      	add	r2, r3
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	699a      	ldr	r2, [r3, #24]
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	091b      	lsrs	r3, r3, #4
 800c766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c76a:	441a      	add	r2, r3
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	619a      	str	r2, [r3, #24]
 800c770:	e016      	b.n	800c7a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	0c5b      	lsrs	r3, r3, #17
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	2b06      	cmp	r3, #6
 800c77c:	d110      	bne.n	800c7a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c784:	2208      	movs	r2, #8
 800c786:	4619      	mov	r1, r3
 800c788:	6a38      	ldr	r0, [r7, #32]
 800c78a:	f005 f8f2 	bl	8011972 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	699a      	ldr	r2, [r3, #24]
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	091b      	lsrs	r3, r3, #4
 800c796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c79a:	441a      	add	r2, r3
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	699a      	ldr	r2, [r3, #24]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0210 	orr.w	r2, r2, #16
 800c7ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f005 fa70 	bl	8011c9a <USB_ReadInterrupts>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c7c4:	d16e      	bne.n	800c8a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f005 fa76 	bl	8011cc0 <USB_ReadDevAllOutEpInterrupt>
 800c7d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c7d6:	e062      	b.n	800c89e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d057      	beq.n	800c892 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e8:	b2d2      	uxtb	r2, r2
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f005 fa9b 	bl	8011d28 <USB_ReadDevOutEPInterrupt>
 800c7f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00c      	beq.n	800c818 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80a:	461a      	mov	r2, r3
 800c80c:	2301      	movs	r3, #1
 800c80e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fdb0 	bl	800d378 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f003 0308 	and.w	r3, r3, #8
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00c      	beq.n	800c83c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82e:	461a      	mov	r2, r3
 800c830:	2308      	movs	r3, #8
 800c832:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 feaa 	bl	800d590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f003 0310 	and.w	r3, r3, #16
 800c842:	2b00      	cmp	r3, #0
 800c844:	d008      	beq.n	800c858 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c852:	461a      	mov	r2, r3
 800c854:	2310      	movs	r3, #16
 800c856:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f003 0320 	and.w	r3, r3, #32
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d008      	beq.n	800c874 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86e:	461a      	mov	r2, r3
 800c870:	2320      	movs	r3, #32
 800c872:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88a:	461a      	mov	r2, r3
 800c88c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c890:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	3301      	adds	r3, #1
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d199      	bne.n	800c7d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f005 f9f6 	bl	8011c9a <USB_ReadInterrupts>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8b8:	f040 80c0 	bne.w	800ca3c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f005 fa17 	bl	8011cf4 <USB_ReadDevAllInEpInterrupt>
 800c8c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c8cc:	e0b2      	b.n	800ca34 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 80a7 	beq.w	800ca28 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f005 fa3d 	bl	8011d64 <USB_ReadDevInEPInterrupt>
 800c8ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d057      	beq.n	800c9a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	f003 030f 	and.w	r3, r3, #15
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	43db      	mvns	r3, r3
 800c910:	69f9      	ldr	r1, [r7, #28]
 800c912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c916:	4013      	ands	r3, r2
 800c918:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c926:	461a      	mov	r2, r3
 800c928:	2301      	movs	r3, #1
 800c92a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d132      	bne.n	800c99a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c938:	4613      	mov	r3, r2
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	440b      	add	r3, r1
 800c942:	3348      	adds	r3, #72	; 0x48
 800c944:	6819      	ldr	r1, [r3, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94a:	4613      	mov	r3, r2
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4403      	add	r3, r0
 800c954:	3344      	adds	r3, #68	; 0x44
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4419      	add	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95e:	4613      	mov	r3, r2
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	1a9b      	subs	r3, r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4403      	add	r3, r0
 800c968:	3348      	adds	r3, #72	; 0x48
 800c96a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d113      	bne.n	800c99a <HAL_PCD_IRQHandler+0x31c>
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c976:	4613      	mov	r3, r2
 800c978:	00db      	lsls	r3, r3, #3
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	440b      	add	r3, r1
 800c980:	3350      	adds	r3, #80	; 0x50
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c992:	461a      	mov	r2, r3
 800c994:	2101      	movs	r1, #1
 800c996:	f005 fa45 	bl	8011e24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f009 ff4c 	bl	801683e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f003 0308 	and.w	r3, r3, #8
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d008      	beq.n	800c9c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	015a      	lsls	r2, r3, #5
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9bc:	461a      	mov	r2, r3
 800c9be:	2308      	movs	r3, #8
 800c9c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f003 0310 	and.w	r3, r3, #16
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d008      	beq.n	800c9de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	461a      	mov	r2, r3
 800c9da:	2310      	movs	r3, #16
 800c9dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d008      	beq.n	800c9fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	015a      	lsls	r2, r3, #5
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	2340      	movs	r3, #64	; 0x40
 800c9f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d008      	beq.n	800ca16 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	461a      	mov	r2, r3
 800ca12:	2302      	movs	r3, #2
 800ca14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ca20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fc1b 	bl	800d25e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca30:	085b      	lsrs	r3, r3, #1
 800ca32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f47f af49 	bne.w	800c8ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f005 f92a 	bl	8011c9a <USB_ReadInterrupts>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca50:	d122      	bne.n	800ca98 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	69fa      	ldr	r2, [r7, #28]
 800ca5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca60:	f023 0301 	bic.w	r3, r3, #1
 800ca64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d108      	bne.n	800ca82 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ca78:	2100      	movs	r1, #0
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fe26 	bl	800d6cc <HAL_PCDEx_LPM_Callback>
 800ca80:	e002      	b.n	800ca88 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f009 ff52 	bl	801692c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	695a      	ldr	r2, [r3, #20]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ca96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f005 f8fc 	bl	8011c9a <USB_ReadInterrupts>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caac:	d112      	bne.n	800cad4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d102      	bne.n	800cac4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f009 ff0e 	bl	80168e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	695a      	ldr	r2, [r3, #20]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cad2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4618      	mov	r0, r3
 800cada:	f005 f8de 	bl	8011c9a <USB_ReadInterrupts>
 800cade:	4603      	mov	r3, r0
 800cae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae8:	f040 80c7 	bne.w	800cc7a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cafa:	f023 0301 	bic.w	r3, r3, #1
 800cafe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2110      	movs	r1, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f004 f978 	bl	8010dfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb10:	e056      	b.n	800cbc0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb36:	0151      	lsls	r1, r2, #5
 800cb38:	69fa      	ldr	r2, [r7, #28]
 800cb3a:	440a      	add	r2, r1
 800cb3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb44:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb56:	0151      	lsls	r1, r2, #5
 800cb58:	69fa      	ldr	r2, [r7, #28]
 800cb5a:	440a      	add	r2, r1
 800cb5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	461a      	mov	r2, r3
 800cb74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	015a      	lsls	r2, r3, #5
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	4413      	add	r3, r2
 800cb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8a:	0151      	lsls	r1, r2, #5
 800cb8c:	69fa      	ldr	r2, [r7, #28]
 800cb8e:	440a      	add	r2, r1
 800cb90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbaa:	0151      	lsls	r1, r2, #5
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	440a      	add	r2, r1
 800cbb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d3a3      	bcc.n	800cb12 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbd0:	69db      	ldr	r3, [r3, #28]
 800cbd2:	69fa      	ldr	r2, [r7, #28]
 800cbd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbd8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cbdc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d016      	beq.n	800cc14 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbf0:	69fa      	ldr	r2, [r7, #28]
 800cbf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbf6:	f043 030b 	orr.w	r3, r3, #11
 800cbfa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc0c:	f043 030b 	orr.w	r3, r3, #11
 800cc10:	6453      	str	r3, [r2, #68]	; 0x44
 800cc12:	e015      	b.n	800cc40 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	69fa      	ldr	r2, [r7, #28]
 800cc1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cc2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc3a:	f043 030b 	orr.w	r3, r3, #11
 800cc3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	69fa      	ldr	r2, [r7, #28]
 800cc4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6818      	ldr	r0, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc64:	461a      	mov	r2, r3
 800cc66:	f005 f8dd 	bl	8011e24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	695a      	ldr	r2, [r3, #20]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cc78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f005 f80b 	bl	8011c9a <USB_ReadInterrupts>
 800cc84:	4603      	mov	r3, r0
 800cc86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc8e:	d124      	bne.n	800ccda <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f005 f8a1 	bl	8011ddc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f004 f909 	bl	8010eb6 <USB_GetDevSpeed>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681c      	ldr	r4, [r3, #0]
 800ccb0:	f001 f92c 	bl	800df0c <HAL_RCC_GetHCLKFreq>
 800ccb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f003 fe28 	bl	8010914 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f009 fde2 	bl	801688e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	695a      	ldr	r2, [r3, #20]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ccd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f004 ffdb 	bl	8011c9a <USB_ReadInterrupts>
 800cce4:	4603      	mov	r3, r0
 800cce6:	f003 0308 	and.w	r3, r3, #8
 800ccea:	2b08      	cmp	r3, #8
 800ccec:	d10a      	bne.n	800cd04 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f009 fdbf 	bl	8016872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	695a      	ldr	r2, [r3, #20]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f002 0208 	and.w	r2, r2, #8
 800cd02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f004 ffc6 	bl	8011c9a <USB_ReadInterrupts>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd18:	d10f      	bne.n	800cd3a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f009 fe21 	bl	801696c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	695a      	ldr	r2, [r3, #20]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cd38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f004 ffab 	bl	8011c9a <USB_ReadInterrupts>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd4e:	d10f      	bne.n	800cd70 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cd50:	2300      	movs	r3, #0
 800cd52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f009 fdf4 	bl	8016948 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695a      	ldr	r2, [r3, #20]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cd6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f004 ff90 	bl	8011c9a <USB_ReadInterrupts>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd84:	d10a      	bne.n	800cd9c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f009 fe02 	bl	8016990 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	695a      	ldr	r2, [r3, #20]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cd9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f004 ff7a 	bl	8011c9a <USB_ReadInterrupts>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f003 0304 	and.w	r3, r3, #4
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d115      	bne.n	800cddc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	f003 0304 	and.w	r3, r3, #4
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f009 fdf2 	bl	80169ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6859      	ldr	r1, [r3, #4]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	605a      	str	r2, [r3, #4]
 800cdd8:	e000      	b.n	800cddc <HAL_PCD_IRQHandler+0x75e>
      return;
 800cdda:	bf00      	nop
    }
  }
}
 800cddc:	3734      	adds	r7, #52	; 0x34
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd90      	pop	{r4, r7, pc}

0800cde2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	460b      	mov	r3, r1
 800cdec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d101      	bne.n	800cdfc <HAL_PCD_SetAddress+0x1a>
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	e013      	b.n	800ce24 <HAL_PCD_SetAddress+0x42>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f004 fed8 	bl	8011bca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	4608      	mov	r0, r1
 800ce36:	4611      	mov	r1, r2
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	70fb      	strb	r3, [r7, #3]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	803b      	strh	r3, [r7, #0]
 800ce42:	4613      	mov	r3, r2
 800ce44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	da0f      	bge.n	800ce72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce52:	78fb      	ldrb	r3, [r7, #3]
 800ce54:	f003 020f 	and.w	r2, r3, #15
 800ce58:	4613      	mov	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	1a9b      	subs	r3, r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	3338      	adds	r3, #56	; 0x38
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	4413      	add	r3, r2
 800ce66:	3304      	adds	r3, #4
 800ce68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	705a      	strb	r2, [r3, #1]
 800ce70:	e00f      	b.n	800ce92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	4613      	mov	r3, r2
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	1a9b      	subs	r3, r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	4413      	add	r3, r2
 800ce88:	3304      	adds	r3, #4
 800ce8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	f003 030f 	and.w	r3, r3, #15
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ce9e:	883a      	ldrh	r2, [r7, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	78ba      	ldrb	r2, [r7, #2]
 800cea8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d004      	beq.n	800cebc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cebc:	78bb      	ldrb	r3, [r7, #2]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d102      	bne.n	800cec8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d101      	bne.n	800ced6 <HAL_PCD_EP_Open+0xaa>
 800ced2:	2302      	movs	r3, #2
 800ced4:	e00e      	b.n	800cef4 <HAL_PCD_EP_Open+0xc8>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68f9      	ldr	r1, [r7, #12]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f004 f80b 	bl	8010f00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cef2:	7afb      	ldrb	r3, [r7, #11]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cf08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	da0f      	bge.n	800cf30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	f003 020f 	and.w	r2, r3, #15
 800cf16:	4613      	mov	r3, r2
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	1a9b      	subs	r3, r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	3338      	adds	r3, #56	; 0x38
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	4413      	add	r3, r2
 800cf24:	3304      	adds	r3, #4
 800cf26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	705a      	strb	r2, [r3, #1]
 800cf2e:	e00f      	b.n	800cf50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	f003 020f 	and.w	r2, r3, #15
 800cf36:	4613      	mov	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	1a9b      	subs	r3, r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4413      	add	r3, r2
 800cf46:	3304      	adds	r3, #4
 800cf48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	f003 030f 	and.w	r3, r3, #15
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d101      	bne.n	800cf6a <HAL_PCD_EP_Close+0x6e>
 800cf66:	2302      	movs	r3, #2
 800cf68:	e00e      	b.n	800cf88 <HAL_PCD_EP_Close+0x8c>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f004 f849 	bl	8011010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	607a      	str	r2, [r7, #4]
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfa0:	7afb      	ldrb	r3, [r7, #11]
 800cfa2:	f003 020f 	and.w	r2, r3, #15
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	1a9b      	subs	r3, r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
 800cfd4:	f003 030f 	and.w	r3, r3, #15
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d102      	bne.n	800cfec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d109      	bne.n	800d00a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	461a      	mov	r2, r3
 800d002:	6979      	ldr	r1, [r7, #20]
 800d004:	f004 fb24 	bl	8011650 <USB_EP0StartXfer>
 800d008:	e008      	b.n	800d01c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	461a      	mov	r2, r3
 800d016:	6979      	ldr	r1, [r7, #20]
 800d018:	f004 f8d6 	bl	80111c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	460b      	mov	r3, r1
 800d030:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	f003 020f 	and.w	r2, r3, #15
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	4613      	mov	r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	1a9b      	subs	r3, r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	440b      	add	r3, r1
 800d044:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d048:	681b      	ldr	r3, [r3, #0]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b086      	sub	sp, #24
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	607a      	str	r2, [r7, #4]
 800d060:	603b      	str	r3, [r7, #0]
 800d062:	460b      	mov	r3, r1
 800d064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d066:	7afb      	ldrb	r3, [r7, #11]
 800d068:	f003 020f 	and.w	r2, r3, #15
 800d06c:	4613      	mov	r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	3338      	adds	r3, #56	; 0x38
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	4413      	add	r3, r2
 800d07a:	3304      	adds	r3, #4
 800d07c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	2200      	movs	r2, #0
 800d08e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2201      	movs	r2, #1
 800d094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d096:	7afb      	ldrb	r3, [r7, #11]
 800d098:	f003 030f 	and.w	r3, r3, #15
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d102      	bne.n	800d0b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d0b0:	7afb      	ldrb	r3, [r7, #11]
 800d0b2:	f003 030f 	and.w	r3, r3, #15
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	6979      	ldr	r1, [r7, #20]
 800d0c8:	f004 fac2 	bl	8011650 <USB_EP0StartXfer>
 800d0cc:	e008      	b.n	800d0e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6979      	ldr	r1, [r7, #20]
 800d0dc:	f004 f874 	bl	80111c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3718      	adds	r7, #24
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b084      	sub	sp, #16
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	f003 020f 	and.w	r2, r3, #15
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	429a      	cmp	r2, r3
 800d102:	d901      	bls.n	800d108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e050      	b.n	800d1aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	da0f      	bge.n	800d130 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	f003 020f 	and.w	r2, r3, #15
 800d116:	4613      	mov	r3, r2
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	1a9b      	subs	r3, r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	3338      	adds	r3, #56	; 0x38
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	3304      	adds	r3, #4
 800d126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2201      	movs	r2, #1
 800d12c:	705a      	strb	r2, [r3, #1]
 800d12e:	e00d      	b.n	800d14c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	4613      	mov	r3, r2
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	1a9b      	subs	r3, r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	3304      	adds	r3, #4
 800d144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2201      	movs	r2, #1
 800d150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_PCD_EP_SetStall+0x82>
 800d168:	2302      	movs	r3, #2
 800d16a:	e01e      	b.n	800d1aa <HAL_PCD_EP_SetStall+0xc0>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68f9      	ldr	r1, [r7, #12]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f004 fc51 	bl	8011a22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	b2d9      	uxtb	r1, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d19a:	461a      	mov	r2, r3
 800d19c:	f004 fe42 	bl	8011e24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d1be:	78fb      	ldrb	r3, [r7, #3]
 800d1c0:	f003 020f 	and.w	r2, r3, #15
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d901      	bls.n	800d1d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e042      	b.n	800d256 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	da0f      	bge.n	800d1f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	f003 020f 	and.w	r2, r3, #15
 800d1de:	4613      	mov	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	3338      	adds	r3, #56	; 0x38
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	705a      	strb	r2, [r3, #1]
 800d1f6:	e00f      	b.n	800d218 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1f8:	78fb      	ldrb	r3, [r7, #3]
 800d1fa:	f003 020f 	and.w	r2, r3, #15
 800d1fe:	4613      	mov	r3, r2
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	3304      	adds	r3, #4
 800d210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	f003 030f 	and.w	r3, r3, #15
 800d224:	b2da      	uxtb	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d230:	2b01      	cmp	r3, #1
 800d232:	d101      	bne.n	800d238 <HAL_PCD_EP_ClrStall+0x86>
 800d234:	2302      	movs	r3, #2
 800d236:	e00e      	b.n	800d256 <HAL_PCD_EP_ClrStall+0xa4>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	4618      	mov	r0, r3
 800d248:	f004 fc59 	bl	8011afe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b08a      	sub	sp, #40	; 0x28
 800d262:	af02      	add	r7, sp, #8
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	4613      	mov	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	3338      	adds	r3, #56	; 0x38
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	4413      	add	r3, r2
 800d282:	3304      	adds	r3, #4
 800d284:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	699a      	ldr	r2, [r3, #24]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d901      	bls.n	800d296 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e06c      	b.n	800d370 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	695a      	ldr	r2, [r3, #20]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	69fa      	ldr	r2, [r7, #28]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d902      	bls.n	800d2b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	3303      	adds	r3, #3
 800d2b6:	089b      	lsrs	r3, r3, #2
 800d2b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d2ba:	e02b      	b.n	800d314 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	695a      	ldr	r2, [r3, #20]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	699b      	ldr	r3, [r3, #24]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	69fa      	ldr	r2, [r7, #28]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d902      	bls.n	800d2d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	3303      	adds	r3, #3
 800d2dc:	089b      	lsrs	r3, r3, #2
 800d2de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68d9      	ldr	r1, [r3, #12]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	6978      	ldr	r0, [r7, #20]
 800d2f8:	f004 fafd 	bl	80118f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	441a      	add	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	699a      	ldr	r2, [r3, #24]
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	441a      	add	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	b29b      	uxth	r3, r3
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	429a      	cmp	r2, r3
 800d328:	d809      	bhi.n	800d33e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d332:	429a      	cmp	r2, r3
 800d334:	d203      	bcs.n	800d33e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1be      	bne.n	800d2bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	695a      	ldr	r2, [r3, #20]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	429a      	cmp	r2, r3
 800d348:	d811      	bhi.n	800d36e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	2201      	movs	r2, #1
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d35e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	43db      	mvns	r3, r3
 800d364:	6939      	ldr	r1, [r7, #16]
 800d366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d36a:	4013      	ands	r3, r2
 800d36c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3720      	adds	r7, #32
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	333c      	adds	r3, #60	; 0x3c
 800d390:	3304      	adds	r3, #4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	f040 80a0 	bne.w	800d4f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f003 0308 	and.w	r3, r3, #8
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d015      	beq.n	800d3e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4a72      	ldr	r2, [pc, #456]	; (800d588 <PCD_EP_OutXfrComplete_int+0x210>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	f240 80dd 	bls.w	800d57e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f000 80d7 	beq.w	800d57e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3dc:	461a      	mov	r2, r3
 800d3de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3e2:	6093      	str	r3, [r2, #8]
 800d3e4:	e0cb      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f003 0320 	and.w	r3, r3, #32
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d009      	beq.n	800d404 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	2320      	movs	r3, #32
 800d400:	6093      	str	r3, [r2, #8]
 800d402:	e0bc      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f040 80b7 	bne.w	800d57e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a5d      	ldr	r2, [pc, #372]	; (800d588 <PCD_EP_OutXfrComplete_int+0x210>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d90f      	bls.n	800d438 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00a      	beq.n	800d438 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d42e:	461a      	mov	r2, r3
 800d430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d434:	6093      	str	r3, [r2, #8]
 800d436:	e0a2      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	4613      	mov	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	1a9b      	subs	r3, r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	440b      	add	r3, r1
 800d446:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d44a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	0159      	lsls	r1, r3, #5
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	440b      	add	r3, r1
 800d454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d45e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	4613      	mov	r3, r2
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	1a9b      	subs	r3, r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4403      	add	r3, r0
 800d46e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d472:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4613      	mov	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	1a9b      	subs	r3, r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	440b      	add	r3, r1
 800d482:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d486:	6819      	ldr	r1, [r3, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	4613      	mov	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	1a9b      	subs	r3, r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4403      	add	r3, r0
 800d496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4419      	add	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	1a9b      	subs	r3, r3, r2
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	4403      	add	r3, r0
 800d4ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d114      	bne.n	800d4e2 <PCD_EP_OutXfrComplete_int+0x16a>
 800d4b8:	6879      	ldr	r1, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	1a9b      	subs	r3, r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	440b      	add	r3, r1
 800d4c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d108      	bne.n	800d4e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4da:	461a      	mov	r2, r3
 800d4dc:	2101      	movs	r1, #1
 800d4de:	f004 fca1 	bl	8011e24 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f009 f98d 	bl	8016808 <HAL_PCD_DataOutStageCallback>
 800d4ee:	e046      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4a26      	ldr	r2, [pc, #152]	; (800d58c <PCD_EP_OutXfrComplete_int+0x214>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d124      	bne.n	800d542 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00a      	beq.n	800d518 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	015a      	lsls	r2, r3, #5
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	4413      	add	r3, r2
 800d50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50e:	461a      	mov	r2, r3
 800d510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d514:	6093      	str	r3, [r2, #8]
 800d516:	e032      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d008      	beq.n	800d534 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	015a      	lsls	r2, r3, #5
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	4413      	add	r3, r2
 800d52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52e:	461a      	mov	r2, r3
 800d530:	2320      	movs	r3, #32
 800d532:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	b2db      	uxtb	r3, r3
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f009 f964 	bl	8016808 <HAL_PCD_DataOutStageCallback>
 800d540:	e01d      	b.n	800d57e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d114      	bne.n	800d572 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	4613      	mov	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	440b      	add	r3, r1
 800d556:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d108      	bne.n	800d572 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d56a:	461a      	mov	r2, r3
 800d56c:	2100      	movs	r1, #0
 800d56e:	f004 fc59 	bl	8011e24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	b2db      	uxtb	r3, r3
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f009 f945 	bl	8016808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	4f54300a 	.word	0x4f54300a
 800d58c:	4f54310a 	.word	0x4f54310a

0800d590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	333c      	adds	r3, #60	; 0x3c
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	015a      	lsls	r2, r3, #5
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	4a15      	ldr	r2, [pc, #84]	; (800d618 <PCD_EP_OutSetupPacket_int+0x88>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d90e      	bls.n	800d5e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d009      	beq.n	800d5e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5dc:	461a      	mov	r2, r3
 800d5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f009 f8fd 	bl	80167e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <PCD_EP_OutSetupPacket_int+0x88>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d90c      	bls.n	800d60c <PCD_EP_OutSetupPacket_int+0x7c>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d108      	bne.n	800d60c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d604:	461a      	mov	r2, r3
 800d606:	2101      	movs	r1, #1
 800d608:	f004 fc0c 	bl	8011e24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	4f54300a 	.word	0x4f54300a

0800d61c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
 800d628:	4613      	mov	r3, r2
 800d62a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d107      	bne.n	800d64a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d63a:	883b      	ldrh	r3, [r7, #0]
 800d63c:	0419      	lsls	r1, r3, #16
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	430a      	orrs	r2, r1
 800d646:	629a      	str	r2, [r3, #40]	; 0x28
 800d648:	e028      	b.n	800d69c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d650:	0c1b      	lsrs	r3, r3, #16
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	4413      	add	r3, r2
 800d656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d658:	2300      	movs	r3, #0
 800d65a:	73fb      	strb	r3, [r7, #15]
 800d65c:	e00d      	b.n	800d67a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	7bfb      	ldrb	r3, [r7, #15]
 800d664:	3340      	adds	r3, #64	; 0x40
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	0c1b      	lsrs	r3, r3, #16
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	4413      	add	r3, r2
 800d672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	3301      	adds	r3, #1
 800d678:	73fb      	strb	r3, [r7, #15]
 800d67a:	7bfa      	ldrb	r2, [r7, #15]
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	3b01      	subs	r3, #1
 800d680:	429a      	cmp	r2, r3
 800d682:	d3ec      	bcc.n	800d65e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d684:	883b      	ldrh	r3, [r7, #0]
 800d686:	0418      	lsls	r0, r3, #16
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6819      	ldr	r1, [r3, #0]
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	3b01      	subs	r3, #1
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	4302      	orrs	r2, r0
 800d694:	3340      	adds	r3, #64	; 0x40
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b083      	sub	sp, #12
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	887a      	ldrh	r2, [r7, #2]
 800d6bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e264      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f003 0301 	and.w	r3, r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d075      	beq.n	800d7ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d702:	4ba3      	ldr	r3, [pc, #652]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	f003 030c 	and.w	r3, r3, #12
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d00c      	beq.n	800d728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d70e:	4ba0      	ldr	r3, [pc, #640]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d716:	2b08      	cmp	r3, #8
 800d718:	d112      	bne.n	800d740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d71a:	4b9d      	ldr	r3, [pc, #628]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d726:	d10b      	bne.n	800d740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d728:	4b99      	ldr	r3, [pc, #612]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d05b      	beq.n	800d7ec <HAL_RCC_OscConfig+0x108>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d157      	bne.n	800d7ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	e23f      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d748:	d106      	bne.n	800d758 <HAL_RCC_OscConfig+0x74>
 800d74a:	4b91      	ldr	r3, [pc, #580]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a90      	ldr	r2, [pc, #576]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	e01d      	b.n	800d794 <HAL_RCC_OscConfig+0xb0>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d760:	d10c      	bne.n	800d77c <HAL_RCC_OscConfig+0x98>
 800d762:	4b8b      	ldr	r3, [pc, #556]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a8a      	ldr	r2, [pc, #552]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	4b88      	ldr	r3, [pc, #544]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a87      	ldr	r2, [pc, #540]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	e00b      	b.n	800d794 <HAL_RCC_OscConfig+0xb0>
 800d77c:	4b84      	ldr	r3, [pc, #528]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a83      	ldr	r2, [pc, #524]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	4b81      	ldr	r3, [pc, #516]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a80      	ldr	r2, [pc, #512]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d78e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d013      	beq.n	800d7c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d79c:	f7fd fb6c 	bl	800ae78 <HAL_GetTick>
 800d7a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7a2:	e008      	b.n	800d7b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d7a4:	f7fd fb68 	bl	800ae78 <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	2b64      	cmp	r3, #100	; 0x64
 800d7b0:	d901      	bls.n	800d7b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e204      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7b6:	4b76      	ldr	r3, [pc, #472]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0f0      	beq.n	800d7a4 <HAL_RCC_OscConfig+0xc0>
 800d7c2:	e014      	b.n	800d7ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7c4:	f7fd fb58 	bl	800ae78 <HAL_GetTick>
 800d7c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d7ca:	e008      	b.n	800d7de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d7cc:	f7fd fb54 	bl	800ae78 <HAL_GetTick>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	2b64      	cmp	r3, #100	; 0x64
 800d7d8:	d901      	bls.n	800d7de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d7da:	2303      	movs	r3, #3
 800d7dc:	e1f0      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d7de:	4b6c      	ldr	r3, [pc, #432]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1f0      	bne.n	800d7cc <HAL_RCC_OscConfig+0xe8>
 800d7ea:	e000      	b.n	800d7ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d063      	beq.n	800d8c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d7fa:	4b65      	ldr	r3, [pc, #404]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	f003 030c 	and.w	r3, r3, #12
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00b      	beq.n	800d81e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d806:	4b62      	ldr	r3, [pc, #392]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d80e:	2b08      	cmp	r3, #8
 800d810:	d11c      	bne.n	800d84c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d812:	4b5f      	ldr	r3, [pc, #380]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d116      	bne.n	800d84c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d81e:	4b5c      	ldr	r3, [pc, #368]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f003 0302 	and.w	r3, r3, #2
 800d826:	2b00      	cmp	r3, #0
 800d828:	d005      	beq.n	800d836 <HAL_RCC_OscConfig+0x152>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d001      	beq.n	800d836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e1c4      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d836:	4b56      	ldr	r3, [pc, #344]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	4952      	ldr	r1, [pc, #328]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d846:	4313      	orrs	r3, r2
 800d848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d84a:	e03a      	b.n	800d8c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d020      	beq.n	800d896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d854:	4b4f      	ldr	r3, [pc, #316]	; (800d994 <HAL_RCC_OscConfig+0x2b0>)
 800d856:	2201      	movs	r2, #1
 800d858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d85a:	f7fd fb0d 	bl	800ae78 <HAL_GetTick>
 800d85e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d860:	e008      	b.n	800d874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d862:	f7fd fb09 	bl	800ae78 <HAL_GetTick>
 800d866:	4602      	mov	r2, r0
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d901      	bls.n	800d874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e1a5      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d874:	4b46      	ldr	r3, [pc, #280]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f003 0302 	and.w	r3, r3, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d0f0      	beq.n	800d862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d880:	4b43      	ldr	r3, [pc, #268]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	4940      	ldr	r1, [pc, #256]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d890:	4313      	orrs	r3, r2
 800d892:	600b      	str	r3, [r1, #0]
 800d894:	e015      	b.n	800d8c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d896:	4b3f      	ldr	r3, [pc, #252]	; (800d994 <HAL_RCC_OscConfig+0x2b0>)
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d89c:	f7fd faec 	bl	800ae78 <HAL_GetTick>
 800d8a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8a2:	e008      	b.n	800d8b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d8a4:	f7fd fae8 	bl	800ae78 <HAL_GetTick>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d901      	bls.n	800d8b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	e184      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8b6:	4b36      	ldr	r3, [pc, #216]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f003 0302 	and.w	r3, r3, #2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1f0      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 0308 	and.w	r3, r3, #8
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d030      	beq.n	800d930 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	695b      	ldr	r3, [r3, #20]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d016      	beq.n	800d904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8d6:	4b30      	ldr	r3, [pc, #192]	; (800d998 <HAL_RCC_OscConfig+0x2b4>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8dc:	f7fd facc 	bl	800ae78 <HAL_GetTick>
 800d8e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8e2:	e008      	b.n	800d8f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d8e4:	f7fd fac8 	bl	800ae78 <HAL_GetTick>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	d901      	bls.n	800d8f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	e164      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8f6:	4b26      	ldr	r3, [pc, #152]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8fa:	f003 0302 	and.w	r3, r3, #2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0f0      	beq.n	800d8e4 <HAL_RCC_OscConfig+0x200>
 800d902:	e015      	b.n	800d930 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d904:	4b24      	ldr	r3, [pc, #144]	; (800d998 <HAL_RCC_OscConfig+0x2b4>)
 800d906:	2200      	movs	r2, #0
 800d908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d90a:	f7fd fab5 	bl	800ae78 <HAL_GetTick>
 800d90e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d910:	e008      	b.n	800d924 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d912:	f7fd fab1 	bl	800ae78 <HAL_GetTick>
 800d916:	4602      	mov	r2, r0
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d901      	bls.n	800d924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d920:	2303      	movs	r3, #3
 800d922:	e14d      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d924:	4b1a      	ldr	r3, [pc, #104]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1f0      	bne.n	800d912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 80a0 	beq.w	800da7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d93e:	2300      	movs	r3, #0
 800d940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d942:	4b13      	ldr	r3, [pc, #76]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10f      	bne.n	800d96e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d94e:	2300      	movs	r3, #0
 800d950:	60bb      	str	r3, [r7, #8]
 800d952:	4b0f      	ldr	r3, [pc, #60]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d956:	4a0e      	ldr	r2, [pc, #56]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d95c:	6413      	str	r3, [r2, #64]	; 0x40
 800d95e:	4b0c      	ldr	r3, [pc, #48]	; (800d990 <HAL_RCC_OscConfig+0x2ac>)
 800d960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d966:	60bb      	str	r3, [r7, #8]
 800d968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d96a:	2301      	movs	r3, #1
 800d96c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d96e:	4b0b      	ldr	r3, [pc, #44]	; (800d99c <HAL_RCC_OscConfig+0x2b8>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d976:	2b00      	cmp	r3, #0
 800d978:	d121      	bne.n	800d9be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d97a:	4b08      	ldr	r3, [pc, #32]	; (800d99c <HAL_RCC_OscConfig+0x2b8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a07      	ldr	r2, [pc, #28]	; (800d99c <HAL_RCC_OscConfig+0x2b8>)
 800d980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d986:	f7fd fa77 	bl	800ae78 <HAL_GetTick>
 800d98a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d98c:	e011      	b.n	800d9b2 <HAL_RCC_OscConfig+0x2ce>
 800d98e:	bf00      	nop
 800d990:	40023800 	.word	0x40023800
 800d994:	42470000 	.word	0x42470000
 800d998:	42470e80 	.word	0x42470e80
 800d99c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9a0:	f7fd fa6a 	bl	800ae78 <HAL_GetTick>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	d901      	bls.n	800d9b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e106      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9b2:	4b85      	ldr	r3, [pc, #532]	; (800dbc8 <HAL_RCC_OscConfig+0x4e4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0f0      	beq.n	800d9a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d106      	bne.n	800d9d4 <HAL_RCC_OscConfig+0x2f0>
 800d9c6:	4b81      	ldr	r3, [pc, #516]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ca:	4a80      	ldr	r2, [pc, #512]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9cc:	f043 0301 	orr.w	r3, r3, #1
 800d9d0:	6713      	str	r3, [r2, #112]	; 0x70
 800d9d2:	e01c      	b.n	800da0e <HAL_RCC_OscConfig+0x32a>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	2b05      	cmp	r3, #5
 800d9da:	d10c      	bne.n	800d9f6 <HAL_RCC_OscConfig+0x312>
 800d9dc:	4b7b      	ldr	r3, [pc, #492]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e0:	4a7a      	ldr	r2, [pc, #488]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9e2:	f043 0304 	orr.w	r3, r3, #4
 800d9e6:	6713      	str	r3, [r2, #112]	; 0x70
 800d9e8:	4b78      	ldr	r3, [pc, #480]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ec:	4a77      	ldr	r2, [pc, #476]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9ee:	f043 0301 	orr.w	r3, r3, #1
 800d9f2:	6713      	str	r3, [r2, #112]	; 0x70
 800d9f4:	e00b      	b.n	800da0e <HAL_RCC_OscConfig+0x32a>
 800d9f6:	4b75      	ldr	r3, [pc, #468]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fa:	4a74      	ldr	r2, [pc, #464]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800d9fc:	f023 0301 	bic.w	r3, r3, #1
 800da00:	6713      	str	r3, [r2, #112]	; 0x70
 800da02:	4b72      	ldr	r3, [pc, #456]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da06:	4a71      	ldr	r2, [pc, #452]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da08:	f023 0304 	bic.w	r3, r3, #4
 800da0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d015      	beq.n	800da42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da16:	f7fd fa2f 	bl	800ae78 <HAL_GetTick>
 800da1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da1c:	e00a      	b.n	800da34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da1e:	f7fd fa2b 	bl	800ae78 <HAL_GetTick>
 800da22:	4602      	mov	r2, r0
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	f241 3288 	movw	r2, #5000	; 0x1388
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d901      	bls.n	800da34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800da30:	2303      	movs	r3, #3
 800da32:	e0c5      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da34:	4b65      	ldr	r3, [pc, #404]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0ee      	beq.n	800da1e <HAL_RCC_OscConfig+0x33a>
 800da40:	e014      	b.n	800da6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da42:	f7fd fa19 	bl	800ae78 <HAL_GetTick>
 800da46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da48:	e00a      	b.n	800da60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da4a:	f7fd fa15 	bl	800ae78 <HAL_GetTick>
 800da4e:	4602      	mov	r2, r0
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	f241 3288 	movw	r2, #5000	; 0x1388
 800da58:	4293      	cmp	r3, r2
 800da5a:	d901      	bls.n	800da60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e0af      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da60:	4b5a      	ldr	r3, [pc, #360]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da64:	f003 0302 	and.w	r3, r3, #2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1ee      	bne.n	800da4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da6c:	7dfb      	ldrb	r3, [r7, #23]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d105      	bne.n	800da7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da72:	4b56      	ldr	r3, [pc, #344]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da76:	4a55      	ldr	r2, [pc, #340]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 809b 	beq.w	800dbbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800da88:	4b50      	ldr	r3, [pc, #320]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	f003 030c 	and.w	r3, r3, #12
 800da90:	2b08      	cmp	r3, #8
 800da92:	d05c      	beq.n	800db4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d141      	bne.n	800db20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da9c:	4b4c      	ldr	r3, [pc, #304]	; (800dbd0 <HAL_RCC_OscConfig+0x4ec>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800daa2:	f7fd f9e9 	bl	800ae78 <HAL_GetTick>
 800daa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800daa8:	e008      	b.n	800dabc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800daaa:	f7fd f9e5 	bl	800ae78 <HAL_GetTick>
 800daae:	4602      	mov	r2, r0
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d901      	bls.n	800dabc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dab8:	2303      	movs	r3, #3
 800daba:	e081      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dabc:	4b43      	ldr	r3, [pc, #268]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1f0      	bne.n	800daaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	69da      	ldr	r2, [r3, #28]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a1b      	ldr	r3, [r3, #32]
 800dad0:	431a      	orrs	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	019b      	lsls	r3, r3, #6
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dade:	085b      	lsrs	r3, r3, #1
 800dae0:	3b01      	subs	r3, #1
 800dae2:	041b      	lsls	r3, r3, #16
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daea:	061b      	lsls	r3, r3, #24
 800daec:	4937      	ldr	r1, [pc, #220]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800daee:	4313      	orrs	r3, r2
 800daf0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800daf2:	4b37      	ldr	r3, [pc, #220]	; (800dbd0 <HAL_RCC_OscConfig+0x4ec>)
 800daf4:	2201      	movs	r2, #1
 800daf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800daf8:	f7fd f9be 	bl	800ae78 <HAL_GetTick>
 800dafc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dafe:	e008      	b.n	800db12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db00:	f7fd f9ba 	bl	800ae78 <HAL_GetTick>
 800db04:	4602      	mov	r2, r0
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d901      	bls.n	800db12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800db0e:	2303      	movs	r3, #3
 800db10:	e056      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db12:	4b2e      	ldr	r3, [pc, #184]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0f0      	beq.n	800db00 <HAL_RCC_OscConfig+0x41c>
 800db1e:	e04e      	b.n	800dbbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db20:	4b2b      	ldr	r3, [pc, #172]	; (800dbd0 <HAL_RCC_OscConfig+0x4ec>)
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db26:	f7fd f9a7 	bl	800ae78 <HAL_GetTick>
 800db2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db2c:	e008      	b.n	800db40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db2e:	f7fd f9a3 	bl	800ae78 <HAL_GetTick>
 800db32:	4602      	mov	r2, r0
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d901      	bls.n	800db40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800db3c:	2303      	movs	r3, #3
 800db3e:	e03f      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db40:	4b22      	ldr	r3, [pc, #136]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1f0      	bne.n	800db2e <HAL_RCC_OscConfig+0x44a>
 800db4c:	e037      	b.n	800dbbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	2b01      	cmp	r3, #1
 800db54:	d101      	bne.n	800db5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e032      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db5a:	4b1c      	ldr	r3, [pc, #112]	; (800dbcc <HAL_RCC_OscConfig+0x4e8>)
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d028      	beq.n	800dbba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db72:	429a      	cmp	r2, r3
 800db74:	d121      	bne.n	800dbba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db80:	429a      	cmp	r2, r3
 800db82:	d11a      	bne.n	800dbba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db8a:	4013      	ands	r3, r2
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db92:	4293      	cmp	r3, r2
 800db94:	d111      	bne.n	800dbba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba0:	085b      	lsrs	r3, r3, #1
 800dba2:	3b01      	subs	r3, #1
 800dba4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d107      	bne.n	800dbba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d001      	beq.n	800dbbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e000      	b.n	800dbc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40007000 	.word	0x40007000
 800dbcc:	40023800 	.word	0x40023800
 800dbd0:	42470060 	.word	0x42470060

0800dbd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d101      	bne.n	800dbe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e0cc      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dbe8:	4b68      	ldr	r3, [pc, #416]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d90c      	bls.n	800dc10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbf6:	4b65      	ldr	r3, [pc, #404]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	b2d2      	uxtb	r2, r2
 800dbfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbfe:	4b63      	ldr	r3, [pc, #396]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 030f 	and.w	r3, r3, #15
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d001      	beq.n	800dc10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e0b8      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0302 	and.w	r3, r3, #2
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d020      	beq.n	800dc5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d005      	beq.n	800dc34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc28:	4b59      	ldr	r3, [pc, #356]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	4a58      	ldr	r2, [pc, #352]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dc32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 0308 	and.w	r3, r3, #8
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d005      	beq.n	800dc4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dc40:	4b53      	ldr	r3, [pc, #332]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	4a52      	ldr	r2, [pc, #328]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc4c:	4b50      	ldr	r3, [pc, #320]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	494d      	ldr	r1, [pc, #308]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d044      	beq.n	800dcf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d107      	bne.n	800dc82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc72:	4b47      	ldr	r3, [pc, #284]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d119      	bne.n	800dcb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e07f      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d003      	beq.n	800dc92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d107      	bne.n	800dca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc92:	4b3f      	ldr	r3, [pc, #252]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d109      	bne.n	800dcb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e06f      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dca2:	4b3b      	ldr	r3, [pc, #236]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f003 0302 	and.w	r3, r3, #2
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e067      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dcb2:	4b37      	ldr	r3, [pc, #220]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	f023 0203 	bic.w	r2, r3, #3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	4934      	ldr	r1, [pc, #208]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dcc4:	f7fd f8d8 	bl	800ae78 <HAL_GetTick>
 800dcc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcca:	e00a      	b.n	800dce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dccc:	f7fd f8d4 	bl	800ae78 <HAL_GetTick>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d901      	bls.n	800dce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dcde:	2303      	movs	r3, #3
 800dce0:	e04f      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dce2:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	f003 020c 	and.w	r2, r3, #12
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d1eb      	bne.n	800dccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dcf4:	4b25      	ldr	r3, [pc, #148]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 030f 	and.w	r3, r3, #15
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d20c      	bcs.n	800dd1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd02:	4b22      	ldr	r3, [pc, #136]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	b2d2      	uxtb	r2, r2
 800dd08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd0a:	4b20      	ldr	r3, [pc, #128]	; (800dd8c <HAL_RCC_ClockConfig+0x1b8>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 030f 	and.w	r3, r3, #15
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d001      	beq.n	800dd1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e032      	b.n	800dd82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f003 0304 	and.w	r3, r3, #4
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d008      	beq.n	800dd3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd28:	4b19      	ldr	r3, [pc, #100]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	4916      	ldr	r1, [pc, #88]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 0308 	and.w	r3, r3, #8
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d009      	beq.n	800dd5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dd46:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	490e      	ldr	r1, [pc, #56]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dd56:	4313      	orrs	r3, r2
 800dd58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd5a:	f000 f821 	bl	800dda0 <HAL_RCC_GetSysClockFreq>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	4b0b      	ldr	r3, [pc, #44]	; (800dd90 <HAL_RCC_ClockConfig+0x1bc>)
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	091b      	lsrs	r3, r3, #4
 800dd66:	f003 030f 	and.w	r3, r3, #15
 800dd6a:	490a      	ldr	r1, [pc, #40]	; (800dd94 <HAL_RCC_ClockConfig+0x1c0>)
 800dd6c:	5ccb      	ldrb	r3, [r1, r3]
 800dd6e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd72:	4a09      	ldr	r2, [pc, #36]	; (800dd98 <HAL_RCC_ClockConfig+0x1c4>)
 800dd74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dd76:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <HAL_RCC_ClockConfig+0x1c8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7f5 ff16 	bl	8003bac <HAL_InitTick>

  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	40023c00 	.word	0x40023c00
 800dd90:	40023800 	.word	0x40023800
 800dd94:	08019fd4 	.word	0x08019fd4
 800dd98:	20000048 	.word	0x20000048
 800dd9c:	2000004c 	.word	0x2000004c

0800dda0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dda0:	b5b0      	push	{r4, r5, r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dda6:	2100      	movs	r1, #0
 800dda8:	6079      	str	r1, [r7, #4]
 800ddaa:	2100      	movs	r1, #0
 800ddac:	60f9      	str	r1, [r7, #12]
 800ddae:	2100      	movs	r1, #0
 800ddb0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ddb6:	4952      	ldr	r1, [pc, #328]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ddb8:	6889      	ldr	r1, [r1, #8]
 800ddba:	f001 010c 	and.w	r1, r1, #12
 800ddbe:	2908      	cmp	r1, #8
 800ddc0:	d00d      	beq.n	800ddde <HAL_RCC_GetSysClockFreq+0x3e>
 800ddc2:	2908      	cmp	r1, #8
 800ddc4:	f200 8094 	bhi.w	800def0 <HAL_RCC_GetSysClockFreq+0x150>
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	d002      	beq.n	800ddd2 <HAL_RCC_GetSysClockFreq+0x32>
 800ddcc:	2904      	cmp	r1, #4
 800ddce:	d003      	beq.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x38>
 800ddd0:	e08e      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ddd2:	4b4c      	ldr	r3, [pc, #304]	; (800df04 <HAL_RCC_GetSysClockFreq+0x164>)
 800ddd4:	60bb      	str	r3, [r7, #8]
       break;
 800ddd6:	e08e      	b.n	800def6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ddd8:	4b4b      	ldr	r3, [pc, #300]	; (800df08 <HAL_RCC_GetSysClockFreq+0x168>)
 800ddda:	60bb      	str	r3, [r7, #8]
      break;
 800dddc:	e08b      	b.n	800def6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ddde:	4948      	ldr	r1, [pc, #288]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800dde0:	6849      	ldr	r1, [r1, #4]
 800dde2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800dde6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dde8:	4945      	ldr	r1, [pc, #276]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ddea:	6849      	ldr	r1, [r1, #4]
 800ddec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ddf0:	2900      	cmp	r1, #0
 800ddf2:	d024      	beq.n	800de3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddf4:	4942      	ldr	r1, [pc, #264]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ddf6:	6849      	ldr	r1, [r1, #4]
 800ddf8:	0989      	lsrs	r1, r1, #6
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	f04f 0100 	mov.w	r1, #0
 800de00:	f240 14ff 	movw	r4, #511	; 0x1ff
 800de04:	f04f 0500 	mov.w	r5, #0
 800de08:	ea00 0204 	and.w	r2, r0, r4
 800de0c:	ea01 0305 	and.w	r3, r1, r5
 800de10:	493d      	ldr	r1, [pc, #244]	; (800df08 <HAL_RCC_GetSysClockFreq+0x168>)
 800de12:	fb01 f003 	mul.w	r0, r1, r3
 800de16:	2100      	movs	r1, #0
 800de18:	fb01 f102 	mul.w	r1, r1, r2
 800de1c:	1844      	adds	r4, r0, r1
 800de1e:	493a      	ldr	r1, [pc, #232]	; (800df08 <HAL_RCC_GetSysClockFreq+0x168>)
 800de20:	fba2 0101 	umull	r0, r1, r2, r1
 800de24:	1863      	adds	r3, r4, r1
 800de26:	4619      	mov	r1, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	461a      	mov	r2, r3
 800de2c:	f04f 0300 	mov.w	r3, #0
 800de30:	f7f2 fe54 	bl	8000adc <__aeabi_uldivmod>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4613      	mov	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	e04a      	b.n	800ded4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de3e:	4b30      	ldr	r3, [pc, #192]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	099b      	lsrs	r3, r3, #6
 800de44:	461a      	mov	r2, r3
 800de46:	f04f 0300 	mov.w	r3, #0
 800de4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800de4e:	f04f 0100 	mov.w	r1, #0
 800de52:	ea02 0400 	and.w	r4, r2, r0
 800de56:	ea03 0501 	and.w	r5, r3, r1
 800de5a:	4620      	mov	r0, r4
 800de5c:	4629      	mov	r1, r5
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	014b      	lsls	r3, r1, #5
 800de68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800de6c:	0142      	lsls	r2, r0, #5
 800de6e:	4610      	mov	r0, r2
 800de70:	4619      	mov	r1, r3
 800de72:	1b00      	subs	r0, r0, r4
 800de74:	eb61 0105 	sbc.w	r1, r1, r5
 800de78:	f04f 0200 	mov.w	r2, #0
 800de7c:	f04f 0300 	mov.w	r3, #0
 800de80:	018b      	lsls	r3, r1, #6
 800de82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800de86:	0182      	lsls	r2, r0, #6
 800de88:	1a12      	subs	r2, r2, r0
 800de8a:	eb63 0301 	sbc.w	r3, r3, r1
 800de8e:	f04f 0000 	mov.w	r0, #0
 800de92:	f04f 0100 	mov.w	r1, #0
 800de96:	00d9      	lsls	r1, r3, #3
 800de98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800de9c:	00d0      	lsls	r0, r2, #3
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	1912      	adds	r2, r2, r4
 800dea4:	eb45 0303 	adc.w	r3, r5, r3
 800dea8:	f04f 0000 	mov.w	r0, #0
 800deac:	f04f 0100 	mov.w	r1, #0
 800deb0:	0299      	lsls	r1, r3, #10
 800deb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800deb6:	0290      	lsls	r0, r2, #10
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4610      	mov	r0, r2
 800debe:	4619      	mov	r1, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	461a      	mov	r2, r3
 800dec4:	f04f 0300 	mov.w	r3, #0
 800dec8:	f7f2 fe08 	bl	8000adc <__aeabi_uldivmod>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4613      	mov	r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ded4:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <HAL_RCC_GetSysClockFreq+0x160>)
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	0c1b      	lsrs	r3, r3, #16
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	3301      	adds	r3, #1
 800dee0:	005b      	lsls	r3, r3, #1
 800dee2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800deec:	60bb      	str	r3, [r7, #8]
      break;
 800deee:	e002      	b.n	800def6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800def0:	4b04      	ldr	r3, [pc, #16]	; (800df04 <HAL_RCC_GetSysClockFreq+0x164>)
 800def2:	60bb      	str	r3, [r7, #8]
      break;
 800def4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800def6:	68bb      	ldr	r3, [r7, #8]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bdb0      	pop	{r4, r5, r7, pc}
 800df00:	40023800 	.word	0x40023800
 800df04:	00f42400 	.word	0x00f42400
 800df08:	016e3600 	.word	0x016e3600

0800df0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df0c:	b480      	push	{r7}
 800df0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df10:	4b03      	ldr	r3, [pc, #12]	; (800df20 <HAL_RCC_GetHCLKFreq+0x14>)
 800df12:	681b      	ldr	r3, [r3, #0]
}
 800df14:	4618      	mov	r0, r3
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	20000048 	.word	0x20000048

0800df24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800df28:	f7ff fff0 	bl	800df0c <HAL_RCC_GetHCLKFreq>
 800df2c:	4602      	mov	r2, r0
 800df2e:	4b05      	ldr	r3, [pc, #20]	; (800df44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	0a9b      	lsrs	r3, r3, #10
 800df34:	f003 0307 	and.w	r3, r3, #7
 800df38:	4903      	ldr	r1, [pc, #12]	; (800df48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df3a:	5ccb      	ldrb	r3, [r1, r3]
 800df3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df40:	4618      	mov	r0, r3
 800df42:	bd80      	pop	{r7, pc}
 800df44:	40023800 	.word	0x40023800
 800df48:	08019fe4 	.word	0x08019fe4

0800df4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800df50:	f7ff ffdc 	bl	800df0c <HAL_RCC_GetHCLKFreq>
 800df54:	4602      	mov	r2, r0
 800df56:	4b05      	ldr	r3, [pc, #20]	; (800df6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	0b5b      	lsrs	r3, r3, #13
 800df5c:	f003 0307 	and.w	r3, r3, #7
 800df60:	4903      	ldr	r1, [pc, #12]	; (800df70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df62:	5ccb      	ldrb	r3, [r1, r3]
 800df64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df68:	4618      	mov	r0, r3
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	40023800 	.word	0x40023800
 800df70:	08019fe4 	.word	0x08019fe4

0800df74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	220f      	movs	r2, #15
 800df82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800df84:	4b12      	ldr	r3, [pc, #72]	; (800dfd0 <HAL_RCC_GetClockConfig+0x5c>)
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	f003 0203 	and.w	r2, r3, #3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800df90:	4b0f      	ldr	r3, [pc, #60]	; (800dfd0 <HAL_RCC_GetClockConfig+0x5c>)
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800df9c:	4b0c      	ldr	r3, [pc, #48]	; (800dfd0 <HAL_RCC_GetClockConfig+0x5c>)
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dfa8:	4b09      	ldr	r3, [pc, #36]	; (800dfd0 <HAL_RCC_GetClockConfig+0x5c>)
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	08db      	lsrs	r3, r3, #3
 800dfae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dfb6:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <HAL_RCC_GetClockConfig+0x60>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 020f 	and.w	r2, r3, #15
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	601a      	str	r2, [r3, #0]
}
 800dfc2:	bf00      	nop
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	40023800 	.word	0x40023800
 800dfd4:	40023c00 	.word	0x40023c00

0800dfd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e07b      	b.n	800e0e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d108      	bne.n	800e004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dffa:	d009      	beq.n	800e010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	61da      	str	r2, [r3, #28]
 800e002:	e005      	b.n	800e010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7f5 fb7c 	bl	8003728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2202      	movs	r2, #2
 800e034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	f003 0302 	and.w	r3, r3, #2
 800e06c:	431a      	orrs	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e080:	431a      	orrs	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	69db      	ldr	r3, [r3, #28]
 800e086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e08a:	431a      	orrs	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e094:	ea42 0103 	orr.w	r1, r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	0c1b      	lsrs	r3, r3, #16
 800e0ae:	f003 0104 	and.w	r1, r3, #4
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	f003 0210 	and.w	r2, r3, #16
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69da      	ldr	r2, [r3, #28]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b088      	sub	sp, #32
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	60f8      	str	r0, [r7, #12]
 800e0f2:	60b9      	str	r1, [r7, #8]
 800e0f4:	603b      	str	r3, [r7, #0]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e104:	2b01      	cmp	r3, #1
 800e106:	d101      	bne.n	800e10c <HAL_SPI_Transmit+0x22>
 800e108:	2302      	movs	r3, #2
 800e10a:	e126      	b.n	800e35a <HAL_SPI_Transmit+0x270>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e114:	f7fc feb0 	bl	800ae78 <HAL_GetTick>
 800e118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e11a:	88fb      	ldrh	r3, [r7, #6]
 800e11c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b01      	cmp	r3, #1
 800e128:	d002      	beq.n	800e130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e12a:	2302      	movs	r3, #2
 800e12c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e12e:	e10b      	b.n	800e348 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <HAL_SPI_Transmit+0x52>
 800e136:	88fb      	ldrh	r3, [r7, #6]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e140:	e102      	b.n	800e348 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2203      	movs	r2, #3
 800e146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	88fa      	ldrh	r2, [r7, #6]
 800e160:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e188:	d10f      	bne.n	800e1aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1b4:	2b40      	cmp	r3, #64	; 0x40
 800e1b6:	d007      	beq.n	800e1c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1d0:	d14b      	bne.n	800e26a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <HAL_SPI_Transmit+0xf6>
 800e1da:	8afb      	ldrh	r3, [r7, #22]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d13e      	bne.n	800e25e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e4:	881a      	ldrh	r2, [r3, #0]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f0:	1c9a      	adds	r2, r3, #2
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e204:	e02b      	b.n	800e25e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	f003 0302 	and.w	r3, r3, #2
 800e210:	2b02      	cmp	r3, #2
 800e212:	d112      	bne.n	800e23a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e218:	881a      	ldrh	r2, [r3, #0]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e224:	1c9a      	adds	r2, r3, #2
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	86da      	strh	r2, [r3, #54]	; 0x36
 800e238:	e011      	b.n	800e25e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e23a:	f7fc fe1d 	bl	800ae78 <HAL_GetTick>
 800e23e:	4602      	mov	r2, r0
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d803      	bhi.n	800e252 <HAL_SPI_Transmit+0x168>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e250:	d102      	bne.n	800e258 <HAL_SPI_Transmit+0x16e>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e258:	2303      	movs	r3, #3
 800e25a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e25c:	e074      	b.n	800e348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e262:	b29b      	uxth	r3, r3
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1ce      	bne.n	800e206 <HAL_SPI_Transmit+0x11c>
 800e268:	e04c      	b.n	800e304 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <HAL_SPI_Transmit+0x18e>
 800e272:	8afb      	ldrh	r3, [r7, #22]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d140      	bne.n	800e2fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	330c      	adds	r3, #12
 800e282:	7812      	ldrb	r2, [r2, #0]
 800e284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e294:	b29b      	uxth	r3, r3
 800e296:	3b01      	subs	r3, #1
 800e298:	b29a      	uxth	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e29e:	e02c      	b.n	800e2fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f003 0302 	and.w	r3, r3, #2
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d113      	bne.n	800e2d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	330c      	adds	r3, #12
 800e2b8:	7812      	ldrb	r2, [r2, #0]
 800e2ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	86da      	strh	r2, [r3, #54]	; 0x36
 800e2d4:	e011      	b.n	800e2fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2d6:	f7fc fdcf 	bl	800ae78 <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d803      	bhi.n	800e2ee <HAL_SPI_Transmit+0x204>
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ec:	d102      	bne.n	800e2f4 <HAL_SPI_Transmit+0x20a>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d102      	bne.n	800e2fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e2f8:	e026      	b.n	800e348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1cd      	bne.n	800e2a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e304:	69ba      	ldr	r2, [r7, #24]
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f000 fce9 	bl	800ece0 <SPI_EndRxTxTransaction>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2220      	movs	r2, #32
 800e318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e322:	2300      	movs	r3, #0
 800e324:	613b      	str	r3, [r7, #16]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	613b      	str	r3, [r7, #16]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	613b      	str	r3, [r7, #16]
 800e336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	77fb      	strb	r3, [r7, #31]
 800e344:	e000      	b.n	800e348 <HAL_SPI_Transmit+0x25e>
  }

error:
 800e346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e358:	7ffb      	ldrb	r3, [r7, #31]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3720      	adds	r7, #32
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b088      	sub	sp, #32
 800e366:	af02      	add	r7, sp, #8
 800e368:	60f8      	str	r0, [r7, #12]
 800e36a:	60b9      	str	r1, [r7, #8]
 800e36c:	603b      	str	r3, [r7, #0]
 800e36e:	4613      	mov	r3, r2
 800e370:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e37e:	d112      	bne.n	800e3a6 <HAL_SPI_Receive+0x44>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10e      	bne.n	800e3a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2204      	movs	r2, #4
 800e38c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e390:	88fa      	ldrh	r2, [r7, #6]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	4613      	mov	r3, r2
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f8f1 	bl	800e584 <HAL_SPI_TransmitReceive>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	e0ea      	b.n	800e57c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d101      	bne.n	800e3b4 <HAL_SPI_Receive+0x52>
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	e0e3      	b.n	800e57c <HAL_SPI_Receive+0x21a>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3bc:	f7fc fd5c 	bl	800ae78 <HAL_GetTick>
 800e3c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d002      	beq.n	800e3d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3d2:	e0ca      	b.n	800e56a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <HAL_SPI_Receive+0x7e>
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d102      	bne.n	800e3e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3e4:	e0c1      	b.n	800e56a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2204      	movs	r2, #4
 800e3ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	88fa      	ldrh	r2, [r7, #6]
 800e3fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	88fa      	ldrh	r2, [r7, #6]
 800e404:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e42c:	d10f      	bne.n	800e44e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e43c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e44c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e458:	2b40      	cmp	r3, #64	; 0x40
 800e45a:	d007      	beq.n	800e46c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e46a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d162      	bne.n	800e53a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e474:	e02e      	b.n	800e4d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	2b01      	cmp	r3, #1
 800e482:	d115      	bne.n	800e4b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f103 020c 	add.w	r2, r3, #12
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	7812      	ldrb	r2, [r2, #0]
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e4ae:	e011      	b.n	800e4d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4b0:	f7fc fce2 	bl	800ae78 <HAL_GetTick>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d803      	bhi.n	800e4c8 <HAL_SPI_Receive+0x166>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c6:	d102      	bne.n	800e4ce <HAL_SPI_Receive+0x16c>
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d102      	bne.n	800e4d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e4d2:	e04a      	b.n	800e56a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1cb      	bne.n	800e476 <HAL_SPI_Receive+0x114>
 800e4de:	e031      	b.n	800e544 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d113      	bne.n	800e516 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e500:	1c9a      	adds	r2, r3, #2
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	3b01      	subs	r3, #1
 800e50e:	b29a      	uxth	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e514:	e011      	b.n	800e53a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e516:	f7fc fcaf 	bl	800ae78 <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d803      	bhi.n	800e52e <HAL_SPI_Receive+0x1cc>
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52c:	d102      	bne.n	800e534 <HAL_SPI_Receive+0x1d2>
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800e534:	2303      	movs	r3, #3
 800e536:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e538:	e017      	b.n	800e56a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e53e:	b29b      	uxth	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1cd      	bne.n	800e4e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 fb63 	bl	800ec14 <SPI_EndRxTransaction>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2220      	movs	r2, #32
 800e558:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	75fb      	strb	r3, [r7, #23]
 800e566:	e000      	b.n	800e56a <HAL_SPI_Receive+0x208>
  }

error :
 800e568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08c      	sub	sp, #48	; 0x30
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e592:	2301      	movs	r3, #1
 800e594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d101      	bne.n	800e5aa <HAL_SPI_TransmitReceive+0x26>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e18a      	b.n	800e8c0 <HAL_SPI_TransmitReceive+0x33c>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5b2:	f7fc fc61 	bl	800ae78 <HAL_GetTick>
 800e5b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e5c8:	887b      	ldrh	r3, [r7, #2]
 800e5ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e5cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d00f      	beq.n	800e5f4 <HAL_SPI_TransmitReceive+0x70>
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5da:	d107      	bne.n	800e5ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d103      	bne.n	800e5ec <HAL_SPI_TransmitReceive+0x68>
 800e5e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5e8:	2b04      	cmp	r3, #4
 800e5ea:	d003      	beq.n	800e5f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e5f2:	e15b      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d005      	beq.n	800e606 <HAL_SPI_TransmitReceive+0x82>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <HAL_SPI_TransmitReceive+0x82>
 800e600:	887b      	ldrh	r3, [r7, #2]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d103      	bne.n	800e60e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e60c:	e14e      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b04      	cmp	r3, #4
 800e618:	d003      	beq.n	800e622 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2205      	movs	r2, #5
 800e61e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	887a      	ldrh	r2, [r7, #2]
 800e632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	887a      	ldrh	r2, [r7, #2]
 800e638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	887a      	ldrh	r2, [r7, #2]
 800e644:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	887a      	ldrh	r2, [r7, #2]
 800e64a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e662:	2b40      	cmp	r3, #64	; 0x40
 800e664:	d007      	beq.n	800e676 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e67e:	d178      	bne.n	800e772 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <HAL_SPI_TransmitReceive+0x10a>
 800e688:	8b7b      	ldrh	r3, [r7, #26]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d166      	bne.n	800e75c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e692:	881a      	ldrh	r2, [r3, #0]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69e:	1c9a      	adds	r2, r3, #2
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6b2:	e053      	b.n	800e75c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	f003 0302 	and.w	r3, r3, #2
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d11b      	bne.n	800e6fa <HAL_SPI_TransmitReceive+0x176>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d016      	beq.n	800e6fa <HAL_SPI_TransmitReceive+0x176>
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d113      	bne.n	800e6fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d6:	881a      	ldrh	r2, [r3, #0]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e2:	1c9a      	adds	r2, r3, #2
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	f003 0301 	and.w	r3, r3, #1
 800e704:	2b01      	cmp	r3, #1
 800e706:	d119      	bne.n	800e73c <HAL_SPI_TransmitReceive+0x1b8>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d014      	beq.n	800e73c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71c:	b292      	uxth	r2, r2
 800e71e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e724:	1c9a      	adds	r2, r3, #2
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e72e:	b29b      	uxth	r3, r3
 800e730:	3b01      	subs	r3, #1
 800e732:	b29a      	uxth	r2, r3
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e738:	2301      	movs	r3, #1
 800e73a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e73c:	f7fc fb9c 	bl	800ae78 <HAL_GetTick>
 800e740:	4602      	mov	r2, r0
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e748:	429a      	cmp	r2, r3
 800e74a:	d807      	bhi.n	800e75c <HAL_SPI_TransmitReceive+0x1d8>
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e752:	d003      	beq.n	800e75c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e754:	2303      	movs	r3, #3
 800e756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e75a:	e0a7      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e760:	b29b      	uxth	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1a6      	bne.n	800e6b4 <HAL_SPI_TransmitReceive+0x130>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1a1      	bne.n	800e6b4 <HAL_SPI_TransmitReceive+0x130>
 800e770:	e07c      	b.n	800e86c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <HAL_SPI_TransmitReceive+0x1fc>
 800e77a:	8b7b      	ldrh	r3, [r7, #26]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d16b      	bne.n	800e858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	330c      	adds	r3, #12
 800e78a:	7812      	ldrb	r2, [r2, #0]
 800e78c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7a6:	e057      	b.n	800e858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	f003 0302 	and.w	r3, r3, #2
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d11c      	bne.n	800e7f0 <HAL_SPI_TransmitReceive+0x26c>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d017      	beq.n	800e7f0 <HAL_SPI_TransmitReceive+0x26c>
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d114      	bne.n	800e7f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	330c      	adds	r3, #12
 800e7d0:	7812      	ldrb	r2, [r2, #0]
 800e7d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d119      	bne.n	800e832 <HAL_SPI_TransmitReceive+0x2ae>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e802:	b29b      	uxth	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d014      	beq.n	800e832 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68da      	ldr	r2, [r3, #12]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e812:	b2d2      	uxtb	r2, r2
 800e814:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	1c5a      	adds	r2, r3, #1
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e824:	b29b      	uxth	r3, r3
 800e826:	3b01      	subs	r3, #1
 800e828:	b29a      	uxth	r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e82e:	2301      	movs	r3, #1
 800e830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e832:	f7fc fb21 	bl	800ae78 <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83e:	429a      	cmp	r2, r3
 800e840:	d803      	bhi.n	800e84a <HAL_SPI_TransmitReceive+0x2c6>
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d102      	bne.n	800e850 <HAL_SPI_TransmitReceive+0x2cc>
 800e84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e850:	2303      	movs	r3, #3
 800e852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e856:	e029      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1a2      	bne.n	800e7a8 <HAL_SPI_TransmitReceive+0x224>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e866:	b29b      	uxth	r3, r3
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d19d      	bne.n	800e7a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f000 fa35 	bl	800ece0 <SPI_EndRxTxTransaction>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d006      	beq.n	800e88a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2220      	movs	r2, #32
 800e886:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e888:	e010      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e892:	2300      	movs	r3, #0
 800e894:	617b      	str	r3, [r7, #20]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	617b      	str	r3, [r7, #20]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	617b      	str	r3, [r7, #20]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	e000      	b.n	800e8ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e8aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e8bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3730      	adds	r7, #48	; 0x30
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b088      	sub	sp, #32
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	099b      	lsrs	r3, r3, #6
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10f      	bne.n	800e90c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00a      	beq.n	800e90c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	099b      	lsrs	r3, r3, #6
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d004      	beq.n	800e90c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4798      	blx	r3
    return;
 800e90a:	e0d7      	b.n	800eabc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	085b      	lsrs	r3, r3, #1
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00a      	beq.n	800e92e <HAL_SPI_IRQHandler+0x66>
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	09db      	lsrs	r3, r3, #7
 800e91c:	f003 0301 	and.w	r3, r3, #1
 800e920:	2b00      	cmp	r3, #0
 800e922:	d004      	beq.n	800e92e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	4798      	blx	r3
    return;
 800e92c:	e0c6      	b.n	800eabc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	095b      	lsrs	r3, r3, #5
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10c      	bne.n	800e954 <HAL_SPI_IRQHandler+0x8c>
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	099b      	lsrs	r3, r3, #6
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	0a1b      	lsrs	r3, r3, #8
 800e94a:	f003 0301 	and.w	r3, r3, #1
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 80b4 	beq.w	800eabc <HAL_SPI_IRQHandler+0x1f4>
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	095b      	lsrs	r3, r3, #5
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 80ad 	beq.w	800eabc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	099b      	lsrs	r3, r3, #6
 800e966:	f003 0301 	and.w	r3, r3, #1
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d023      	beq.n	800e9b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b03      	cmp	r3, #3
 800e978:	d011      	beq.n	800e99e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e97e:	f043 0204 	orr.w	r2, r3, #4
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	617b      	str	r3, [r7, #20]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	617b      	str	r3, [r7, #20]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	e00b      	b.n	800e9b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e99e:	2300      	movs	r3, #0
 800e9a0:	613b      	str	r3, [r7, #16]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	613b      	str	r3, [r7, #16]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	613b      	str	r3, [r7, #16]
 800e9b2:	693b      	ldr	r3, [r7, #16]
        return;
 800e9b4:	e082      	b.n	800eabc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	095b      	lsrs	r3, r3, #5
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d014      	beq.n	800e9ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c6:	f043 0201 	orr.w	r2, r3, #1
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	60fb      	str	r3, [r7, #12]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	0a1b      	lsrs	r3, r3, #8
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00c      	beq.n	800ea12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fc:	f043 0208 	orr.w	r2, r3, #8
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea04:	2300      	movs	r3, #0
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	60bb      	str	r3, [r7, #8]
 800ea10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d04f      	beq.n	800eaba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ea28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	f003 0302 	and.w	r3, r3, #2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d104      	bne.n	800ea46 <HAL_SPI_IRQHandler+0x17e>
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d034      	beq.n	800eab0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f022 0203 	bic.w	r2, r2, #3
 800ea54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d011      	beq.n	800ea82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea62:	4a18      	ldr	r2, [pc, #96]	; (800eac4 <HAL_SPI_IRQHandler+0x1fc>)
 800ea64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fd f866 	bl	800bb3c <HAL_DMA_Abort_IT>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d016      	beq.n	800eab8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea8e:	4a0d      	ldr	r2, [pc, #52]	; (800eac4 <HAL_SPI_IRQHandler+0x1fc>)
 800ea90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fd f850 	bl	800bb3c <HAL_DMA_Abort_IT>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00a      	beq.n	800eab8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800eaae:	e003      	b.n	800eab8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f809 	bl	800eac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800eab6:	e000      	b.n	800eaba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800eab8:	bf00      	nop
    return;
 800eaba:	bf00      	nop
  }
}
 800eabc:	3720      	adds	r7, #32
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	0800eadd 	.word	0x0800eadd

0800eac8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff ffe6 	bl	800eac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eafc:	bf00      	nop
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	4613      	mov	r3, r2
 800eb12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eb14:	f7fc f9b0 	bl	800ae78 <HAL_GetTick>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	1a9b      	subs	r3, r3, r2
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	4413      	add	r3, r2
 800eb22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb24:	f7fc f9a8 	bl	800ae78 <HAL_GetTick>
 800eb28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb2a:	4b39      	ldr	r3, [pc, #228]	; (800ec10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	015b      	lsls	r3, r3, #5
 800eb30:	0d1b      	lsrs	r3, r3, #20
 800eb32:	69fa      	ldr	r2, [r7, #28]
 800eb34:	fb02 f303 	mul.w	r3, r2, r3
 800eb38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb3a:	e054      	b.n	800ebe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb42:	d050      	beq.n	800ebe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb44:	f7fc f998 	bl	800ae78 <HAL_GetTick>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	69fa      	ldr	r2, [r7, #28]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d902      	bls.n	800eb5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d13d      	bne.n	800ebd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb72:	d111      	bne.n	800eb98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb7c:	d004      	beq.n	800eb88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb86:	d107      	bne.n	800eb98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eba0:	d10f      	bne.n	800ebc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ebb0:	601a      	str	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ebd2:	2303      	movs	r3, #3
 800ebd4:	e017      	b.n	800ec06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689a      	ldr	r2, [r3, #8]
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	4013      	ands	r3, r2
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	bf0c      	ite	eq
 800ebf6:	2301      	moveq	r3, #1
 800ebf8:	2300      	movne	r3, #0
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	79fb      	ldrb	r3, [r7, #7]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d19b      	bne.n	800eb3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000048 	.word	0x20000048

0800ec14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af02      	add	r7, sp, #8
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec28:	d111      	bne.n	800ec4e <SPI_EndRxTransaction+0x3a>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec32:	d004      	beq.n	800ec3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec3c:	d107      	bne.n	800ec4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec56:	d12a      	bne.n	800ecae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec60:	d012      	beq.n	800ec88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2180      	movs	r1, #128	; 0x80
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f7ff ff49 	bl	800eb04 <SPI_WaitFlagStateUntilTimeout>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d02d      	beq.n	800ecd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec7c:	f043 0220 	orr.w	r2, r3, #32
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e026      	b.n	800ecd6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2101      	movs	r1, #1
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f7ff ff36 	bl	800eb04 <SPI_WaitFlagStateUntilTimeout>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d01a      	beq.n	800ecd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca2:	f043 0220 	orr.w	r2, r3, #32
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	e013      	b.n	800ecd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7ff ff23 	bl	800eb04 <SPI_WaitFlagStateUntilTimeout>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d007      	beq.n	800ecd4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc8:	f043 0220 	orr.w	r2, r3, #32
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e000      	b.n	800ecd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ecec:	4b1b      	ldr	r3, [pc, #108]	; (800ed5c <SPI_EndRxTxTransaction+0x7c>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a1b      	ldr	r2, [pc, #108]	; (800ed60 <SPI_EndRxTxTransaction+0x80>)
 800ecf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf6:	0d5b      	lsrs	r3, r3, #21
 800ecf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ecfc:	fb02 f303 	mul.w	r3, r2, r3
 800ed00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed0a:	d112      	bne.n	800ed32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	2200      	movs	r2, #0
 800ed14:	2180      	movs	r1, #128	; 0x80
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f7ff fef4 	bl	800eb04 <SPI_WaitFlagStateUntilTimeout>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d016      	beq.n	800ed50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed26:	f043 0220 	orr.w	r2, r3, #32
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e00f      	b.n	800ed52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00a      	beq.n	800ed4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed48:	2b80      	cmp	r3, #128	; 0x80
 800ed4a:	d0f2      	beq.n	800ed32 <SPI_EndRxTxTransaction+0x52>
 800ed4c:	e000      	b.n	800ed50 <SPI_EndRxTxTransaction+0x70>
        break;
 800ed4e:	bf00      	nop
  }

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3718      	adds	r7, #24
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000048 	.word	0x20000048
 800ed60:	165e9f81 	.word	0x165e9f81

0800ed64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d101      	bne.n	800ed76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e041      	b.n	800edfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d106      	bne.n	800ed90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7f5 fa00 	bl	8004190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2202      	movs	r2, #2
 800ed94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f000 f9ce 	bl	800f144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d001      	beq.n	800ee1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e04e      	b.n	800eeba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2202      	movs	r2, #2
 800ee20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68da      	ldr	r2, [r3, #12]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f042 0201 	orr.w	r2, r2, #1
 800ee32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a23      	ldr	r2, [pc, #140]	; (800eec8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d022      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee46:	d01d      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <HAL_TIM_Base_Start_IT+0xc8>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d018      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a1e      	ldr	r2, [pc, #120]	; (800eed0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d013      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a1c      	ldr	r2, [pc, #112]	; (800eed4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d00e      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a1b      	ldr	r2, [pc, #108]	; (800eed8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d009      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a19      	ldr	r2, [pc, #100]	; (800eedc <HAL_TIM_Base_Start_IT+0xd8>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d004      	beq.n	800ee84 <HAL_TIM_Base_Start_IT+0x80>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a18      	ldr	r2, [pc, #96]	; (800eee0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d111      	bne.n	800eea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f003 0307 	and.w	r3, r3, #7
 800ee8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b06      	cmp	r3, #6
 800ee94:	d010      	beq.n	800eeb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f042 0201 	orr.w	r2, r2, #1
 800eea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eea6:	e007      	b.n	800eeb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f042 0201 	orr.w	r2, r2, #1
 800eeb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	40010000 	.word	0x40010000
 800eecc:	40000400 	.word	0x40000400
 800eed0:	40000800 	.word	0x40000800
 800eed4:	40000c00 	.word	0x40000c00
 800eed8:	40010400 	.word	0x40010400
 800eedc:	40014000 	.word	0x40014000
 800eee0:	40001800 	.word	0x40001800

0800eee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	f003 0302 	and.w	r3, r3, #2
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d122      	bne.n	800ef40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f003 0302 	and.w	r3, r3, #2
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d11b      	bne.n	800ef40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f06f 0202 	mvn.w	r2, #2
 800ef10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	699b      	ldr	r3, [r3, #24]
 800ef1e:	f003 0303 	and.w	r3, r3, #3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d003      	beq.n	800ef2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f8ee 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800ef2c:	e005      	b.n	800ef3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 f8e0 	bl	800f0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 f8f1 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	f003 0304 	and.w	r3, r3, #4
 800ef4a:	2b04      	cmp	r3, #4
 800ef4c:	d122      	bne.n	800ef94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	f003 0304 	and.w	r3, r3, #4
 800ef58:	2b04      	cmp	r3, #4
 800ef5a:	d11b      	bne.n	800ef94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f06f 0204 	mvn.w	r2, #4
 800ef64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2202      	movs	r2, #2
 800ef6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f8c4 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800ef80:	e005      	b.n	800ef8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f8b6 	bl	800f0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f8c7 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	f003 0308 	and.w	r3, r3, #8
 800ef9e:	2b08      	cmp	r3, #8
 800efa0:	d122      	bne.n	800efe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	f003 0308 	and.w	r3, r3, #8
 800efac:	2b08      	cmp	r3, #8
 800efae:	d11b      	bne.n	800efe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f06f 0208 	mvn.w	r2, #8
 800efb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2204      	movs	r2, #4
 800efbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	69db      	ldr	r3, [r3, #28]
 800efc6:	f003 0303 	and.w	r3, r3, #3
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d003      	beq.n	800efd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f89a 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800efd4:	e005      	b.n	800efe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f88c 	bl	800f0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f89d 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	f003 0310 	and.w	r3, r3, #16
 800eff2:	2b10      	cmp	r3, #16
 800eff4:	d122      	bne.n	800f03c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	f003 0310 	and.w	r3, r3, #16
 800f000:	2b10      	cmp	r3, #16
 800f002:	d11b      	bne.n	800f03c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f06f 0210 	mvn.w	r2, #16
 800f00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2208      	movs	r2, #8
 800f012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f870 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800f028:	e005      	b.n	800f036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f862 	bl	800f0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f873 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	2b01      	cmp	r3, #1
 800f048:	d10e      	bne.n	800f068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	f003 0301 	and.w	r3, r3, #1
 800f054:	2b01      	cmp	r3, #1
 800f056:	d107      	bne.n	800f068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f06f 0201 	mvn.w	r2, #1
 800f060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7f4 f8fc 	bl	8003260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f072:	2b80      	cmp	r3, #128	; 0x80
 800f074:	d10e      	bne.n	800f094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f080:	2b80      	cmp	r3, #128	; 0x80
 800f082:	d107      	bne.n	800f094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f97e 	bl	800f390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f09e:	2b40      	cmp	r3, #64	; 0x40
 800f0a0:	d10e      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ac:	2b40      	cmp	r3, #64	; 0x40
 800f0ae:	d107      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f838 	bl	800f130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	f003 0320 	and.w	r3, r3, #32
 800f0ca:	2b20      	cmp	r3, #32
 800f0cc:	d10e      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	f003 0320 	and.w	r3, r3, #32
 800f0d8:	2b20      	cmp	r3, #32
 800f0da:	d107      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f06f 0220 	mvn.w	r2, #32
 800f0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f948 	bl	800f37c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f0ec:	bf00      	nop
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a40      	ldr	r2, [pc, #256]	; (800f258 <TIM_Base_SetConfig+0x114>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d013      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f162:	d00f      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a3d      	ldr	r2, [pc, #244]	; (800f25c <TIM_Base_SetConfig+0x118>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d00b      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a3c      	ldr	r2, [pc, #240]	; (800f260 <TIM_Base_SetConfig+0x11c>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d007      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a3b      	ldr	r2, [pc, #236]	; (800f264 <TIM_Base_SetConfig+0x120>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d003      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a3a      	ldr	r2, [pc, #232]	; (800f268 <TIM_Base_SetConfig+0x124>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d108      	bne.n	800f196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a2f      	ldr	r2, [pc, #188]	; (800f258 <TIM_Base_SetConfig+0x114>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d02b      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1a4:	d027      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a2c      	ldr	r2, [pc, #176]	; (800f25c <TIM_Base_SetConfig+0x118>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d023      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a2b      	ldr	r2, [pc, #172]	; (800f260 <TIM_Base_SetConfig+0x11c>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d01f      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a2a      	ldr	r2, [pc, #168]	; (800f264 <TIM_Base_SetConfig+0x120>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d01b      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a29      	ldr	r2, [pc, #164]	; (800f268 <TIM_Base_SetConfig+0x124>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d017      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a28      	ldr	r2, [pc, #160]	; (800f26c <TIM_Base_SetConfig+0x128>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d013      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a27      	ldr	r2, [pc, #156]	; (800f270 <TIM_Base_SetConfig+0x12c>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d00f      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a26      	ldr	r2, [pc, #152]	; (800f274 <TIM_Base_SetConfig+0x130>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d00b      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a25      	ldr	r2, [pc, #148]	; (800f278 <TIM_Base_SetConfig+0x134>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d007      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a24      	ldr	r2, [pc, #144]	; (800f27c <TIM_Base_SetConfig+0x138>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d003      	beq.n	800f1f6 <TIM_Base_SetConfig+0xb2>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a23      	ldr	r2, [pc, #140]	; (800f280 <TIM_Base_SetConfig+0x13c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d108      	bne.n	800f208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	4313      	orrs	r3, r2
 800f206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	4313      	orrs	r3, r2
 800f214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	689a      	ldr	r2, [r3, #8]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a0a      	ldr	r2, [pc, #40]	; (800f258 <TIM_Base_SetConfig+0x114>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d003      	beq.n	800f23c <TIM_Base_SetConfig+0xf8>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a0c      	ldr	r2, [pc, #48]	; (800f268 <TIM_Base_SetConfig+0x124>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d103      	bne.n	800f244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	691a      	ldr	r2, [r3, #16]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	615a      	str	r2, [r3, #20]
}
 800f24a:	bf00      	nop
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	40010000 	.word	0x40010000
 800f25c:	40000400 	.word	0x40000400
 800f260:	40000800 	.word	0x40000800
 800f264:	40000c00 	.word	0x40000c00
 800f268:	40010400 	.word	0x40010400
 800f26c:	40014000 	.word	0x40014000
 800f270:	40014400 	.word	0x40014400
 800f274:	40014800 	.word	0x40014800
 800f278:	40001800 	.word	0x40001800
 800f27c:	40001c00 	.word	0x40001c00
 800f280:	40002000 	.word	0x40002000

0800f284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f294:	2b01      	cmp	r3, #1
 800f296:	d101      	bne.n	800f29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f298:	2302      	movs	r3, #2
 800f29a:	e05a      	b.n	800f352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a21      	ldr	r2, [pc, #132]	; (800f360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d022      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2e8:	d01d      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a1d      	ldr	r2, [pc, #116]	; (800f364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d018      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a1b      	ldr	r2, [pc, #108]	; (800f368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d013      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a1a      	ldr	r2, [pc, #104]	; (800f36c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d00e      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a18      	ldr	r2, [pc, #96]	; (800f370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d009      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a17      	ldr	r2, [pc, #92]	; (800f374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d004      	beq.n	800f326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a15      	ldr	r2, [pc, #84]	; (800f378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d10c      	bne.n	800f340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f32c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	4313      	orrs	r3, r2
 800f336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	40010000 	.word	0x40010000
 800f364:	40000400 	.word	0x40000400
 800f368:	40000800 	.word	0x40000800
 800f36c:	40000c00 	.word	0x40000c00
 800f370:	40010400 	.word	0x40010400
 800f374:	40014000 	.word	0x40014000
 800f378:	40001800 	.word	0x40001800

0800f37c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e03f      	b.n	800f436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7f5 f88a 	bl	80044e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2224      	movs	r2, #36	; 0x24
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f3e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 f869 	bl	80104c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	691a      	ldr	r2, [r3, #16]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f3fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	695a      	ldr	r2, [r3, #20]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f40c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f41c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2220      	movs	r2, #32
 800f428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2220      	movs	r2, #32
 800f430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b08a      	sub	sp, #40	; 0x28
 800f442:	af02      	add	r7, sp, #8
 800f444:	60f8      	str	r0, [r7, #12]
 800f446:	60b9      	str	r1, [r7, #8]
 800f448:	603b      	str	r3, [r7, #0]
 800f44a:	4613      	mov	r3, r2
 800f44c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f44e:	2300      	movs	r3, #0
 800f450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b20      	cmp	r3, #32
 800f45c:	d17c      	bne.n	800f558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d002      	beq.n	800f46a <HAL_UART_Transmit+0x2c>
 800f464:	88fb      	ldrh	r3, [r7, #6]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f46a:	2301      	movs	r3, #1
 800f46c:	e075      	b.n	800f55a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f474:	2b01      	cmp	r3, #1
 800f476:	d101      	bne.n	800f47c <HAL_UART_Transmit+0x3e>
 800f478:	2302      	movs	r3, #2
 800f47a:	e06e      	b.n	800f55a <HAL_UART_Transmit+0x11c>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2221      	movs	r2, #33	; 0x21
 800f48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f492:	f7fb fcf1 	bl	800ae78 <HAL_GetTick>
 800f496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	88fa      	ldrh	r2, [r7, #6]
 800f49c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	88fa      	ldrh	r2, [r7, #6]
 800f4a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ac:	d108      	bne.n	800f4c0 <HAL_UART_Transmit+0x82>
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d104      	bne.n	800f4c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	61bb      	str	r3, [r7, #24]
 800f4be:	e003      	b.n	800f4c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f4d0:	e02a      	b.n	800f528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2180      	movs	r1, #128	; 0x80
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	f000 fd25 	bl	800ff2c <UART_WaitOnFlagUntilTimeout>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e036      	b.n	800f55a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10b      	bne.n	800f50a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	3302      	adds	r3, #2
 800f506:	61bb      	str	r3, [r7, #24]
 800f508:	e007      	b.n	800f51a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	781a      	ldrb	r2, [r3, #0]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	3301      	adds	r3, #1
 800f518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f51e:	b29b      	uxth	r3, r3
 800f520:	3b01      	subs	r3, #1
 800f522:	b29a      	uxth	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1cf      	bne.n	800f4d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2200      	movs	r2, #0
 800f53a:	2140      	movs	r1, #64	; 0x40
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f000 fcf5 	bl	800ff2c <UART_WaitOnFlagUntilTimeout>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f548:	2303      	movs	r3, #3
 800f54a:	e006      	b.n	800f55a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2220      	movs	r2, #32
 800f550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	e000      	b.n	800f55a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f558:	2302      	movs	r3, #2
  }
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b08a      	sub	sp, #40	; 0x28
 800f566:	af02      	add	r7, sp, #8
 800f568:	60f8      	str	r0, [r7, #12]
 800f56a:	60b9      	str	r1, [r7, #8]
 800f56c:	603b      	str	r3, [r7, #0]
 800f56e:	4613      	mov	r3, r2
 800f570:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f572:	2300      	movs	r3, #0
 800f574:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b20      	cmp	r3, #32
 800f580:	f040 808c 	bne.w	800f69c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <HAL_UART_Receive+0x2e>
 800f58a:	88fb      	ldrh	r3, [r7, #6]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e084      	b.n	800f69e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d101      	bne.n	800f5a2 <HAL_UART_Receive+0x40>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e07d      	b.n	800f69e <HAL_UART_Receive+0x13c>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2222      	movs	r2, #34	; 0x22
 800f5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5be:	f7fb fc5b 	bl	800ae78 <HAL_GetTick>
 800f5c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	88fa      	ldrh	r2, [r7, #6]
 800f5c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	88fa      	ldrh	r2, [r7, #6]
 800f5ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5d8:	d108      	bne.n	800f5ec <HAL_UART_Receive+0x8a>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	691b      	ldr	r3, [r3, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d104      	bne.n	800f5ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	61bb      	str	r3, [r7, #24]
 800f5ea:	e003      	b.n	800f5f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f5fc:	e043      	b.n	800f686 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2200      	movs	r2, #0
 800f606:	2120      	movs	r1, #32
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 fc8f 	bl	800ff2c <UART_WaitOnFlagUntilTimeout>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f614:	2303      	movs	r3, #3
 800f616:	e042      	b.n	800f69e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d10c      	bne.n	800f638 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	b29b      	uxth	r3, r3
 800f626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	3302      	adds	r3, #2
 800f634:	61bb      	str	r3, [r7, #24]
 800f636:	e01f      	b.n	800f678 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f640:	d007      	beq.n	800f652 <HAL_UART_Receive+0xf0>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10a      	bne.n	800f660 <HAL_UART_Receive+0xfe>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	e008      	b.n	800f672 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	b2db      	uxtb	r3, r3
 800f668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	3301      	adds	r3, #1
 800f676:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	3b01      	subs	r3, #1
 800f680:	b29a      	uxth	r2, r3
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1b6      	bne.n	800f5fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2220      	movs	r2, #32
 800f694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	e000      	b.n	800f69e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f69c:	2302      	movs	r3, #2
  }
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3720      	adds	r7, #32
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b085      	sub	sp, #20
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	d130      	bne.n	800f722 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d002      	beq.n	800f6cc <HAL_UART_Transmit_IT+0x26>
 800f6c6:	88fb      	ldrh	r3, [r7, #6]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d101      	bne.n	800f6d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e029      	b.n	800f724 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d101      	bne.n	800f6de <HAL_UART_Transmit_IT+0x38>
 800f6da:	2302      	movs	r3, #2
 800f6dc:	e022      	b.n	800f724 <HAL_UART_Transmit_IT+0x7e>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	68ba      	ldr	r2, [r7, #8]
 800f6ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	88fa      	ldrh	r2, [r7, #6]
 800f6f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2221      	movs	r2, #33	; 0x21
 800f702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	68da      	ldr	r2, [r3, #12]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f71c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	e000      	b.n	800f724 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f722:	2302      	movs	r3, #2
  }
}
 800f724:	4618      	mov	r0, r3
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	4613      	mov	r3, r2
 800f73c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b20      	cmp	r3, #32
 800f748:	d11d      	bne.n	800f786 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <HAL_UART_Receive_DMA+0x26>
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f756:	2301      	movs	r3, #1
 800f758:	e016      	b.n	800f788 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f760:	2b01      	cmp	r3, #1
 800f762:	d101      	bne.n	800f768 <HAL_UART_Receive_DMA+0x38>
 800f764:	2302      	movs	r3, #2
 800f766:	e00f      	b.n	800f788 <HAL_UART_Receive_DMA+0x58>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2200      	movs	r2, #0
 800f774:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f776:	88fb      	ldrh	r3, [r7, #6]
 800f778:	461a      	mov	r2, r3
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f000 fc43 	bl	8010008 <UART_Start_Receive_DMA>
 800f782:	4603      	mov	r3, r0
 800f784:	e000      	b.n	800f788 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f786:	2302      	movs	r3, #2
  }
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b0ba      	sub	sp, #232	; 0xe8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7c6:	f003 030f 	and.w	r3, r3, #15
 800f7ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f7ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10f      	bne.n	800f7f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7da:	f003 0320 	and.w	r3, r3, #32
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d009      	beq.n	800f7f6 <HAL_UART_IRQHandler+0x66>
 800f7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7e6:	f003 0320 	and.w	r3, r3, #32
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d003      	beq.n	800f7f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 fdab 	bl	801034a <UART_Receive_IT>
      return;
 800f7f4:	e256      	b.n	800fca4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f7f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 80de 	beq.w	800f9bc <HAL_UART_IRQHandler+0x22c>
 800f800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d106      	bne.n	800f81a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 80d1 	beq.w	800f9bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00b      	beq.n	800f83e <HAL_UART_IRQHandler+0xae>
 800f826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d005      	beq.n	800f83e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f836:	f043 0201 	orr.w	r2, r3, #1
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f842:	f003 0304 	and.w	r3, r3, #4
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00b      	beq.n	800f862 <HAL_UART_IRQHandler+0xd2>
 800f84a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	2b00      	cmp	r3, #0
 800f854:	d005      	beq.n	800f862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	f043 0202 	orr.w	r2, r3, #2
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f866:	f003 0302 	and.w	r3, r3, #2
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d00b      	beq.n	800f886 <HAL_UART_IRQHandler+0xf6>
 800f86e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	2b00      	cmp	r3, #0
 800f878:	d005      	beq.n	800f886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f87e:	f043 0204 	orr.w	r2, r3, #4
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f88a:	f003 0308 	and.w	r3, r3, #8
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d011      	beq.n	800f8b6 <HAL_UART_IRQHandler+0x126>
 800f892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f896:	f003 0320 	and.w	r3, r3, #32
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d005      	beq.n	800f8b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ae:	f043 0208 	orr.w	r2, r3, #8
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 81ed 	beq.w	800fc9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8c4:	f003 0320 	and.w	r3, r3, #32
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d008      	beq.n	800f8de <HAL_UART_IRQHandler+0x14e>
 800f8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8d0:	f003 0320 	and.w	r3, r3, #32
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fd36 	bl	801034a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	695b      	ldr	r3, [r3, #20]
 800f8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e8:	2b40      	cmp	r3, #64	; 0x40
 800f8ea:	bf0c      	ite	eq
 800f8ec:	2301      	moveq	r3, #1
 800f8ee:	2300      	movne	r3, #0
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8fa:	f003 0308 	and.w	r3, r3, #8
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d103      	bne.n	800f90a <HAL_UART_IRQHandler+0x17a>
 800f902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f906:	2b00      	cmp	r3, #0
 800f908:	d04f      	beq.n	800f9aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 fc3e 	bl	801018c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	695b      	ldr	r3, [r3, #20]
 800f916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f91a:	2b40      	cmp	r3, #64	; 0x40
 800f91c:	d141      	bne.n	800f9a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	3314      	adds	r3, #20
 800f924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f92c:	e853 3f00 	ldrex	r3, [r3]
 800f930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f93c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	3314      	adds	r3, #20
 800f946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f94a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f94e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f95a:	e841 2300 	strex	r3, r2, [r1]
 800f95e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1d9      	bne.n	800f91e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d013      	beq.n	800f99a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f976:	4a7d      	ldr	r2, [pc, #500]	; (800fb6c <HAL_UART_IRQHandler+0x3dc>)
 800f978:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fc f8dc 	bl	800bb3c <HAL_DMA_Abort_IT>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d016      	beq.n	800f9b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f994:	4610      	mov	r0, r2
 800f996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f998:	e00e      	b.n	800f9b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f99a 	bl	800fcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a0:	e00a      	b.n	800f9b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 f996 	bl	800fcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a8:	e006      	b.n	800f9b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 f992 	bl	800fcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f9b6:	e170      	b.n	800fc9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9b8:	bf00      	nop
    return;
 800f9ba:	e16e      	b.n	800fc9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	f040 814a 	bne.w	800fc5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ca:	f003 0310 	and.w	r3, r3, #16
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f000 8143 	beq.w	800fc5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d8:	f003 0310 	and.w	r3, r3, #16
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 813c 	beq.w	800fc5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60bb      	str	r3, [r7, #8]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60bb      	str	r3, [r7, #8]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	60bb      	str	r3, [r7, #8]
 800f9f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa02:	2b40      	cmp	r3, #64	; 0x40
 800fa04:	f040 80b4 	bne.w	800fb70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f000 8140 	beq.w	800fc9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fa22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa26:	429a      	cmp	r2, r3
 800fa28:	f080 8139 	bcs.w	800fc9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa38:	69db      	ldr	r3, [r3, #28]
 800fa3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa3e:	f000 8088 	beq.w	800fb52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	330c      	adds	r3, #12
 800fa48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa50:	e853 3f00 	ldrex	r3, [r3]
 800fa54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fa58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	330c      	adds	r3, #12
 800fa6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fa6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fa72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fa7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fa7e:	e841 2300 	strex	r3, r2, [r1]
 800fa82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fa86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1d9      	bne.n	800fa42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	3314      	adds	r3, #20
 800fa94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa98:	e853 3f00 	ldrex	r3, [r3]
 800fa9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fa9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800faa0:	f023 0301 	bic.w	r3, r3, #1
 800faa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3314      	adds	r3, #20
 800faae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fab2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fab6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800faba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e1      	bne.n	800fa8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3314      	adds	r3, #20
 800fad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fad4:	e853 3f00 	ldrex	r3, [r3]
 800fad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fadc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3314      	adds	r3, #20
 800faea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800faee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800faf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800faf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800faf6:	e841 2300 	strex	r3, r2, [r1]
 800fafa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fafc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1e3      	bne.n	800faca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2220      	movs	r2, #32
 800fb06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	330c      	adds	r3, #12
 800fb16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb1a:	e853 3f00 	ldrex	r3, [r3]
 800fb1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb22:	f023 0310 	bic.w	r3, r3, #16
 800fb26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	330c      	adds	r3, #12
 800fb30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fb34:	65ba      	str	r2, [r7, #88]	; 0x58
 800fb36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb3c:	e841 2300 	strex	r3, r2, [r1]
 800fb40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fb42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1e3      	bne.n	800fb10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fb ff85 	bl	800ba5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	1ad3      	subs	r3, r2, r3
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f8c0 	bl	800fce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fb68:	e099      	b.n	800fc9e <HAL_UART_IRQHandler+0x50e>
 800fb6a:	bf00      	nop
 800fb6c:	08010253 	.word	0x08010253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f000 808b 	beq.w	800fca2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fb8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f000 8086 	beq.w	800fca2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	330c      	adds	r3, #12
 800fb9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba0:	e853 3f00 	ldrex	r3, [r3]
 800fba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	330c      	adds	r3, #12
 800fbb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fbba:	647a      	str	r2, [r7, #68]	; 0x44
 800fbbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbc2:	e841 2300 	strex	r3, r2, [r1]
 800fbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1e3      	bne.n	800fb96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3314      	adds	r3, #20
 800fbd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd8:	e853 3f00 	ldrex	r3, [r3]
 800fbdc:	623b      	str	r3, [r7, #32]
   return(result);
 800fbde:	6a3b      	ldr	r3, [r7, #32]
 800fbe0:	f023 0301 	bic.w	r3, r3, #1
 800fbe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3314      	adds	r3, #20
 800fbee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fbf2:	633a      	str	r2, [r7, #48]	; 0x30
 800fbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfa:	e841 2300 	strex	r3, r2, [r1]
 800fbfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e3      	bne.n	800fbce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2220      	movs	r2, #32
 800fc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	330c      	adds	r3, #12
 800fc1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	e853 3f00 	ldrex	r3, [r3]
 800fc22:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f023 0310 	bic.w	r3, r3, #16
 800fc2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	330c      	adds	r3, #12
 800fc34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fc38:	61fa      	str	r2, [r7, #28]
 800fc3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3c:	69b9      	ldr	r1, [r7, #24]
 800fc3e:	69fa      	ldr	r2, [r7, #28]
 800fc40:	e841 2300 	strex	r3, r2, [r1]
 800fc44:	617b      	str	r3, [r7, #20]
   return(result);
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1e3      	bne.n	800fc14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fc50:	4619      	mov	r1, r3
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f848 	bl	800fce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fc58:	e023      	b.n	800fca2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d009      	beq.n	800fc7a <HAL_UART_IRQHandler+0x4ea>
 800fc66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fb01 	bl	801027a <UART_Transmit_IT>
    return;
 800fc78:	e014      	b.n	800fca4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00e      	beq.n	800fca4 <HAL_UART_IRQHandler+0x514>
 800fc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d008      	beq.n	800fca4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fb41 	bl	801031a <UART_EndTransmit_IT>
    return;
 800fc98:	e004      	b.n	800fca4 <HAL_UART_IRQHandler+0x514>
    return;
 800fc9a:	bf00      	nop
 800fc9c:	e002      	b.n	800fca4 <HAL_UART_IRQHandler+0x514>
      return;
 800fc9e:	bf00      	nop
 800fca0:	e000      	b.n	800fca4 <HAL_UART_IRQHandler+0x514>
      return;
 800fca2:	bf00      	nop
  }
}
 800fca4:	37e8      	adds	r7, #232	; 0xe8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop

0800fcac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fcf4:	bf00      	nop
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	b2db      	uxtb	r3, r3
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3714      	adds	r7, #20
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b09c      	sub	sp, #112	; 0x70
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd48:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d172      	bne.n	800fe3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800fd58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	330c      	adds	r3, #12
 800fd64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd68:	e853 3f00 	ldrex	r3, [r3]
 800fd6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd74:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	330c      	adds	r3, #12
 800fd7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd7e:	65ba      	str	r2, [r7, #88]	; 0x58
 800fd80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd86:	e841 2300 	strex	r3, r2, [r1]
 800fd8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e5      	bne.n	800fd5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3314      	adds	r3, #20
 800fd98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	e853 3f00 	ldrex	r3, [r3]
 800fda0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda4:	f023 0301 	bic.w	r3, r3, #1
 800fda8:	667b      	str	r3, [r7, #100]	; 0x64
 800fdaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	3314      	adds	r3, #20
 800fdb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fdb2:	647a      	str	r2, [r7, #68]	; 0x44
 800fdb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fdb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdba:	e841 2300 	strex	r3, r2, [r1]
 800fdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1e5      	bne.n	800fd92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3314      	adds	r3, #20
 800fdcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	e853 3f00 	ldrex	r3, [r3]
 800fdd4:	623b      	str	r3, [r7, #32]
   return(result);
 800fdd6:	6a3b      	ldr	r3, [r7, #32]
 800fdd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fddc:	663b      	str	r3, [r7, #96]	; 0x60
 800fdde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3314      	adds	r3, #20
 800fde4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fde6:	633a      	str	r2, [r7, #48]	; 0x30
 800fde8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdee:	e841 2300 	strex	r3, r2, [r1]
 800fdf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1e5      	bne.n	800fdc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fdfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdfc:	2220      	movs	r2, #32
 800fdfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d119      	bne.n	800fe3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	330c      	adds	r3, #12
 800fe10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	e853 3f00 	ldrex	r3, [r3]
 800fe18:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f023 0310 	bic.w	r3, r3, #16
 800fe20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	330c      	adds	r3, #12
 800fe28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe2a:	61fa      	str	r2, [r7, #28]
 800fe2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2e:	69b9      	ldr	r1, [r7, #24]
 800fe30:	69fa      	ldr	r2, [r7, #28]
 800fe32:	e841 2300 	strex	r3, r2, [r1]
 800fe36:	617b      	str	r3, [r7, #20]
   return(result);
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1e5      	bne.n	800fe0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d106      	bne.n	800fe54 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe4e:	f7ff ff4b 	bl	800fce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe52:	e002      	b.n	800fe5a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800fe54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe56:	f7f3 faa5 	bl	80033a4 <HAL_UART_RxCpltCallback>
}
 800fe5a:	bf00      	nop
 800fe5c:	3770      	adds	r7, #112	; 0x70
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b084      	sub	sp, #16
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d108      	bne.n	800fe8a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fe7c:	085b      	lsrs	r3, r3, #1
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	4619      	mov	r1, r3
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f7ff ff30 	bl	800fce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe88:	e002      	b.n	800fe90 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f7ff ff18 	bl	800fcc0 <HAL_UART_RxHalfCpltCallback>
}
 800fe90:	bf00      	nop
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800feb4:	2b80      	cmp	r3, #128	; 0x80
 800feb6:	bf0c      	ite	eq
 800feb8:	2301      	moveq	r3, #1
 800feba:	2300      	movne	r3, #0
 800febc:	b2db      	uxtb	r3, r3
 800febe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b21      	cmp	r3, #33	; 0x21
 800feca:	d108      	bne.n	800fede <UART_DMAError+0x46>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d005      	beq.n	800fede <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2200      	movs	r2, #0
 800fed6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800fed8:	68b8      	ldr	r0, [r7, #8]
 800feda:	f000 f92f 	bl	801013c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fee8:	2b40      	cmp	r3, #64	; 0x40
 800feea:	bf0c      	ite	eq
 800feec:	2301      	moveq	r3, #1
 800feee:	2300      	movne	r3, #0
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b22      	cmp	r3, #34	; 0x22
 800fefe:	d108      	bne.n	800ff12 <UART_DMAError+0x7a>
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ff0c:	68b8      	ldr	r0, [r7, #8]
 800ff0e:	f000 f93d 	bl	801018c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff16:	f043 0210 	orr.w	r2, r3, #16
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff1e:	68b8      	ldr	r0, [r7, #8]
 800ff20:	f7ff fed8 	bl	800fcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b090      	sub	sp, #64	; 0x40
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff3c:	e050      	b.n	800ffe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff44:	d04c      	beq.n	800ffe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ff46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d007      	beq.n	800ff5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ff4c:	f7fa ff94 	bl	800ae78 <HAL_GetTick>
 800ff50:	4602      	mov	r2, r0
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d241      	bcs.n	800ffe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	330c      	adds	r3, #12
 800ff62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff66:	e853 3f00 	ldrex	r3, [r3]
 800ff6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ff72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	330c      	adds	r3, #12
 800ff7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff7c:	637a      	str	r2, [r7, #52]	; 0x34
 800ff7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff84:	e841 2300 	strex	r3, r2, [r1]
 800ff88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ff8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e5      	bne.n	800ff5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	3314      	adds	r3, #20
 800ff96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	e853 3f00 	ldrex	r3, [r3]
 800ff9e:	613b      	str	r3, [r7, #16]
   return(result);
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f023 0301 	bic.w	r3, r3, #1
 800ffa6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	3314      	adds	r3, #20
 800ffae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffb0:	623a      	str	r2, [r7, #32]
 800ffb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb4:	69f9      	ldr	r1, [r7, #28]
 800ffb6:	6a3a      	ldr	r2, [r7, #32]
 800ffb8:	e841 2300 	strex	r3, r2, [r1]
 800ffbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1e5      	bne.n	800ff90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2220      	movs	r2, #32
 800ffc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e00f      	b.n	8010000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	4013      	ands	r3, r2
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	bf0c      	ite	eq
 800fff0:	2301      	moveq	r3, #1
 800fff2:	2300      	movne	r3, #0
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	461a      	mov	r2, r3
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d09f      	beq.n	800ff3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3740      	adds	r7, #64	; 0x40
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b098      	sub	sp, #96	; 0x60
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	88fa      	ldrh	r2, [r7, #6]
 8010020:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2222      	movs	r2, #34	; 0x22
 801002c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010034:	4a3e      	ldr	r2, [pc, #248]	; (8010130 <UART_Start_Receive_DMA+0x128>)
 8010036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801003c:	4a3d      	ldr	r2, [pc, #244]	; (8010134 <UART_Start_Receive_DMA+0x12c>)
 801003e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010044:	4a3c      	ldr	r2, [pc, #240]	; (8010138 <UART_Start_Receive_DMA+0x130>)
 8010046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801004c:	2200      	movs	r2, #0
 801004e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010050:	f107 0308 	add.w	r3, r7, #8
 8010054:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3304      	adds	r3, #4
 8010060:	4619      	mov	r1, r3
 8010062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	88fb      	ldrh	r3, [r7, #6]
 8010068:	f7fb fca0 	bl	800b9ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801006c:	2300      	movs	r3, #0
 801006e:	613b      	str	r3, [r7, #16]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	613b      	str	r3, [r7, #16]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	613b      	str	r3, [r7, #16]
 8010080:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2200      	movs	r2, #0
 8010086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	330c      	adds	r3, #12
 8010090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801009a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	330c      	adds	r3, #12
 80100a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80100ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80100b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e5      	bne.n	801008a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3314      	adds	r3, #20
 80100c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	e853 3f00 	ldrex	r3, [r3]
 80100cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80100ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d0:	f043 0301 	orr.w	r3, r3, #1
 80100d4:	657b      	str	r3, [r7, #84]	; 0x54
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3314      	adds	r3, #20
 80100dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100de:	63ba      	str	r2, [r7, #56]	; 0x38
 80100e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100e6:	e841 2300 	strex	r3, r2, [r1]
 80100ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1e5      	bne.n	80100be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3314      	adds	r3, #20
 80100f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	e853 3f00 	ldrex	r3, [r3]
 8010100:	617b      	str	r3, [r7, #20]
   return(result);
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010108:	653b      	str	r3, [r7, #80]	; 0x50
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3314      	adds	r3, #20
 8010110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010112:	627a      	str	r2, [r7, #36]	; 0x24
 8010114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010116:	6a39      	ldr	r1, [r7, #32]
 8010118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011a:	e841 2300 	strex	r3, r2, [r1]
 801011e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d1e5      	bne.n	80100f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8010126:	2300      	movs	r3, #0
}
 8010128:	4618      	mov	r0, r3
 801012a:	3760      	adds	r7, #96	; 0x60
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	0800fd3d 	.word	0x0800fd3d
 8010134:	0800fe63 	.word	0x0800fe63
 8010138:	0800fe99 	.word	0x0800fe99

0801013c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801013c:	b480      	push	{r7}
 801013e:	b089      	sub	sp, #36	; 0x24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	330c      	adds	r3, #12
 801014a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	e853 3f00 	ldrex	r3, [r3]
 8010152:	60bb      	str	r3, [r7, #8]
   return(result);
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801015a:	61fb      	str	r3, [r7, #28]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	330c      	adds	r3, #12
 8010162:	69fa      	ldr	r2, [r7, #28]
 8010164:	61ba      	str	r2, [r7, #24]
 8010166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010168:	6979      	ldr	r1, [r7, #20]
 801016a:	69ba      	ldr	r2, [r7, #24]
 801016c:	e841 2300 	strex	r3, r2, [r1]
 8010170:	613b      	str	r3, [r7, #16]
   return(result);
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d1e5      	bne.n	8010144 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2220      	movs	r2, #32
 801017c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010180:	bf00      	nop
 8010182:	3724      	adds	r7, #36	; 0x24
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801018c:	b480      	push	{r7}
 801018e:	b095      	sub	sp, #84	; 0x54
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	330c      	adds	r3, #12
 801019a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80101aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	330c      	adds	r3, #12
 80101b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101b4:	643a      	str	r2, [r7, #64]	; 0x40
 80101b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101bc:	e841 2300 	strex	r3, r2, [r1]
 80101c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1e5      	bne.n	8010194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3314      	adds	r3, #20
 80101ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	e853 3f00 	ldrex	r3, [r3]
 80101d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	f023 0301 	bic.w	r3, r3, #1
 80101de:	64bb      	str	r3, [r7, #72]	; 0x48
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3314      	adds	r3, #20
 80101e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80101ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f0:	e841 2300 	strex	r3, r2, [r1]
 80101f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1e5      	bne.n	80101c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010200:	2b01      	cmp	r3, #1
 8010202:	d119      	bne.n	8010238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	330c      	adds	r3, #12
 801020a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	e853 3f00 	ldrex	r3, [r3]
 8010212:	60bb      	str	r3, [r7, #8]
   return(result);
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	f023 0310 	bic.w	r3, r3, #16
 801021a:	647b      	str	r3, [r7, #68]	; 0x44
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	330c      	adds	r3, #12
 8010222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010224:	61ba      	str	r2, [r7, #24]
 8010226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010228:	6979      	ldr	r1, [r7, #20]
 801022a:	69ba      	ldr	r2, [r7, #24]
 801022c:	e841 2300 	strex	r3, r2, [r1]
 8010230:	613b      	str	r3, [r7, #16]
   return(result);
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1e5      	bne.n	8010204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2220      	movs	r2, #32
 801023c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010246:	bf00      	nop
 8010248:	3754      	adds	r7, #84	; 0x54
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr

08010252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b084      	sub	sp, #16
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801025e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7ff fd31 	bl	800fcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801027a:	b480      	push	{r7}
 801027c:	b085      	sub	sp, #20
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b21      	cmp	r3, #33	; 0x21
 801028c:	d13e      	bne.n	801030c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010296:	d114      	bne.n	80102c2 <UART_Transmit_IT+0x48>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d110      	bne.n	80102c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	881b      	ldrh	r3, [r3, #0]
 80102aa:	461a      	mov	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6a1b      	ldr	r3, [r3, #32]
 80102ba:	1c9a      	adds	r2, r3, #2
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	621a      	str	r2, [r3, #32]
 80102c0:	e008      	b.n	80102d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	1c59      	adds	r1, r3, #1
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	6211      	str	r1, [r2, #32]
 80102cc:	781a      	ldrb	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80102d8:	b29b      	uxth	r3, r3
 80102da:	3b01      	subs	r3, #1
 80102dc:	b29b      	uxth	r3, r3
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	4619      	mov	r1, r3
 80102e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d10f      	bne.n	8010308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68da      	ldr	r2, [r3, #12]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80102f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	e000      	b.n	801030e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801030c:	2302      	movs	r3, #2
  }
}
 801030e:	4618      	mov	r0, r3
 8010310:	3714      	adds	r7, #20
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	68da      	ldr	r2, [r3, #12]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2220      	movs	r2, #32
 8010336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fcb6 	bl	800fcac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b08c      	sub	sp, #48	; 0x30
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b22      	cmp	r3, #34	; 0x22
 801035c:	f040 80ab 	bne.w	80104b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010368:	d117      	bne.n	801039a <UART_Receive_IT+0x50>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d113      	bne.n	801039a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010372:	2300      	movs	r3, #0
 8010374:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	b29b      	uxth	r3, r3
 8010384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010388:	b29a      	uxth	r2, r3
 801038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010392:	1c9a      	adds	r2, r3, #2
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	629a      	str	r2, [r3, #40]	; 0x28
 8010398:	e026      	b.n	80103e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801039e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80103a0:	2300      	movs	r3, #0
 80103a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103ac:	d007      	beq.n	80103be <UART_Receive_IT+0x74>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d10a      	bne.n	80103cc <UART_Receive_IT+0x82>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d106      	bne.n	80103cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	701a      	strb	r2, [r3, #0]
 80103ca:	e008      	b.n	80103de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e2:	1c5a      	adds	r2, r3, #1
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	3b01      	subs	r3, #1
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	4619      	mov	r1, r3
 80103f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d15a      	bne.n	80104b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68da      	ldr	r2, [r3, #12]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f022 0220 	bic.w	r2, r2, #32
 801040a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	68da      	ldr	r2, [r3, #12]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801041a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	695a      	ldr	r2, [r3, #20]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f022 0201 	bic.w	r2, r2, #1
 801042a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2220      	movs	r2, #32
 8010430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010438:	2b01      	cmp	r3, #1
 801043a:	d135      	bne.n	80104a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	330c      	adds	r3, #12
 8010448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	e853 3f00 	ldrex	r3, [r3]
 8010450:	613b      	str	r3, [r7, #16]
   return(result);
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	f023 0310 	bic.w	r3, r3, #16
 8010458:	627b      	str	r3, [r7, #36]	; 0x24
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	330c      	adds	r3, #12
 8010460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010462:	623a      	str	r2, [r7, #32]
 8010464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010466:	69f9      	ldr	r1, [r7, #28]
 8010468:	6a3a      	ldr	r2, [r7, #32]
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e5      	bne.n	8010442 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 0310 	and.w	r3, r3, #16
 8010480:	2b10      	cmp	r3, #16
 8010482:	d10a      	bne.n	801049a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010484:	2300      	movs	r3, #0
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801049e:	4619      	mov	r1, r3
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7ff fc21 	bl	800fce8 <HAL_UARTEx_RxEventCallback>
 80104a6:	e002      	b.n	80104ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7f2 ff7b 	bl	80033a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	e002      	b.n	80104b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80104b2:	2300      	movs	r3, #0
 80104b4:	e000      	b.n	80104b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80104b6:	2302      	movs	r3, #2
  }
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3730      	adds	r7, #48	; 0x30
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c4:	b09f      	sub	sp, #124	; 0x7c
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	691b      	ldr	r3, [r3, #16]
 80104d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80104d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104d6:	68d9      	ldr	r1, [r3, #12]
 80104d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	ea40 0301 	orr.w	r3, r0, r1
 80104e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80104e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104e4:	689a      	ldr	r2, [r3, #8]
 80104e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	431a      	orrs	r2, r3
 80104ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104ee:	695b      	ldr	r3, [r3, #20]
 80104f0:	431a      	orrs	r2, r3
 80104f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104f4:	69db      	ldr	r3, [r3, #28]
 80104f6:	4313      	orrs	r3, r2
 80104f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80104fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010504:	f021 010c 	bic.w	r1, r1, #12
 8010508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801050e:	430b      	orrs	r3, r1
 8010510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801051c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801051e:	6999      	ldr	r1, [r3, #24]
 8010520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	ea40 0301 	orr.w	r3, r0, r1
 8010528:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801052a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	4bc5      	ldr	r3, [pc, #788]	; (8010844 <UART_SetConfig+0x384>)
 8010530:	429a      	cmp	r2, r3
 8010532:	d004      	beq.n	801053e <UART_SetConfig+0x7e>
 8010534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	4bc3      	ldr	r3, [pc, #780]	; (8010848 <UART_SetConfig+0x388>)
 801053a:	429a      	cmp	r2, r3
 801053c:	d103      	bne.n	8010546 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801053e:	f7fd fd05 	bl	800df4c <HAL_RCC_GetPCLK2Freq>
 8010542:	6778      	str	r0, [r7, #116]	; 0x74
 8010544:	e002      	b.n	801054c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010546:	f7fd fced 	bl	800df24 <HAL_RCC_GetPCLK1Freq>
 801054a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801054c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801054e:	69db      	ldr	r3, [r3, #28]
 8010550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010554:	f040 80b6 	bne.w	80106c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801055a:	461c      	mov	r4, r3
 801055c:	f04f 0500 	mov.w	r5, #0
 8010560:	4622      	mov	r2, r4
 8010562:	462b      	mov	r3, r5
 8010564:	1891      	adds	r1, r2, r2
 8010566:	6439      	str	r1, [r7, #64]	; 0x40
 8010568:	415b      	adcs	r3, r3
 801056a:	647b      	str	r3, [r7, #68]	; 0x44
 801056c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010570:	1912      	adds	r2, r2, r4
 8010572:	eb45 0303 	adc.w	r3, r5, r3
 8010576:	f04f 0000 	mov.w	r0, #0
 801057a:	f04f 0100 	mov.w	r1, #0
 801057e:	00d9      	lsls	r1, r3, #3
 8010580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010584:	00d0      	lsls	r0, r2, #3
 8010586:	4602      	mov	r2, r0
 8010588:	460b      	mov	r3, r1
 801058a:	1911      	adds	r1, r2, r4
 801058c:	6639      	str	r1, [r7, #96]	; 0x60
 801058e:	416b      	adcs	r3, r5
 8010590:	667b      	str	r3, [r7, #100]	; 0x64
 8010592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	461a      	mov	r2, r3
 8010598:	f04f 0300 	mov.w	r3, #0
 801059c:	1891      	adds	r1, r2, r2
 801059e:	63b9      	str	r1, [r7, #56]	; 0x38
 80105a0:	415b      	adcs	r3, r3
 80105a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80105a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80105ac:	f7f0 fa96 	bl	8000adc <__aeabi_uldivmod>
 80105b0:	4602      	mov	r2, r0
 80105b2:	460b      	mov	r3, r1
 80105b4:	4ba5      	ldr	r3, [pc, #660]	; (801084c <UART_SetConfig+0x38c>)
 80105b6:	fba3 2302 	umull	r2, r3, r3, r2
 80105ba:	095b      	lsrs	r3, r3, #5
 80105bc:	011e      	lsls	r6, r3, #4
 80105be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105c0:	461c      	mov	r4, r3
 80105c2:	f04f 0500 	mov.w	r5, #0
 80105c6:	4622      	mov	r2, r4
 80105c8:	462b      	mov	r3, r5
 80105ca:	1891      	adds	r1, r2, r2
 80105cc:	6339      	str	r1, [r7, #48]	; 0x30
 80105ce:	415b      	adcs	r3, r3
 80105d0:	637b      	str	r3, [r7, #52]	; 0x34
 80105d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80105d6:	1912      	adds	r2, r2, r4
 80105d8:	eb45 0303 	adc.w	r3, r5, r3
 80105dc:	f04f 0000 	mov.w	r0, #0
 80105e0:	f04f 0100 	mov.w	r1, #0
 80105e4:	00d9      	lsls	r1, r3, #3
 80105e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80105ea:	00d0      	lsls	r0, r2, #3
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	1911      	adds	r1, r2, r4
 80105f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80105f4:	416b      	adcs	r3, r5
 80105f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	461a      	mov	r2, r3
 80105fe:	f04f 0300 	mov.w	r3, #0
 8010602:	1891      	adds	r1, r2, r2
 8010604:	62b9      	str	r1, [r7, #40]	; 0x28
 8010606:	415b      	adcs	r3, r3
 8010608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801060a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801060e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010612:	f7f0 fa63 	bl	8000adc <__aeabi_uldivmod>
 8010616:	4602      	mov	r2, r0
 8010618:	460b      	mov	r3, r1
 801061a:	4b8c      	ldr	r3, [pc, #560]	; (801084c <UART_SetConfig+0x38c>)
 801061c:	fba3 1302 	umull	r1, r3, r3, r2
 8010620:	095b      	lsrs	r3, r3, #5
 8010622:	2164      	movs	r1, #100	; 0x64
 8010624:	fb01 f303 	mul.w	r3, r1, r3
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	00db      	lsls	r3, r3, #3
 801062c:	3332      	adds	r3, #50	; 0x32
 801062e:	4a87      	ldr	r2, [pc, #540]	; (801084c <UART_SetConfig+0x38c>)
 8010630:	fba2 2303 	umull	r2, r3, r2, r3
 8010634:	095b      	lsrs	r3, r3, #5
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801063c:	441e      	add	r6, r3
 801063e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010640:	4618      	mov	r0, r3
 8010642:	f04f 0100 	mov.w	r1, #0
 8010646:	4602      	mov	r2, r0
 8010648:	460b      	mov	r3, r1
 801064a:	1894      	adds	r4, r2, r2
 801064c:	623c      	str	r4, [r7, #32]
 801064e:	415b      	adcs	r3, r3
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
 8010652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010656:	1812      	adds	r2, r2, r0
 8010658:	eb41 0303 	adc.w	r3, r1, r3
 801065c:	f04f 0400 	mov.w	r4, #0
 8010660:	f04f 0500 	mov.w	r5, #0
 8010664:	00dd      	lsls	r5, r3, #3
 8010666:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801066a:	00d4      	lsls	r4, r2, #3
 801066c:	4622      	mov	r2, r4
 801066e:	462b      	mov	r3, r5
 8010670:	1814      	adds	r4, r2, r0
 8010672:	653c      	str	r4, [r7, #80]	; 0x50
 8010674:	414b      	adcs	r3, r1
 8010676:	657b      	str	r3, [r7, #84]	; 0x54
 8010678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	461a      	mov	r2, r3
 801067e:	f04f 0300 	mov.w	r3, #0
 8010682:	1891      	adds	r1, r2, r2
 8010684:	61b9      	str	r1, [r7, #24]
 8010686:	415b      	adcs	r3, r3
 8010688:	61fb      	str	r3, [r7, #28]
 801068a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801068e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010692:	f7f0 fa23 	bl	8000adc <__aeabi_uldivmod>
 8010696:	4602      	mov	r2, r0
 8010698:	460b      	mov	r3, r1
 801069a:	4b6c      	ldr	r3, [pc, #432]	; (801084c <UART_SetConfig+0x38c>)
 801069c:	fba3 1302 	umull	r1, r3, r3, r2
 80106a0:	095b      	lsrs	r3, r3, #5
 80106a2:	2164      	movs	r1, #100	; 0x64
 80106a4:	fb01 f303 	mul.w	r3, r1, r3
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	3332      	adds	r3, #50	; 0x32
 80106ae:	4a67      	ldr	r2, [pc, #412]	; (801084c <UART_SetConfig+0x38c>)
 80106b0:	fba2 2303 	umull	r2, r3, r2, r3
 80106b4:	095b      	lsrs	r3, r3, #5
 80106b6:	f003 0207 	and.w	r2, r3, #7
 80106ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4432      	add	r2, r6
 80106c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80106c2:	e0b9      	b.n	8010838 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80106c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106c6:	461c      	mov	r4, r3
 80106c8:	f04f 0500 	mov.w	r5, #0
 80106cc:	4622      	mov	r2, r4
 80106ce:	462b      	mov	r3, r5
 80106d0:	1891      	adds	r1, r2, r2
 80106d2:	6139      	str	r1, [r7, #16]
 80106d4:	415b      	adcs	r3, r3
 80106d6:	617b      	str	r3, [r7, #20]
 80106d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80106dc:	1912      	adds	r2, r2, r4
 80106de:	eb45 0303 	adc.w	r3, r5, r3
 80106e2:	f04f 0000 	mov.w	r0, #0
 80106e6:	f04f 0100 	mov.w	r1, #0
 80106ea:	00d9      	lsls	r1, r3, #3
 80106ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80106f0:	00d0      	lsls	r0, r2, #3
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	eb12 0804 	adds.w	r8, r2, r4
 80106fa:	eb43 0905 	adc.w	r9, r3, r5
 80106fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	4618      	mov	r0, r3
 8010704:	f04f 0100 	mov.w	r1, #0
 8010708:	f04f 0200 	mov.w	r2, #0
 801070c:	f04f 0300 	mov.w	r3, #0
 8010710:	008b      	lsls	r3, r1, #2
 8010712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010716:	0082      	lsls	r2, r0, #2
 8010718:	4640      	mov	r0, r8
 801071a:	4649      	mov	r1, r9
 801071c:	f7f0 f9de 	bl	8000adc <__aeabi_uldivmod>
 8010720:	4602      	mov	r2, r0
 8010722:	460b      	mov	r3, r1
 8010724:	4b49      	ldr	r3, [pc, #292]	; (801084c <UART_SetConfig+0x38c>)
 8010726:	fba3 2302 	umull	r2, r3, r3, r2
 801072a:	095b      	lsrs	r3, r3, #5
 801072c:	011e      	lsls	r6, r3, #4
 801072e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010730:	4618      	mov	r0, r3
 8010732:	f04f 0100 	mov.w	r1, #0
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	1894      	adds	r4, r2, r2
 801073c:	60bc      	str	r4, [r7, #8]
 801073e:	415b      	adcs	r3, r3
 8010740:	60fb      	str	r3, [r7, #12]
 8010742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010746:	1812      	adds	r2, r2, r0
 8010748:	eb41 0303 	adc.w	r3, r1, r3
 801074c:	f04f 0400 	mov.w	r4, #0
 8010750:	f04f 0500 	mov.w	r5, #0
 8010754:	00dd      	lsls	r5, r3, #3
 8010756:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801075a:	00d4      	lsls	r4, r2, #3
 801075c:	4622      	mov	r2, r4
 801075e:	462b      	mov	r3, r5
 8010760:	1814      	adds	r4, r2, r0
 8010762:	64bc      	str	r4, [r7, #72]	; 0x48
 8010764:	414b      	adcs	r3, r1
 8010766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f04f 0100 	mov.w	r1, #0
 8010772:	f04f 0200 	mov.w	r2, #0
 8010776:	f04f 0300 	mov.w	r3, #0
 801077a:	008b      	lsls	r3, r1, #2
 801077c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010780:	0082      	lsls	r2, r0, #2
 8010782:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010786:	f7f0 f9a9 	bl	8000adc <__aeabi_uldivmod>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4b2f      	ldr	r3, [pc, #188]	; (801084c <UART_SetConfig+0x38c>)
 8010790:	fba3 1302 	umull	r1, r3, r3, r2
 8010794:	095b      	lsrs	r3, r3, #5
 8010796:	2164      	movs	r1, #100	; 0x64
 8010798:	fb01 f303 	mul.w	r3, r1, r3
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	011b      	lsls	r3, r3, #4
 80107a0:	3332      	adds	r3, #50	; 0x32
 80107a2:	4a2a      	ldr	r2, [pc, #168]	; (801084c <UART_SetConfig+0x38c>)
 80107a4:	fba2 2303 	umull	r2, r3, r2, r3
 80107a8:	095b      	lsrs	r3, r3, #5
 80107aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107ae:	441e      	add	r6, r3
 80107b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107b2:	4618      	mov	r0, r3
 80107b4:	f04f 0100 	mov.w	r1, #0
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	1894      	adds	r4, r2, r2
 80107be:	603c      	str	r4, [r7, #0]
 80107c0:	415b      	adcs	r3, r3
 80107c2:	607b      	str	r3, [r7, #4]
 80107c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107c8:	1812      	adds	r2, r2, r0
 80107ca:	eb41 0303 	adc.w	r3, r1, r3
 80107ce:	f04f 0400 	mov.w	r4, #0
 80107d2:	f04f 0500 	mov.w	r5, #0
 80107d6:	00dd      	lsls	r5, r3, #3
 80107d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80107dc:	00d4      	lsls	r4, r2, #3
 80107de:	4622      	mov	r2, r4
 80107e0:	462b      	mov	r3, r5
 80107e2:	eb12 0a00 	adds.w	sl, r2, r0
 80107e6:	eb43 0b01 	adc.w	fp, r3, r1
 80107ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f04f 0100 	mov.w	r1, #0
 80107f4:	f04f 0200 	mov.w	r2, #0
 80107f8:	f04f 0300 	mov.w	r3, #0
 80107fc:	008b      	lsls	r3, r1, #2
 80107fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010802:	0082      	lsls	r2, r0, #2
 8010804:	4650      	mov	r0, sl
 8010806:	4659      	mov	r1, fp
 8010808:	f7f0 f968 	bl	8000adc <__aeabi_uldivmod>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4b0e      	ldr	r3, [pc, #56]	; (801084c <UART_SetConfig+0x38c>)
 8010812:	fba3 1302 	umull	r1, r3, r3, r2
 8010816:	095b      	lsrs	r3, r3, #5
 8010818:	2164      	movs	r1, #100	; 0x64
 801081a:	fb01 f303 	mul.w	r3, r1, r3
 801081e:	1ad3      	subs	r3, r2, r3
 8010820:	011b      	lsls	r3, r3, #4
 8010822:	3332      	adds	r3, #50	; 0x32
 8010824:	4a09      	ldr	r2, [pc, #36]	; (801084c <UART_SetConfig+0x38c>)
 8010826:	fba2 2303 	umull	r2, r3, r2, r3
 801082a:	095b      	lsrs	r3, r3, #5
 801082c:	f003 020f 	and.w	r2, r3, #15
 8010830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4432      	add	r2, r6
 8010836:	609a      	str	r2, [r3, #8]
}
 8010838:	bf00      	nop
 801083a:	377c      	adds	r7, #124	; 0x7c
 801083c:	46bd      	mov	sp, r7
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	bf00      	nop
 8010844:	40011000 	.word	0x40011000
 8010848:	40011400 	.word	0x40011400
 801084c:	51eb851f 	.word	0x51eb851f

08010850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010850:	b084      	sub	sp, #16
 8010852:	b580      	push	{r7, lr}
 8010854:	b084      	sub	sp, #16
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	f107 001c 	add.w	r0, r7, #28
 801085e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	2b01      	cmp	r3, #1
 8010866:	d122      	bne.n	80108ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801086c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801087c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010892:	2b01      	cmp	r3, #1
 8010894:	d105      	bne.n	80108a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f001 fb1c 	bl	8011ee0 <USB_CoreReset>
 80108a8:	4603      	mov	r3, r0
 80108aa:	73fb      	strb	r3, [r7, #15]
 80108ac:	e01a      	b.n	80108e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f001 fb10 	bl	8011ee0 <USB_CoreReset>
 80108c0:	4603      	mov	r3, r0
 80108c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80108c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d106      	bne.n	80108d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	639a      	str	r2, [r3, #56]	; 0x38
 80108d6:	e005      	b.n	80108e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d10b      	bne.n	8010902 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	f043 0206 	orr.w	r2, r3, #6
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	f043 0220 	orr.w	r2, r3, #32
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010902:	7bfb      	ldrb	r3, [r7, #15]
}
 8010904:	4618      	mov	r0, r3
 8010906:	3710      	adds	r7, #16
 8010908:	46bd      	mov	sp, r7
 801090a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801090e:	b004      	add	sp, #16
 8010910:	4770      	bx	lr
	...

08010914 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010914:	b480      	push	{r7}
 8010916:	b087      	sub	sp, #28
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	4613      	mov	r3, r2
 8010920:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010922:	79fb      	ldrb	r3, [r7, #7]
 8010924:	2b02      	cmp	r3, #2
 8010926:	d165      	bne.n	80109f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	4a41      	ldr	r2, [pc, #260]	; (8010a30 <USB_SetTurnaroundTime+0x11c>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d906      	bls.n	801093e <USB_SetTurnaroundTime+0x2a>
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	4a40      	ldr	r2, [pc, #256]	; (8010a34 <USB_SetTurnaroundTime+0x120>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d202      	bcs.n	801093e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010938:	230f      	movs	r3, #15
 801093a:	617b      	str	r3, [r7, #20]
 801093c:	e062      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	4a3c      	ldr	r2, [pc, #240]	; (8010a34 <USB_SetTurnaroundTime+0x120>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d306      	bcc.n	8010954 <USB_SetTurnaroundTime+0x40>
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	4a3b      	ldr	r2, [pc, #236]	; (8010a38 <USB_SetTurnaroundTime+0x124>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d202      	bcs.n	8010954 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801094e:	230e      	movs	r3, #14
 8010950:	617b      	str	r3, [r7, #20]
 8010952:	e057      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	4a38      	ldr	r2, [pc, #224]	; (8010a38 <USB_SetTurnaroundTime+0x124>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d306      	bcc.n	801096a <USB_SetTurnaroundTime+0x56>
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	4a37      	ldr	r2, [pc, #220]	; (8010a3c <USB_SetTurnaroundTime+0x128>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d202      	bcs.n	801096a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010964:	230d      	movs	r3, #13
 8010966:	617b      	str	r3, [r7, #20]
 8010968:	e04c      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	4a33      	ldr	r2, [pc, #204]	; (8010a3c <USB_SetTurnaroundTime+0x128>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d306      	bcc.n	8010980 <USB_SetTurnaroundTime+0x6c>
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	4a32      	ldr	r2, [pc, #200]	; (8010a40 <USB_SetTurnaroundTime+0x12c>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d802      	bhi.n	8010980 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801097a:	230c      	movs	r3, #12
 801097c:	617b      	str	r3, [r7, #20]
 801097e:	e041      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	4a2f      	ldr	r2, [pc, #188]	; (8010a40 <USB_SetTurnaroundTime+0x12c>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d906      	bls.n	8010996 <USB_SetTurnaroundTime+0x82>
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	4a2e      	ldr	r2, [pc, #184]	; (8010a44 <USB_SetTurnaroundTime+0x130>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d802      	bhi.n	8010996 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010990:	230b      	movs	r3, #11
 8010992:	617b      	str	r3, [r7, #20]
 8010994:	e036      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	4a2a      	ldr	r2, [pc, #168]	; (8010a44 <USB_SetTurnaroundTime+0x130>)
 801099a:	4293      	cmp	r3, r2
 801099c:	d906      	bls.n	80109ac <USB_SetTurnaroundTime+0x98>
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	4a29      	ldr	r2, [pc, #164]	; (8010a48 <USB_SetTurnaroundTime+0x134>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d802      	bhi.n	80109ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80109a6:	230a      	movs	r3, #10
 80109a8:	617b      	str	r3, [r7, #20]
 80109aa:	e02b      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	4a26      	ldr	r2, [pc, #152]	; (8010a48 <USB_SetTurnaroundTime+0x134>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d906      	bls.n	80109c2 <USB_SetTurnaroundTime+0xae>
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	4a25      	ldr	r2, [pc, #148]	; (8010a4c <USB_SetTurnaroundTime+0x138>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d202      	bcs.n	80109c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80109bc:	2309      	movs	r3, #9
 80109be:	617b      	str	r3, [r7, #20]
 80109c0:	e020      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	4a21      	ldr	r2, [pc, #132]	; (8010a4c <USB_SetTurnaroundTime+0x138>)
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d306      	bcc.n	80109d8 <USB_SetTurnaroundTime+0xc4>
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	4a20      	ldr	r2, [pc, #128]	; (8010a50 <USB_SetTurnaroundTime+0x13c>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d802      	bhi.n	80109d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80109d2:	2308      	movs	r3, #8
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	e015      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	4a1d      	ldr	r2, [pc, #116]	; (8010a50 <USB_SetTurnaroundTime+0x13c>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d906      	bls.n	80109ee <USB_SetTurnaroundTime+0xda>
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	4a1c      	ldr	r2, [pc, #112]	; (8010a54 <USB_SetTurnaroundTime+0x140>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d202      	bcs.n	80109ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80109e8:	2307      	movs	r3, #7
 80109ea:	617b      	str	r3, [r7, #20]
 80109ec:	e00a      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80109ee:	2306      	movs	r3, #6
 80109f0:	617b      	str	r3, [r7, #20]
 80109f2:	e007      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d102      	bne.n	8010a00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80109fa:	2309      	movs	r3, #9
 80109fc:	617b      	str	r3, [r7, #20]
 80109fe:	e001      	b.n	8010a04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010a00:	2309      	movs	r3, #9
 8010a02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68da      	ldr	r2, [r3, #12]
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	029b      	lsls	r3, r3, #10
 8010a18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010a1c:	431a      	orrs	r2, r3
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	371c      	adds	r7, #28
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr
 8010a30:	00d8acbf 	.word	0x00d8acbf
 8010a34:	00e4e1c0 	.word	0x00e4e1c0
 8010a38:	00f42400 	.word	0x00f42400
 8010a3c:	01067380 	.word	0x01067380
 8010a40:	011a499f 	.word	0x011a499f
 8010a44:	01312cff 	.word	0x01312cff
 8010a48:	014ca43f 	.word	0x014ca43f
 8010a4c:	016e3600 	.word	0x016e3600
 8010a50:	01a6ab1f 	.word	0x01a6ab1f
 8010a54:	01e84800 	.word	0x01e84800

08010a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	f043 0201 	orr.w	r2, r3, #1
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	370c      	adds	r7, #12
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	b083      	sub	sp, #12
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	f023 0201 	bic.w	r2, r3, #1
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010ab8:	78fb      	ldrb	r3, [r7, #3]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d115      	bne.n	8010aea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010aca:	2001      	movs	r0, #1
 8010acc:	f7fa f9e0 	bl	800ae90 <HAL_Delay>
      ms++;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f001 f972 	bl	8011dc0 <USB_GetMode>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d01e      	beq.n	8010b20 <USB_SetCurrentMode+0x84>
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b31      	cmp	r3, #49	; 0x31
 8010ae6:	d9f0      	bls.n	8010aca <USB_SetCurrentMode+0x2e>
 8010ae8:	e01a      	b.n	8010b20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010aea:	78fb      	ldrb	r3, [r7, #3]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d115      	bne.n	8010b1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010afc:	2001      	movs	r0, #1
 8010afe:	f7fa f9c7 	bl	800ae90 <HAL_Delay>
      ms++;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3301      	adds	r3, #1
 8010b06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f001 f959 	bl	8011dc0 <USB_GetMode>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d005      	beq.n	8010b20 <USB_SetCurrentMode+0x84>
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b31      	cmp	r3, #49	; 0x31
 8010b18:	d9f0      	bls.n	8010afc <USB_SetCurrentMode+0x60>
 8010b1a:	e001      	b.n	8010b20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e005      	b.n	8010b2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b32      	cmp	r3, #50	; 0x32
 8010b24:	d101      	bne.n	8010b2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010b26:	2301      	movs	r3, #1
 8010b28:	e000      	b.n	8010b2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010b2a:	2300      	movs	r3, #0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b34:	b084      	sub	sp, #16
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b086      	sub	sp, #24
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010b4e:	2300      	movs	r3, #0
 8010b50:	613b      	str	r3, [r7, #16]
 8010b52:	e009      	b.n	8010b68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	3340      	adds	r3, #64	; 0x40
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	4413      	add	r3, r2
 8010b5e:	2200      	movs	r2, #0
 8010b60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	3301      	adds	r3, #1
 8010b66:	613b      	str	r3, [r7, #16]
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	2b0e      	cmp	r3, #14
 8010b6c:	d9f2      	bls.n	8010b54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d11c      	bne.n	8010bae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b82:	f043 0302 	orr.w	r3, r3, #2
 8010b86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	639a      	str	r2, [r3, #56]	; 0x38
 8010bac:	e00b      	b.n	8010bc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010bcc:	461a      	mov	r2, r3
 8010bce:	2300      	movs	r3, #0
 8010bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bd8:	4619      	mov	r1, r3
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be0:	461a      	mov	r2, r3
 8010be2:	680b      	ldr	r3, [r1, #0]
 8010be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d10c      	bne.n	8010c06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d104      	bne.n	8010bfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 f945 	bl	8010e84 <USB_SetDevSpeed>
 8010bfa:	e008      	b.n	8010c0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010bfc:	2101      	movs	r1, #1
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f000 f940 	bl	8010e84 <USB_SetDevSpeed>
 8010c04:	e003      	b.n	8010c0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010c06:	2103      	movs	r1, #3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f93b 	bl	8010e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010c0e:	2110      	movs	r1, #16
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f8f3 	bl	8010dfc <USB_FlushTxFifo>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 f90f 	bl	8010e44 <USB_FlushRxFifo>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d001      	beq.n	8010c30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c36:	461a      	mov	r2, r3
 8010c38:	2300      	movs	r3, #0
 8010c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c42:	461a      	mov	r2, r3
 8010c44:	2300      	movs	r3, #0
 8010c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c4e:	461a      	mov	r2, r3
 8010c50:	2300      	movs	r3, #0
 8010c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c54:	2300      	movs	r3, #0
 8010c56:	613b      	str	r3, [r7, #16]
 8010c58:	e043      	b.n	8010ce2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	015a      	lsls	r2, r3, #5
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	4413      	add	r3, r2
 8010c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c70:	d118      	bne.n	8010ca4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10a      	bne.n	8010c8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	015a      	lsls	r2, r3, #5
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	4413      	add	r3, r2
 8010c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c84:	461a      	mov	r2, r3
 8010c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010c8a:	6013      	str	r3, [r2, #0]
 8010c8c:	e013      	b.n	8010cb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	015a      	lsls	r2, r3, #5
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	4413      	add	r3, r2
 8010c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010ca0:	6013      	str	r3, [r2, #0]
 8010ca2:	e008      	b.n	8010cb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	015a      	lsls	r2, r3, #5
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	4413      	add	r3, r2
 8010cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	015a      	lsls	r2, r3, #5
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	015a      	lsls	r2, r3, #5
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	613b      	str	r3, [r7, #16]
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce4:	693a      	ldr	r2, [r7, #16]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d3b7      	bcc.n	8010c5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cea:	2300      	movs	r3, #0
 8010cec:	613b      	str	r3, [r7, #16]
 8010cee:	e043      	b.n	8010d78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d06:	d118      	bne.n	8010d3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10a      	bne.n	8010d24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010d20:	6013      	str	r3, [r2, #0]
 8010d22:	e013      	b.n	8010d4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	015a      	lsls	r2, r3, #5
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d30:	461a      	mov	r2, r3
 8010d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010d36:	6013      	str	r3, [r2, #0]
 8010d38:	e008      	b.n	8010d4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	015a      	lsls	r2, r3, #5
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4413      	add	r3, r2
 8010d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d46:	461a      	mov	r2, r3
 8010d48:	2300      	movs	r3, #0
 8010d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	015a      	lsls	r2, r3, #5
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d58:	461a      	mov	r2, r3
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	015a      	lsls	r2, r3, #5
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	4413      	add	r3, r2
 8010d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	3301      	adds	r3, #1
 8010d76:	613b      	str	r3, [r7, #16]
 8010d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d3b7      	bcc.n	8010cf0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d86:	691b      	ldr	r3, [r3, #16]
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d105      	bne.n	8010db4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	699b      	ldr	r3, [r3, #24]
 8010dac:	f043 0210 	orr.w	r2, r3, #16
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	699a      	ldr	r2, [r3, #24]
 8010db8:	4b0f      	ldr	r3, [pc, #60]	; (8010df8 <USB_DevInit+0x2c4>)
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	699b      	ldr	r3, [r3, #24]
 8010dca:	f043 0208 	orr.w	r2, r3, #8
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d107      	bne.n	8010de8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010de0:	f043 0304 	orr.w	r3, r3, #4
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3718      	adds	r7, #24
 8010dee:	46bd      	mov	sp, r7
 8010df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010df4:	b004      	add	sp, #16
 8010df6:	4770      	bx	lr
 8010df8:	803c3800 	.word	0x803c3800

08010dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e06:	2300      	movs	r3, #0
 8010e08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	019b      	lsls	r3, r3, #6
 8010e0e:	f043 0220 	orr.w	r2, r3, #32
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	3301      	adds	r3, #1
 8010e1a:	60fb      	str	r3, [r7, #12]
 8010e1c:	4a08      	ldr	r2, [pc, #32]	; (8010e40 <USB_FlushTxFifo+0x44>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d901      	bls.n	8010e26 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8010e22:	2303      	movs	r3, #3
 8010e24:	e006      	b.n	8010e34 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	f003 0320 	and.w	r3, r3, #32
 8010e2e:	2b20      	cmp	r3, #32
 8010e30:	d0f1      	beq.n	8010e16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr
 8010e40:	00030d40 	.word	0x00030d40

08010e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b085      	sub	sp, #20
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2210      	movs	r2, #16
 8010e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	4a08      	ldr	r2, [pc, #32]	; (8010e80 <USB_FlushRxFifo+0x3c>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d901      	bls.n	8010e66 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8010e62:	2303      	movs	r3, #3
 8010e64:	e006      	b.n	8010e74 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	2b10      	cmp	r3, #16
 8010e70:	d0f1      	beq.n	8010e56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr
 8010e80:	00030d40 	.word	0x00030d40

08010e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	78fb      	ldrb	r3, [r7, #3]
 8010e9e:	68f9      	ldr	r1, [r7, #12]
 8010ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b087      	sub	sp, #28
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 0306 	and.w	r3, r3, #6
 8010ece:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d102      	bne.n	8010edc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	75fb      	strb	r3, [r7, #23]
 8010eda:	e00a      	b.n	8010ef2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d002      	beq.n	8010ee8 <USB_GetDevSpeed+0x32>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b06      	cmp	r3, #6
 8010ee6:	d102      	bne.n	8010eee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010ee8:	2302      	movs	r3, #2
 8010eea:	75fb      	strb	r3, [r7, #23]
 8010eec:	e001      	b.n	8010ef2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010eee:	230f      	movs	r3, #15
 8010ef0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	371c      	adds	r7, #28
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr

08010f00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	785b      	ldrb	r3, [r3, #1]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d13a      	bne.n	8010f92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f22:	69da      	ldr	r2, [r3, #28]
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	f003 030f 	and.w	r3, r3, #15
 8010f2c:	2101      	movs	r1, #1
 8010f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	68f9      	ldr	r1, [r7, #12]
 8010f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	015a      	lsls	r2, r3, #5
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	4413      	add	r3, r2
 8010f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d155      	bne.n	8011000 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	015a      	lsls	r2, r3, #5
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	689b      	ldr	r3, [r3, #8]
 8010f66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	78db      	ldrb	r3, [r3, #3]
 8010f6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	059b      	lsls	r3, r3, #22
 8010f76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	0151      	lsls	r1, r2, #5
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	440a      	add	r2, r1
 8010f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f8e:	6013      	str	r3, [r2, #0]
 8010f90:	e036      	b.n	8011000 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f98:	69da      	ldr	r2, [r3, #28]
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	f003 030f 	and.w	r3, r3, #15
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa8:	041b      	lsls	r3, r3, #16
 8010faa:	68f9      	ldr	r1, [r7, #12]
 8010fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	015a      	lsls	r2, r3, #5
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	4413      	add	r3, r2
 8010fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d11a      	bne.n	8011000 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	015a      	lsls	r2, r3, #5
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	78db      	ldrb	r3, [r3, #3]
 8010fe4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010fe6:	430b      	orrs	r3, r1
 8010fe8:	4313      	orrs	r3, r2
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	0151      	lsls	r1, r2, #5
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	440a      	add	r2, r1
 8010ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ffe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011000:	2300      	movs	r3, #0
}
 8011002:	4618      	mov	r0, r3
 8011004:	3714      	adds	r7, #20
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
	...

08011010 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011010:	b480      	push	{r7}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	785b      	ldrb	r3, [r3, #1]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d161      	bne.n	80110f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	015a      	lsls	r2, r3, #5
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801103e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011042:	d11f      	bne.n	8011084 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	015a      	lsls	r2, r3, #5
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	4413      	add	r3, r2
 801104c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	0151      	lsls	r1, r2, #5
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	440a      	add	r2, r1
 801105a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801105e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011062:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	015a      	lsls	r2, r3, #5
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	4413      	add	r3, r2
 801106c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	68ba      	ldr	r2, [r7, #8]
 8011074:	0151      	lsls	r1, r2, #5
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	440a      	add	r2, r1
 801107a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801107e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801108a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	f003 030f 	and.w	r3, r3, #15
 8011094:	2101      	movs	r1, #1
 8011096:	fa01 f303 	lsl.w	r3, r1, r3
 801109a:	b29b      	uxth	r3, r3
 801109c:	43db      	mvns	r3, r3
 801109e:	68f9      	ldr	r1, [r7, #12]
 80110a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110a4:	4013      	ands	r3, r2
 80110a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ae:	69da      	ldr	r2, [r3, #28]
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	f003 030f 	and.w	r3, r3, #15
 80110b8:	2101      	movs	r1, #1
 80110ba:	fa01 f303 	lsl.w	r3, r1, r3
 80110be:	b29b      	uxth	r3, r3
 80110c0:	43db      	mvns	r3, r3
 80110c2:	68f9      	ldr	r1, [r7, #12]
 80110c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110c8:	4013      	ands	r3, r2
 80110ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	015a      	lsls	r2, r3, #5
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	4413      	add	r3, r2
 80110d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	0159      	lsls	r1, r3, #5
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	440b      	add	r3, r1
 80110e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110e6:	4619      	mov	r1, r3
 80110e8:	4b35      	ldr	r3, [pc, #212]	; (80111c0 <USB_DeactivateEndpoint+0x1b0>)
 80110ea:	4013      	ands	r3, r2
 80110ec:	600b      	str	r3, [r1, #0]
 80110ee:	e060      	b.n	80111b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	015a      	lsls	r2, r3, #5
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	4413      	add	r3, r2
 80110f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011106:	d11f      	bne.n	8011148 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	015a      	lsls	r2, r3, #5
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4413      	add	r3, r2
 8011110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68ba      	ldr	r2, [r7, #8]
 8011118:	0151      	lsls	r1, r2, #5
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	440a      	add	r2, r1
 801111e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011126:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	015a      	lsls	r2, r3, #5
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	4413      	add	r3, r2
 8011130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68ba      	ldr	r2, [r7, #8]
 8011138:	0151      	lsls	r1, r2, #5
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	440a      	add	r2, r1
 801113e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801114e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	f003 030f 	and.w	r3, r3, #15
 8011158:	2101      	movs	r1, #1
 801115a:	fa01 f303 	lsl.w	r3, r1, r3
 801115e:	041b      	lsls	r3, r3, #16
 8011160:	43db      	mvns	r3, r3
 8011162:	68f9      	ldr	r1, [r7, #12]
 8011164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011168:	4013      	ands	r3, r2
 801116a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011172:	69da      	ldr	r2, [r3, #28]
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	f003 030f 	and.w	r3, r3, #15
 801117c:	2101      	movs	r1, #1
 801117e:	fa01 f303 	lsl.w	r3, r1, r3
 8011182:	041b      	lsls	r3, r3, #16
 8011184:	43db      	mvns	r3, r3
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801118c:	4013      	ands	r3, r2
 801118e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	015a      	lsls	r2, r3, #5
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	4413      	add	r3, r2
 8011198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	0159      	lsls	r1, r3, #5
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	440b      	add	r3, r1
 80111a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111aa:	4619      	mov	r1, r3
 80111ac:	4b05      	ldr	r3, [pc, #20]	; (80111c4 <USB_DeactivateEndpoint+0x1b4>)
 80111ae:	4013      	ands	r3, r2
 80111b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3714      	adds	r7, #20
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr
 80111c0:	ec337800 	.word	0xec337800
 80111c4:	eff37800 	.word	0xeff37800

080111c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b08a      	sub	sp, #40	; 0x28
 80111cc:	af02      	add	r7, sp, #8
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	4613      	mov	r3, r2
 80111d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	785b      	ldrb	r3, [r3, #1]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	f040 815c 	bne.w	80114a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	695b      	ldr	r3, [r3, #20]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d132      	bne.n	8011258 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	015a      	lsls	r2, r3, #5
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	4413      	add	r3, r2
 80111fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111fe:	691b      	ldr	r3, [r3, #16]
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	0151      	lsls	r1, r2, #5
 8011204:	69fa      	ldr	r2, [r7, #28]
 8011206:	440a      	add	r2, r1
 8011208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801120c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	015a      	lsls	r2, r3, #5
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	4413      	add	r3, r2
 801121e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011222:	691b      	ldr	r3, [r3, #16]
 8011224:	69ba      	ldr	r2, [r7, #24]
 8011226:	0151      	lsls	r1, r2, #5
 8011228:	69fa      	ldr	r2, [r7, #28]
 801122a:	440a      	add	r2, r1
 801122c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	015a      	lsls	r2, r3, #5
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	4413      	add	r3, r2
 801123e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011242:	691b      	ldr	r3, [r3, #16]
 8011244:	69ba      	ldr	r2, [r7, #24]
 8011246:	0151      	lsls	r1, r2, #5
 8011248:	69fa      	ldr	r2, [r7, #28]
 801124a:	440a      	add	r2, r1
 801124c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011250:	0cdb      	lsrs	r3, r3, #19
 8011252:	04db      	lsls	r3, r3, #19
 8011254:	6113      	str	r3, [r2, #16]
 8011256:	e074      	b.n	8011342 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	015a      	lsls	r2, r3, #5
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	4413      	add	r3, r2
 8011260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011264:	691b      	ldr	r3, [r3, #16]
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	0151      	lsls	r1, r2, #5
 801126a:	69fa      	ldr	r2, [r7, #28]
 801126c:	440a      	add	r2, r1
 801126e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011272:	0cdb      	lsrs	r3, r3, #19
 8011274:	04db      	lsls	r3, r3, #19
 8011276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	015a      	lsls	r2, r3, #5
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	4413      	add	r3, r2
 8011280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	69ba      	ldr	r2, [r7, #24]
 8011288:	0151      	lsls	r1, r2, #5
 801128a:	69fa      	ldr	r2, [r7, #28]
 801128c:	440a      	add	r2, r1
 801128e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801129a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	015a      	lsls	r2, r3, #5
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	4413      	add	r3, r2
 80112a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	6959      	ldr	r1, [r3, #20]
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	440b      	add	r3, r1
 80112b4:	1e59      	subs	r1, r3, #1
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80112be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80112c0:	4b9d      	ldr	r3, [pc, #628]	; (8011538 <USB_EPStartXfer+0x370>)
 80112c2:	400b      	ands	r3, r1
 80112c4:	69b9      	ldr	r1, [r7, #24]
 80112c6:	0148      	lsls	r0, r1, #5
 80112c8:	69f9      	ldr	r1, [r7, #28]
 80112ca:	4401      	add	r1, r0
 80112cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80112d0:	4313      	orrs	r3, r2
 80112d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	015a      	lsls	r2, r3, #5
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	4413      	add	r3, r2
 80112dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112e0:	691a      	ldr	r2, [r3, #16]
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80112ea:	69b9      	ldr	r1, [r7, #24]
 80112ec:	0148      	lsls	r0, r1, #5
 80112ee:	69f9      	ldr	r1, [r7, #28]
 80112f0:	4401      	add	r1, r0
 80112f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80112f6:	4313      	orrs	r3, r2
 80112f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	78db      	ldrb	r3, [r3, #3]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d11f      	bne.n	8011342 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	015a      	lsls	r2, r3, #5
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	4413      	add	r3, r2
 801130a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801130e:	691b      	ldr	r3, [r3, #16]
 8011310:	69ba      	ldr	r2, [r7, #24]
 8011312:	0151      	lsls	r1, r2, #5
 8011314:	69fa      	ldr	r2, [r7, #28]
 8011316:	440a      	add	r2, r1
 8011318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801131c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011320:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	015a      	lsls	r2, r3, #5
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	4413      	add	r3, r2
 801132a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	69ba      	ldr	r2, [r7, #24]
 8011332:	0151      	lsls	r1, r2, #5
 8011334:	69fa      	ldr	r2, [r7, #28]
 8011336:	440a      	add	r2, r1
 8011338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801133c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011340:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011342:	79fb      	ldrb	r3, [r7, #7]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d14b      	bne.n	80113e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	691b      	ldr	r3, [r3, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	015a      	lsls	r2, r3, #5
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	4413      	add	r3, r2
 8011358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801135c:	461a      	mov	r2, r3
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	691b      	ldr	r3, [r3, #16]
 8011362:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	78db      	ldrb	r3, [r3, #3]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d128      	bne.n	80113be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011378:	2b00      	cmp	r3, #0
 801137a:	d110      	bne.n	801139e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	015a      	lsls	r2, r3, #5
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	4413      	add	r3, r2
 8011384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	69ba      	ldr	r2, [r7, #24]
 801138c:	0151      	lsls	r1, r2, #5
 801138e:	69fa      	ldr	r2, [r7, #28]
 8011390:	440a      	add	r2, r1
 8011392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801139a:	6013      	str	r3, [r2, #0]
 801139c:	e00f      	b.n	80113be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801139e:	69bb      	ldr	r3, [r7, #24]
 80113a0:	015a      	lsls	r2, r3, #5
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	4413      	add	r3, r2
 80113a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	69ba      	ldr	r2, [r7, #24]
 80113ae:	0151      	lsls	r1, r2, #5
 80113b0:	69fa      	ldr	r2, [r7, #28]
 80113b2:	440a      	add	r2, r1
 80113b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80113bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	015a      	lsls	r2, r3, #5
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	4413      	add	r3, r2
 80113c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	69ba      	ldr	r2, [r7, #24]
 80113ce:	0151      	lsls	r1, r2, #5
 80113d0:	69fa      	ldr	r2, [r7, #28]
 80113d2:	440a      	add	r2, r1
 80113d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113dc:	6013      	str	r3, [r2, #0]
 80113de:	e12f      	b.n	8011640 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	015a      	lsls	r2, r3, #5
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	4413      	add	r3, r2
 80113e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	69ba      	ldr	r2, [r7, #24]
 80113f0:	0151      	lsls	r1, r2, #5
 80113f2:	69fa      	ldr	r2, [r7, #28]
 80113f4:	440a      	add	r2, r1
 80113f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	78db      	ldrb	r3, [r3, #3]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d015      	beq.n	8011434 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	695b      	ldr	r3, [r3, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	f000 8117 	beq.w	8011640 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	f003 030f 	and.w	r3, r3, #15
 8011422:	2101      	movs	r1, #1
 8011424:	fa01 f303 	lsl.w	r3, r1, r3
 8011428:	69f9      	ldr	r1, [r7, #28]
 801142a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801142e:	4313      	orrs	r3, r2
 8011430:	634b      	str	r3, [r1, #52]	; 0x34
 8011432:	e105      	b.n	8011640 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011440:	2b00      	cmp	r3, #0
 8011442:	d110      	bne.n	8011466 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	015a      	lsls	r2, r3, #5
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	4413      	add	r3, r2
 801144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	69ba      	ldr	r2, [r7, #24]
 8011454:	0151      	lsls	r1, r2, #5
 8011456:	69fa      	ldr	r2, [r7, #28]
 8011458:	440a      	add	r2, r1
 801145a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801145e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011462:	6013      	str	r3, [r2, #0]
 8011464:	e00f      	b.n	8011486 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	015a      	lsls	r2, r3, #5
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	4413      	add	r3, r2
 801146e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	69ba      	ldr	r2, [r7, #24]
 8011476:	0151      	lsls	r1, r2, #5
 8011478:	69fa      	ldr	r2, [r7, #28]
 801147a:	440a      	add	r2, r1
 801147c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011484:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	68d9      	ldr	r1, [r3, #12]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	781a      	ldrb	r2, [r3, #0]
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	b298      	uxth	r0, r3
 8011494:	79fb      	ldrb	r3, [r7, #7]
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	4603      	mov	r3, r0
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f000 fa2b 	bl	80118f6 <USB_WritePacket>
 80114a0:	e0ce      	b.n	8011640 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	015a      	lsls	r2, r3, #5
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	69ba      	ldr	r2, [r7, #24]
 80114b2:	0151      	lsls	r1, r2, #5
 80114b4:	69fa      	ldr	r2, [r7, #28]
 80114b6:	440a      	add	r2, r1
 80114b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114bc:	0cdb      	lsrs	r3, r3, #19
 80114be:	04db      	lsls	r3, r3, #19
 80114c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	015a      	lsls	r2, r3, #5
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	4413      	add	r3, r2
 80114ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	69ba      	ldr	r2, [r7, #24]
 80114d2:	0151      	lsls	r1, r2, #5
 80114d4:	69fa      	ldr	r2, [r7, #28]
 80114d6:	440a      	add	r2, r1
 80114d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d126      	bne.n	801153c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114fa:	691a      	ldr	r2, [r3, #16]
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011504:	69b9      	ldr	r1, [r7, #24]
 8011506:	0148      	lsls	r0, r1, #5
 8011508:	69f9      	ldr	r1, [r7, #28]
 801150a:	4401      	add	r1, r0
 801150c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011510:	4313      	orrs	r3, r2
 8011512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	015a      	lsls	r2, r3, #5
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	4413      	add	r3, r2
 801151c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	69ba      	ldr	r2, [r7, #24]
 8011524:	0151      	lsls	r1, r2, #5
 8011526:	69fa      	ldr	r2, [r7, #28]
 8011528:	440a      	add	r2, r1
 801152a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801152e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011532:	6113      	str	r3, [r2, #16]
 8011534:	e036      	b.n	80115a4 <USB_EPStartXfer+0x3dc>
 8011536:	bf00      	nop
 8011538:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	695a      	ldr	r2, [r3, #20]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	4413      	add	r3, r2
 8011546:	1e5a      	subs	r2, r3, #1
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011550:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	015a      	lsls	r2, r3, #5
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	4413      	add	r3, r2
 801155a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801155e:	691a      	ldr	r2, [r3, #16]
 8011560:	8afb      	ldrh	r3, [r7, #22]
 8011562:	04d9      	lsls	r1, r3, #19
 8011564:	4b39      	ldr	r3, [pc, #228]	; (801164c <USB_EPStartXfer+0x484>)
 8011566:	400b      	ands	r3, r1
 8011568:	69b9      	ldr	r1, [r7, #24]
 801156a:	0148      	lsls	r0, r1, #5
 801156c:	69f9      	ldr	r1, [r7, #28]
 801156e:	4401      	add	r1, r0
 8011570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011574:	4313      	orrs	r3, r2
 8011576:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	015a      	lsls	r2, r3, #5
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	4413      	add	r3, r2
 8011580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011584:	691a      	ldr	r2, [r3, #16]
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	8af9      	ldrh	r1, [r7, #22]
 801158c:	fb01 f303 	mul.w	r3, r1, r3
 8011590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011594:	69b9      	ldr	r1, [r7, #24]
 8011596:	0148      	lsls	r0, r1, #5
 8011598:	69f9      	ldr	r1, [r7, #28]
 801159a:	4401      	add	r1, r0
 801159c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80115a0:	4313      	orrs	r3, r2
 80115a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d10d      	bne.n	80115c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d009      	beq.n	80115c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	68d9      	ldr	r1, [r3, #12]
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	015a      	lsls	r2, r3, #5
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	4413      	add	r3, r2
 80115be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115c2:	460a      	mov	r2, r1
 80115c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	78db      	ldrb	r3, [r3, #3]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d128      	bne.n	8011620 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115d4:	689b      	ldr	r3, [r3, #8]
 80115d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d110      	bne.n	8011600 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	015a      	lsls	r2, r3, #5
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	4413      	add	r3, r2
 80115e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	69ba      	ldr	r2, [r7, #24]
 80115ee:	0151      	lsls	r1, r2, #5
 80115f0:	69fa      	ldr	r2, [r7, #28]
 80115f2:	440a      	add	r2, r1
 80115f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	e00f      	b.n	8011620 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	015a      	lsls	r2, r3, #5
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	4413      	add	r3, r2
 8011608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	69ba      	ldr	r2, [r7, #24]
 8011610:	0151      	lsls	r1, r2, #5
 8011612:	69fa      	ldr	r2, [r7, #28]
 8011614:	440a      	add	r2, r1
 8011616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801161e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	015a      	lsls	r2, r3, #5
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	4413      	add	r3, r2
 8011628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	69ba      	ldr	r2, [r7, #24]
 8011630:	0151      	lsls	r1, r2, #5
 8011632:	69fa      	ldr	r2, [r7, #28]
 8011634:	440a      	add	r2, r1
 8011636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801163a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801163e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011640:	2300      	movs	r3, #0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3720      	adds	r7, #32
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	1ff80000 	.word	0x1ff80000

08011650 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011650:	b480      	push	{r7}
 8011652:	b087      	sub	sp, #28
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	4613      	mov	r3, r2
 801165c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	785b      	ldrb	r3, [r3, #1]
 801166c:	2b01      	cmp	r3, #1
 801166e:	f040 80cd 	bne.w	801180c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	695b      	ldr	r3, [r3, #20]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d132      	bne.n	80116e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	4413      	add	r3, r2
 8011682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	693a      	ldr	r2, [r7, #16]
 801168a:	0151      	lsls	r1, r2, #5
 801168c:	697a      	ldr	r2, [r7, #20]
 801168e:	440a      	add	r2, r1
 8011690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801169c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	015a      	lsls	r2, r3, #5
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	4413      	add	r3, r2
 80116a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116aa:	691b      	ldr	r3, [r3, #16]
 80116ac:	693a      	ldr	r2, [r7, #16]
 80116ae:	0151      	lsls	r1, r2, #5
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	440a      	add	r2, r1
 80116b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	0151      	lsls	r1, r2, #5
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	440a      	add	r2, r1
 80116d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116d8:	0cdb      	lsrs	r3, r3, #19
 80116da:	04db      	lsls	r3, r3, #19
 80116dc:	6113      	str	r3, [r2, #16]
 80116de:	e04e      	b.n	801177e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	015a      	lsls	r2, r3, #5
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	4413      	add	r3, r2
 80116e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	0151      	lsls	r1, r2, #5
 80116f2:	697a      	ldr	r2, [r7, #20]
 80116f4:	440a      	add	r2, r1
 80116f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116fa:	0cdb      	lsrs	r3, r3, #19
 80116fc:	04db      	lsls	r3, r3, #19
 80116fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	015a      	lsls	r2, r3, #5
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	4413      	add	r3, r2
 8011708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	693a      	ldr	r2, [r7, #16]
 8011710:	0151      	lsls	r1, r2, #5
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	440a      	add	r2, r1
 8011716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801171a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801171e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011722:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	695a      	ldr	r2, [r3, #20]
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	429a      	cmp	r2, r3
 801172e:	d903      	bls.n	8011738 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	689a      	ldr	r2, [r3, #8]
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	015a      	lsls	r2, r3, #5
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	4413      	add	r3, r2
 8011740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	693a      	ldr	r2, [r7, #16]
 8011748:	0151      	lsls	r1, r2, #5
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	440a      	add	r2, r1
 801174e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	015a      	lsls	r2, r3, #5
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	4413      	add	r3, r2
 8011760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011764:	691a      	ldr	r2, [r3, #16]
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	695b      	ldr	r3, [r3, #20]
 801176a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801176e:	6939      	ldr	r1, [r7, #16]
 8011770:	0148      	lsls	r0, r1, #5
 8011772:	6979      	ldr	r1, [r7, #20]
 8011774:	4401      	add	r1, r0
 8011776:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801177a:	4313      	orrs	r3, r2
 801177c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801177e:	79fb      	ldrb	r3, [r7, #7]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d11e      	bne.n	80117c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	691b      	ldr	r3, [r3, #16]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d009      	beq.n	80117a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	015a      	lsls	r2, r3, #5
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	4413      	add	r3, r2
 8011794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011798:	461a      	mov	r2, r3
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	015a      	lsls	r2, r3, #5
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	4413      	add	r3, r2
 80117a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	693a      	ldr	r2, [r7, #16]
 80117b0:	0151      	lsls	r1, r2, #5
 80117b2:	697a      	ldr	r2, [r7, #20]
 80117b4:	440a      	add	r2, r1
 80117b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80117be:	6013      	str	r3, [r2, #0]
 80117c0:	e092      	b.n	80118e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	015a      	lsls	r2, r3, #5
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	4413      	add	r3, r2
 80117ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	0151      	lsls	r1, r2, #5
 80117d4:	697a      	ldr	r2, [r7, #20]
 80117d6:	440a      	add	r2, r1
 80117d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80117e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d07e      	beq.n	80118e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	f003 030f 	and.w	r3, r3, #15
 80117fa:	2101      	movs	r1, #1
 80117fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011800:	6979      	ldr	r1, [r7, #20]
 8011802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011806:	4313      	orrs	r3, r2
 8011808:	634b      	str	r3, [r1, #52]	; 0x34
 801180a:	e06d      	b.n	80118e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	015a      	lsls	r2, r3, #5
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	4413      	add	r3, r2
 8011814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	693a      	ldr	r2, [r7, #16]
 801181c:	0151      	lsls	r1, r2, #5
 801181e:	697a      	ldr	r2, [r7, #20]
 8011820:	440a      	add	r2, r1
 8011822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011826:	0cdb      	lsrs	r3, r3, #19
 8011828:	04db      	lsls	r3, r3, #19
 801182a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	4413      	add	r3, r2
 8011834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011838:	691b      	ldr	r3, [r3, #16]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	0151      	lsls	r1, r2, #5
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	440a      	add	r2, r1
 8011842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011846:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801184a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801184e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	695b      	ldr	r3, [r3, #20]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d003      	beq.n	8011860 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	689a      	ldr	r2, [r3, #8]
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	015a      	lsls	r2, r3, #5
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	4413      	add	r3, r2
 8011868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801186c:	691b      	ldr	r3, [r3, #16]
 801186e:	693a      	ldr	r2, [r7, #16]
 8011870:	0151      	lsls	r1, r2, #5
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	440a      	add	r2, r1
 8011876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801187a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801187e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	015a      	lsls	r2, r3, #5
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	4413      	add	r3, r2
 8011888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801188c:	691a      	ldr	r2, [r3, #16]
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011896:	6939      	ldr	r1, [r7, #16]
 8011898:	0148      	lsls	r0, r1, #5
 801189a:	6979      	ldr	r1, [r7, #20]
 801189c:	4401      	add	r1, r0
 801189e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80118a2:	4313      	orrs	r3, r2
 80118a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80118a6:	79fb      	ldrb	r3, [r7, #7]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d10d      	bne.n	80118c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d009      	beq.n	80118c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	68d9      	ldr	r1, [r3, #12]
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	015a      	lsls	r2, r3, #5
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	4413      	add	r3, r2
 80118c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118c4:	460a      	mov	r2, r1
 80118c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	697a      	ldr	r2, [r7, #20]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80118e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80118e8:	2300      	movs	r3, #0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	371c      	adds	r7, #28
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr

080118f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80118f6:	b480      	push	{r7}
 80118f8:	b089      	sub	sp, #36	; 0x24
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	60f8      	str	r0, [r7, #12]
 80118fe:	60b9      	str	r1, [r7, #8]
 8011900:	4611      	mov	r1, r2
 8011902:	461a      	mov	r2, r3
 8011904:	460b      	mov	r3, r1
 8011906:	71fb      	strb	r3, [r7, #7]
 8011908:	4613      	mov	r3, r2
 801190a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011918:	2b00      	cmp	r3, #0
 801191a:	d123      	bne.n	8011964 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801191c:	88bb      	ldrh	r3, [r7, #4]
 801191e:	3303      	adds	r3, #3
 8011920:	089b      	lsrs	r3, r3, #2
 8011922:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011924:	2300      	movs	r3, #0
 8011926:	61bb      	str	r3, [r7, #24]
 8011928:	e018      	b.n	801195c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801192a:	79fb      	ldrb	r3, [r7, #7]
 801192c:	031a      	lsls	r2, r3, #12
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	4413      	add	r3, r2
 8011932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011936:	461a      	mov	r2, r3
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	3301      	adds	r3, #1
 8011942:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	3301      	adds	r3, #1
 8011948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	3301      	adds	r3, #1
 801194e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	3301      	adds	r3, #1
 8011954:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	3301      	adds	r3, #1
 801195a:	61bb      	str	r3, [r7, #24]
 801195c:	69ba      	ldr	r2, [r7, #24]
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	429a      	cmp	r2, r3
 8011962:	d3e2      	bcc.n	801192a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	3724      	adds	r7, #36	; 0x24
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011972:	b480      	push	{r7}
 8011974:	b08b      	sub	sp, #44	; 0x2c
 8011976:	af00      	add	r7, sp, #0
 8011978:	60f8      	str	r0, [r7, #12]
 801197a:	60b9      	str	r1, [r7, #8]
 801197c:	4613      	mov	r3, r2
 801197e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011988:	88fb      	ldrh	r3, [r7, #6]
 801198a:	089b      	lsrs	r3, r3, #2
 801198c:	b29b      	uxth	r3, r3
 801198e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011990:	88fb      	ldrh	r3, [r7, #6]
 8011992:	f003 0303 	and.w	r3, r3, #3
 8011996:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011998:	2300      	movs	r3, #0
 801199a:	623b      	str	r3, [r7, #32]
 801199c:	e014      	b.n	80119c8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	3301      	adds	r3, #1
 80119ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	3301      	adds	r3, #1
 80119b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	3301      	adds	r3, #1
 80119ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119be:	3301      	adds	r3, #1
 80119c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80119c2:	6a3b      	ldr	r3, [r7, #32]
 80119c4:	3301      	adds	r3, #1
 80119c6:	623b      	str	r3, [r7, #32]
 80119c8:	6a3a      	ldr	r2, [r7, #32]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d3e6      	bcc.n	801199e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80119d0:	8bfb      	ldrh	r3, [r7, #30]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d01e      	beq.n	8011a14 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80119d6:	2300      	movs	r3, #0
 80119d8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119e0:	461a      	mov	r2, r3
 80119e2:	f107 0310 	add.w	r3, r7, #16
 80119e6:	6812      	ldr	r2, [r2, #0]
 80119e8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80119ea:	693a      	ldr	r2, [r7, #16]
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	00db      	lsls	r3, r3, #3
 80119f2:	fa22 f303 	lsr.w	r3, r2, r3
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fa:	701a      	strb	r2, [r3, #0]
      i++;
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	3301      	adds	r3, #1
 8011a00:	623b      	str	r3, [r7, #32]
      pDest++;
 8011a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a04:	3301      	adds	r3, #1
 8011a06:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011a08:	8bfb      	ldrh	r3, [r7, #30]
 8011a0a:	3b01      	subs	r3, #1
 8011a0c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011a0e:	8bfb      	ldrh	r3, [r7, #30]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1ea      	bne.n	80119ea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	372c      	adds	r7, #44	; 0x2c
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011a22:	b480      	push	{r7}
 8011a24:	b085      	sub	sp, #20
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	785b      	ldrb	r3, [r3, #1]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d12c      	bne.n	8011a98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	015a      	lsls	r2, r3, #5
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	4413      	add	r3, r2
 8011a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	db12      	blt.n	8011a76 <USB_EPSetStall+0x54>
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00f      	beq.n	8011a76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	015a      	lsls	r2, r3, #5
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68ba      	ldr	r2, [r7, #8]
 8011a66:	0151      	lsls	r1, r2, #5
 8011a68:	68fa      	ldr	r2, [r7, #12]
 8011a6a:	440a      	add	r2, r1
 8011a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011a74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	015a      	lsls	r2, r3, #5
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	0151      	lsls	r1, r2, #5
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	440a      	add	r2, r1
 8011a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011a94:	6013      	str	r3, [r2, #0]
 8011a96:	e02b      	b.n	8011af0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	015a      	lsls	r2, r3, #5
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	db12      	blt.n	8011ad0 <USB_EPSetStall+0xae>
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00f      	beq.n	8011ad0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	015a      	lsls	r2, r3, #5
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	0151      	lsls	r1, r2, #5
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	440a      	add	r2, r1
 8011ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ace:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	015a      	lsls	r2, r3, #5
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	4413      	add	r3, r2
 8011ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	0151      	lsls	r1, r2, #5
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	440a      	add	r2, r1
 8011ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3714      	adds	r7, #20
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr

08011afe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011afe:	b480      	push	{r7}
 8011b00:	b085      	sub	sp, #20
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
 8011b06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	785b      	ldrb	r3, [r3, #1]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d128      	bne.n	8011b6c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	015a      	lsls	r2, r3, #5
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	4413      	add	r3, r2
 8011b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	0151      	lsls	r1, r2, #5
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	440a      	add	r2, r1
 8011b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	78db      	ldrb	r3, [r3, #3]
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d003      	beq.n	8011b4a <USB_EPClearStall+0x4c>
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	78db      	ldrb	r3, [r3, #3]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d138      	bne.n	8011bbc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	015a      	lsls	r2, r3, #5
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	4413      	add	r3, r2
 8011b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	68ba      	ldr	r2, [r7, #8]
 8011b5a:	0151      	lsls	r1, r2, #5
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	440a      	add	r2, r1
 8011b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b68:	6013      	str	r3, [r2, #0]
 8011b6a:	e027      	b.n	8011bbc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	015a      	lsls	r2, r3, #5
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	4413      	add	r3, r2
 8011b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	0151      	lsls	r1, r2, #5
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	440a      	add	r2, r1
 8011b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	78db      	ldrb	r3, [r3, #3]
 8011b90:	2b03      	cmp	r3, #3
 8011b92:	d003      	beq.n	8011b9c <USB_EPClearStall+0x9e>
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	78db      	ldrb	r3, [r3, #3]
 8011b98:	2b02      	cmp	r3, #2
 8011b9a:	d10f      	bne.n	8011bbc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	015a      	lsls	r2, r3, #5
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	0151      	lsls	r1, r2, #5
 8011bae:	68fa      	ldr	r2, [r7, #12]
 8011bb0:	440a      	add	r2, r1
 8011bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr

08011bca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011bca:	b480      	push	{r7}
 8011bcc:	b085      	sub	sp, #20
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011be8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011bec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	78fb      	ldrb	r3, [r7, #3]
 8011bf8:	011b      	lsls	r3, r3, #4
 8011bfa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011bfe:	68f9      	ldr	r1, [r7, #12]
 8011c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c04:	4313      	orrs	r3, r2
 8011c06:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011c16:	b480      	push	{r7}
 8011c18:	b085      	sub	sp, #20
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c30:	f023 0303 	bic.w	r3, r3, #3
 8011c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c44:	f023 0302 	bic.w	r3, r3, #2
 8011c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3714      	adds	r7, #20
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68fa      	ldr	r2, [r7, #12]
 8011c6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c72:	f023 0303 	bic.w	r3, r3, #3
 8011c76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	68fa      	ldr	r2, [r7, #12]
 8011c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c86:	f043 0302 	orr.w	r3, r3, #2
 8011c8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3714      	adds	r7, #20
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b085      	sub	sp, #20
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	695b      	ldr	r3, [r3, #20]
 8011ca6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	4013      	ands	r3, r2
 8011cb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3714      	adds	r7, #20
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b085      	sub	sp, #20
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cd2:	699b      	ldr	r3, [r3, #24]
 8011cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cdc:	69db      	ldr	r3, [r3, #28]
 8011cde:	68ba      	ldr	r2, [r7, #8]
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	0c1b      	lsrs	r3, r3, #16
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d06:	699b      	ldr	r3, [r3, #24]
 8011d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d10:	69db      	ldr	r3, [r3, #28]
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	4013      	ands	r3, r2
 8011d16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	b29b      	uxth	r3, r3
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3714      	adds	r7, #20
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b085      	sub	sp, #20
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011d38:	78fb      	ldrb	r3, [r7, #3]
 8011d3a:	015a      	lsls	r2, r3, #5
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	68ba      	ldr	r2, [r7, #8]
 8011d52:	4013      	ands	r3, r2
 8011d54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011d56:	68bb      	ldr	r3, [r7, #8]
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3714      	adds	r7, #20
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b087      	sub	sp, #28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011d88:	78fb      	ldrb	r3, [r7, #3]
 8011d8a:	f003 030f 	and.w	r3, r3, #15
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	fa22 f303 	lsr.w	r3, r2, r3
 8011d94:	01db      	lsls	r3, r3, #7
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	693a      	ldr	r2, [r7, #16]
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011d9e:	78fb      	ldrb	r3, [r7, #3]
 8011da0:	015a      	lsls	r2, r3, #5
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	4413      	add	r3, r2
 8011da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	693a      	ldr	r2, [r7, #16]
 8011dae:	4013      	ands	r3, r2
 8011db0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011db2:	68bb      	ldr	r3, [r7, #8]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	371c      	adds	r7, #28
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	695b      	ldr	r3, [r3, #20]
 8011dcc:	f003 0301 	and.w	r3, r3, #1
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr

08011ddc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011df6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011dfa:	f023 0307 	bic.w	r3, r3, #7
 8011dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	68fa      	ldr	r2, [r7, #12]
 8011e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011e14:	2300      	movs	r3, #0
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3714      	adds	r7, #20
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr
	...

08011e24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b087      	sub	sp, #28
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	607a      	str	r2, [r7, #4]
 8011e30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	333c      	adds	r3, #60	; 0x3c
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	4a26      	ldr	r2, [pc, #152]	; (8011edc <USB_EP0_OutStart+0xb8>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d90a      	bls.n	8011e5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e58:	d101      	bne.n	8011e5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	e037      	b.n	8011ece <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e64:	461a      	mov	r2, r3
 8011e66:	2300      	movs	r3, #0
 8011e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e70:	691b      	ldr	r3, [r3, #16]
 8011e72:	697a      	ldr	r2, [r7, #20]
 8011e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	697a      	ldr	r2, [r7, #20]
 8011e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e8c:	f043 0318 	orr.w	r3, r3, #24
 8011e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	697a      	ldr	r2, [r7, #20]
 8011e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ea0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011ea4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011ea6:	7afb      	ldrb	r3, [r7, #11]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d10f      	bne.n	8011ecc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	697a      	ldr	r2, [r7, #20]
 8011ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ec6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011eca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	371c      	adds	r7, #28
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	4f54300a 	.word	0x4f54300a

08011ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	60fb      	str	r3, [r7, #12]
 8011ef2:	4a13      	ldr	r2, [pc, #76]	; (8011f40 <USB_CoreReset+0x60>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d901      	bls.n	8011efc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8011ef8:	2303      	movs	r3, #3
 8011efa:	e01a      	b.n	8011f32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	691b      	ldr	r3, [r3, #16]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	daf3      	bge.n	8011eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	f043 0201 	orr.w	r2, r3, #1
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	3301      	adds	r3, #1
 8011f18:	60fb      	str	r3, [r7, #12]
 8011f1a:	4a09      	ldr	r2, [pc, #36]	; (8011f40 <USB_CoreReset+0x60>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d901      	bls.n	8011f24 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8011f20:	2303      	movs	r3, #3
 8011f22:	e006      	b.n	8011f32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	f003 0301 	and.w	r3, r3, #1
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d0f1      	beq.n	8011f14 <USB_CoreReset+0x34>

  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	00030d40 	.word	0x00030d40

08011f44 <__NVIC_SetPriority>:
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	6039      	str	r1, [r7, #0]
 8011f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	db0a      	blt.n	8011f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	b2da      	uxtb	r2, r3
 8011f5c:	490c      	ldr	r1, [pc, #48]	; (8011f90 <__NVIC_SetPriority+0x4c>)
 8011f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f62:	0112      	lsls	r2, r2, #4
 8011f64:	b2d2      	uxtb	r2, r2
 8011f66:	440b      	add	r3, r1
 8011f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011f6c:	e00a      	b.n	8011f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	4908      	ldr	r1, [pc, #32]	; (8011f94 <__NVIC_SetPriority+0x50>)
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	f003 030f 	and.w	r3, r3, #15
 8011f7a:	3b04      	subs	r3, #4
 8011f7c:	0112      	lsls	r2, r2, #4
 8011f7e:	b2d2      	uxtb	r2, r2
 8011f80:	440b      	add	r3, r1
 8011f82:	761a      	strb	r2, [r3, #24]
}
 8011f84:	bf00      	nop
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	e000e100 	.word	0xe000e100
 8011f94:	e000ed00 	.word	0xe000ed00

08011f98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011f9c:	4b05      	ldr	r3, [pc, #20]	; (8011fb4 <SysTick_Handler+0x1c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011fa0:	f002 f95e 	bl	8014260 <xTaskGetSchedulerState>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d001      	beq.n	8011fae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011faa:	f000 fd95 	bl	8012ad8 <xPortSysTickHandler>
  }
}
 8011fae:	bf00      	nop
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	e000e010 	.word	0xe000e010

08011fb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	f06f 0004 	mvn.w	r0, #4
 8011fc2:	f7ff ffbf 	bl	8011f44 <__NVIC_SetPriority>
#endif
}
 8011fc6:	bf00      	nop
 8011fc8:	bd80      	pop	{r7, pc}
	...

08011fcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fd2:	f3ef 8305 	mrs	r3, IPSR
 8011fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8011fd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d003      	beq.n	8011fe6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011fde:	f06f 0305 	mvn.w	r3, #5
 8011fe2:	607b      	str	r3, [r7, #4]
 8011fe4:	e00c      	b.n	8012000 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011fe6:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <osKernelInitialize+0x44>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d105      	bne.n	8011ffa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011fee:	4b08      	ldr	r3, [pc, #32]	; (8012010 <osKernelInitialize+0x44>)
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	607b      	str	r3, [r7, #4]
 8011ff8:	e002      	b.n	8012000 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8011ffe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012000:	687b      	ldr	r3, [r7, #4]
}
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	20000324 	.word	0x20000324

08012014 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012014:	b580      	push	{r7, lr}
 8012016:	b082      	sub	sp, #8
 8012018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801201a:	f3ef 8305 	mrs	r3, IPSR
 801201e:	603b      	str	r3, [r7, #0]
  return(result);
 8012020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012022:	2b00      	cmp	r3, #0
 8012024:	d003      	beq.n	801202e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012026:	f06f 0305 	mvn.w	r3, #5
 801202a:	607b      	str	r3, [r7, #4]
 801202c:	e010      	b.n	8012050 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801202e:	4b0b      	ldr	r3, [pc, #44]	; (801205c <osKernelStart+0x48>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b01      	cmp	r3, #1
 8012034:	d109      	bne.n	801204a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012036:	f7ff ffbf 	bl	8011fb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801203a:	4b08      	ldr	r3, [pc, #32]	; (801205c <osKernelStart+0x48>)
 801203c:	2202      	movs	r2, #2
 801203e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012040:	f001 fcb2 	bl	80139a8 <vTaskStartScheduler>
      stat = osOK;
 8012044:	2300      	movs	r3, #0
 8012046:	607b      	str	r3, [r7, #4]
 8012048:	e002      	b.n	8012050 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801204a:	f04f 33ff 	mov.w	r3, #4294967295
 801204e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012050:	687b      	ldr	r3, [r7, #4]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3708      	adds	r7, #8
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	20000324 	.word	0x20000324

08012060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012060:	b580      	push	{r7, lr}
 8012062:	b08e      	sub	sp, #56	; 0x38
 8012064:	af04      	add	r7, sp, #16
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801206c:	2300      	movs	r3, #0
 801206e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012070:	f3ef 8305 	mrs	r3, IPSR
 8012074:	617b      	str	r3, [r7, #20]
  return(result);
 8012076:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012078:	2b00      	cmp	r3, #0
 801207a:	d17e      	bne.n	801217a <osThreadNew+0x11a>
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d07b      	beq.n	801217a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012082:	2380      	movs	r3, #128	; 0x80
 8012084:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012086:	2318      	movs	r3, #24
 8012088:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801208a:	2300      	movs	r3, #0
 801208c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801208e:	f04f 33ff 	mov.w	r3, #4294967295
 8012092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d045      	beq.n	8012126 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d002      	beq.n	80120a8 <osThreadNew+0x48>
        name = attr->name;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	699b      	ldr	r3, [r3, #24]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d002      	beq.n	80120b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d008      	beq.n	80120ce <osThreadNew+0x6e>
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	2b38      	cmp	r3, #56	; 0x38
 80120c0:	d805      	bhi.n	80120ce <osThreadNew+0x6e>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	f003 0301 	and.w	r3, r3, #1
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d001      	beq.n	80120d2 <osThreadNew+0x72>
        return (NULL);
 80120ce:	2300      	movs	r3, #0
 80120d0:	e054      	b.n	801217c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	695b      	ldr	r3, [r3, #20]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d003      	beq.n	80120e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	695b      	ldr	r3, [r3, #20]
 80120de:	089b      	lsrs	r3, r3, #2
 80120e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d00e      	beq.n	8012108 <osThreadNew+0xa8>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	2bbb      	cmp	r3, #187	; 0xbb
 80120f0:	d90a      	bls.n	8012108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d006      	beq.n	8012108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	695b      	ldr	r3, [r3, #20]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d002      	beq.n	8012108 <osThreadNew+0xa8>
        mem = 1;
 8012102:	2301      	movs	r3, #1
 8012104:	61bb      	str	r3, [r7, #24]
 8012106:	e010      	b.n	801212a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d10c      	bne.n	801212a <osThreadNew+0xca>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	68db      	ldr	r3, [r3, #12]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d108      	bne.n	801212a <osThreadNew+0xca>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	691b      	ldr	r3, [r3, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d104      	bne.n	801212a <osThreadNew+0xca>
          mem = 0;
 8012120:	2300      	movs	r3, #0
 8012122:	61bb      	str	r3, [r7, #24]
 8012124:	e001      	b.n	801212a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d110      	bne.n	8012152 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012138:	9202      	str	r2, [sp, #8]
 801213a:	9301      	str	r3, [sp, #4]
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	6a3a      	ldr	r2, [r7, #32]
 8012144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f001 fa42 	bl	80135d0 <xTaskCreateStatic>
 801214c:	4603      	mov	r3, r0
 801214e:	613b      	str	r3, [r7, #16]
 8012150:	e013      	b.n	801217a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012152:	69bb      	ldr	r3, [r7, #24]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d110      	bne.n	801217a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	b29a      	uxth	r2, r3
 801215c:	f107 0310 	add.w	r3, r7, #16
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f001 fa8d 	bl	801368a <xTaskCreate>
 8012170:	4603      	mov	r3, r0
 8012172:	2b01      	cmp	r3, #1
 8012174:	d001      	beq.n	801217a <osThreadNew+0x11a>
            hTask = NULL;
 8012176:	2300      	movs	r3, #0
 8012178:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801217a:	693b      	ldr	r3, [r7, #16]
}
 801217c:	4618      	mov	r0, r3
 801217e:	3728      	adds	r7, #40	; 0x28
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801218c:	f3ef 8305 	mrs	r3, IPSR
 8012190:	60bb      	str	r3, [r7, #8]
  return(result);
 8012192:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <osDelay+0x1c>
    stat = osErrorISR;
 8012198:	f06f 0305 	mvn.w	r3, #5
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	e007      	b.n	80121b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d002      	beq.n	80121b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f001 fbc8 	bl	8013940 <vTaskDelay>
    }
  }

  return (stat);
 80121b0:	68fb      	ldr	r3, [r7, #12]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3710      	adds	r7, #16
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
	...

080121bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	4a07      	ldr	r2, [pc, #28]	; (80121e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80121cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	4a06      	ldr	r2, [pc, #24]	; (80121ec <vApplicationGetIdleTaskMemory+0x30>)
 80121d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2280      	movs	r2, #128	; 0x80
 80121d8:	601a      	str	r2, [r3, #0]
}
 80121da:	bf00      	nop
 80121dc:	3714      	adds	r7, #20
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	20000328 	.word	0x20000328
 80121ec:	200003e4 	.word	0x200003e4

080121f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80121f0:	b480      	push	{r7}
 80121f2:	b085      	sub	sp, #20
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	4a07      	ldr	r2, [pc, #28]	; (801221c <vApplicationGetTimerTaskMemory+0x2c>)
 8012200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	4a06      	ldr	r2, [pc, #24]	; (8012220 <vApplicationGetTimerTaskMemory+0x30>)
 8012206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801220e:	601a      	str	r2, [r3, #0]
}
 8012210:	bf00      	nop
 8012212:	3714      	adds	r7, #20
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	200005e4 	.word	0x200005e4
 8012220:	200006a0 	.word	0x200006a0

08012224 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b08a      	sub	sp, #40	; 0x28
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801222c:	2300      	movs	r3, #0
 801222e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012230:	f001 fc2a 	bl	8013a88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012234:	4b5b      	ldr	r3, [pc, #364]	; (80123a4 <pvPortMalloc+0x180>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d101      	bne.n	8012240 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801223c:	f000 f920 	bl	8012480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012240:	4b59      	ldr	r3, [pc, #356]	; (80123a8 <pvPortMalloc+0x184>)
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	4013      	ands	r3, r2
 8012248:	2b00      	cmp	r3, #0
 801224a:	f040 8093 	bne.w	8012374 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d01d      	beq.n	8012290 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012254:	2208      	movs	r2, #8
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4413      	add	r3, r2
 801225a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f003 0307 	and.w	r3, r3, #7
 8012262:	2b00      	cmp	r3, #0
 8012264:	d014      	beq.n	8012290 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f023 0307 	bic.w	r3, r3, #7
 801226c:	3308      	adds	r3, #8
 801226e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f003 0307 	and.w	r3, r3, #7
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801228c:	bf00      	nop
 801228e:	e7fe      	b.n	801228e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d06e      	beq.n	8012374 <pvPortMalloc+0x150>
 8012296:	4b45      	ldr	r3, [pc, #276]	; (80123ac <pvPortMalloc+0x188>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	429a      	cmp	r2, r3
 801229e:	d869      	bhi.n	8012374 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122a0:	4b43      	ldr	r3, [pc, #268]	; (80123b0 <pvPortMalloc+0x18c>)
 80122a2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122a4:	4b42      	ldr	r3, [pc, #264]	; (80123b0 <pvPortMalloc+0x18c>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122aa:	e004      	b.n	80122b6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80122ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	687a      	ldr	r2, [r7, #4]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d903      	bls.n	80122c8 <pvPortMalloc+0xa4>
 80122c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d1f1      	bne.n	80122ac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122c8:	4b36      	ldr	r3, [pc, #216]	; (80123a4 <pvPortMalloc+0x180>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d050      	beq.n	8012374 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122d2:	6a3b      	ldr	r3, [r7, #32]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2208      	movs	r2, #8
 80122d8:	4413      	add	r3, r2
 80122da:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	6a3b      	ldr	r3, [r7, #32]
 80122e2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	685a      	ldr	r2, [r3, #4]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	1ad2      	subs	r2, r2, r3
 80122ec:	2308      	movs	r3, #8
 80122ee:	005b      	lsls	r3, r3, #1
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d91f      	bls.n	8012334 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80122f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4413      	add	r3, r2
 80122fa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	f003 0307 	and.w	r3, r3, #7
 8012302:	2b00      	cmp	r3, #0
 8012304:	d00a      	beq.n	801231c <pvPortMalloc+0xf8>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	613b      	str	r3, [r7, #16]
}
 8012318:	bf00      	nop
 801231a:	e7fe      	b.n	801231a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231e:	685a      	ldr	r2, [r3, #4]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	1ad2      	subs	r2, r2, r3
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801232e:	69b8      	ldr	r0, [r7, #24]
 8012330:	f000 f908 	bl	8012544 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012334:	4b1d      	ldr	r3, [pc, #116]	; (80123ac <pvPortMalloc+0x188>)
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	1ad3      	subs	r3, r2, r3
 801233e:	4a1b      	ldr	r2, [pc, #108]	; (80123ac <pvPortMalloc+0x188>)
 8012340:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012342:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <pvPortMalloc+0x188>)
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	4b1b      	ldr	r3, [pc, #108]	; (80123b4 <pvPortMalloc+0x190>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	429a      	cmp	r2, r3
 801234c:	d203      	bcs.n	8012356 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801234e:	4b17      	ldr	r3, [pc, #92]	; (80123ac <pvPortMalloc+0x188>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4a18      	ldr	r2, [pc, #96]	; (80123b4 <pvPortMalloc+0x190>)
 8012354:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012358:	685a      	ldr	r2, [r3, #4]
 801235a:	4b13      	ldr	r3, [pc, #76]	; (80123a8 <pvPortMalloc+0x184>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	431a      	orrs	r2, r3
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012366:	2200      	movs	r2, #0
 8012368:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801236a:	4b13      	ldr	r3, [pc, #76]	; (80123b8 <pvPortMalloc+0x194>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3301      	adds	r3, #1
 8012370:	4a11      	ldr	r2, [pc, #68]	; (80123b8 <pvPortMalloc+0x194>)
 8012372:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012374:	f001 fb96 	bl	8013aa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	f003 0307 	and.w	r3, r3, #7
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00a      	beq.n	8012398 <pvPortMalloc+0x174>
	__asm volatile
 8012382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	60fb      	str	r3, [r7, #12]
}
 8012394:	bf00      	nop
 8012396:	e7fe      	b.n	8012396 <pvPortMalloc+0x172>
	return pvReturn;
 8012398:	69fb      	ldr	r3, [r7, #28]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3728      	adds	r7, #40	; 0x28
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20006db8 	.word	0x20006db8
 80123a8:	20006dcc 	.word	0x20006dcc
 80123ac:	20006dbc 	.word	0x20006dbc
 80123b0:	20006db0 	.word	0x20006db0
 80123b4:	20006dc0 	.word	0x20006dc0
 80123b8:	20006dc4 	.word	0x20006dc4

080123bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d04d      	beq.n	801246a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80123ce:	2308      	movs	r3, #8
 80123d0:	425b      	negs	r3, r3
 80123d2:	697a      	ldr	r2, [r7, #20]
 80123d4:	4413      	add	r3, r2
 80123d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	685a      	ldr	r2, [r3, #4]
 80123e0:	4b24      	ldr	r3, [pc, #144]	; (8012474 <vPortFree+0xb8>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4013      	ands	r3, r2
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d10a      	bne.n	8012400 <vPortFree+0x44>
	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	60fb      	str	r3, [r7, #12]
}
 80123fc:	bf00      	nop
 80123fe:	e7fe      	b.n	80123fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d00a      	beq.n	801241e <vPortFree+0x62>
	__asm volatile
 8012408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	60bb      	str	r3, [r7, #8]
}
 801241a:	bf00      	nop
 801241c:	e7fe      	b.n	801241c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	4b14      	ldr	r3, [pc, #80]	; (8012474 <vPortFree+0xb8>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	4013      	ands	r3, r2
 8012428:	2b00      	cmp	r3, #0
 801242a:	d01e      	beq.n	801246a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d11a      	bne.n	801246a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	685a      	ldr	r2, [r3, #4]
 8012438:	4b0e      	ldr	r3, [pc, #56]	; (8012474 <vPortFree+0xb8>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	43db      	mvns	r3, r3
 801243e:	401a      	ands	r2, r3
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012444:	f001 fb20 	bl	8013a88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	4b0a      	ldr	r3, [pc, #40]	; (8012478 <vPortFree+0xbc>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4413      	add	r3, r2
 8012452:	4a09      	ldr	r2, [pc, #36]	; (8012478 <vPortFree+0xbc>)
 8012454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012456:	6938      	ldr	r0, [r7, #16]
 8012458:	f000 f874 	bl	8012544 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801245c:	4b07      	ldr	r3, [pc, #28]	; (801247c <vPortFree+0xc0>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	4a06      	ldr	r2, [pc, #24]	; (801247c <vPortFree+0xc0>)
 8012464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012466:	f001 fb1d 	bl	8013aa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801246a:	bf00      	nop
 801246c:	3718      	adds	r7, #24
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	20006dcc 	.word	0x20006dcc
 8012478:	20006dbc 	.word	0x20006dbc
 801247c:	20006dc8 	.word	0x20006dc8

08012480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012486:	f246 3310 	movw	r3, #25360	; 0x6310
 801248a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801248c:	4b27      	ldr	r3, [pc, #156]	; (801252c <prvHeapInit+0xac>)
 801248e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	f003 0307 	and.w	r3, r3, #7
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00c      	beq.n	80124b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	3307      	adds	r3, #7
 801249e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f023 0307 	bic.w	r3, r3, #7
 80124a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124a8:	68ba      	ldr	r2, [r7, #8]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	1ad3      	subs	r3, r2, r3
 80124ae:	4a1f      	ldr	r2, [pc, #124]	; (801252c <prvHeapInit+0xac>)
 80124b0:	4413      	add	r3, r2
 80124b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124b8:	4a1d      	ldr	r2, [pc, #116]	; (8012530 <prvHeapInit+0xb0>)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124be:	4b1c      	ldr	r3, [pc, #112]	; (8012530 <prvHeapInit+0xb0>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	4413      	add	r3, r2
 80124ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80124cc:	2208      	movs	r2, #8
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	1a9b      	subs	r3, r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f023 0307 	bic.w	r3, r3, #7
 80124da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	4a15      	ldr	r2, [pc, #84]	; (8012534 <prvHeapInit+0xb4>)
 80124e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80124e2:	4b14      	ldr	r3, [pc, #80]	; (8012534 <prvHeapInit+0xb4>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2200      	movs	r2, #0
 80124e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80124ea:	4b12      	ldr	r3, [pc, #72]	; (8012534 <prvHeapInit+0xb4>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	2200      	movs	r2, #0
 80124f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	1ad2      	subs	r2, r2, r3
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012500:	4b0c      	ldr	r3, [pc, #48]	; (8012534 <prvHeapInit+0xb4>)
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	4a0a      	ldr	r2, [pc, #40]	; (8012538 <prvHeapInit+0xb8>)
 801250e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	4a09      	ldr	r2, [pc, #36]	; (801253c <prvHeapInit+0xbc>)
 8012516:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012518:	4b09      	ldr	r3, [pc, #36]	; (8012540 <prvHeapInit+0xc0>)
 801251a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801251e:	601a      	str	r2, [r3, #0]
}
 8012520:	bf00      	nop
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr
 801252c:	20000aa0 	.word	0x20000aa0
 8012530:	20006db0 	.word	0x20006db0
 8012534:	20006db8 	.word	0x20006db8
 8012538:	20006dc0 	.word	0x20006dc0
 801253c:	20006dbc 	.word	0x20006dbc
 8012540:	20006dcc 	.word	0x20006dcc

08012544 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801254c:	4b28      	ldr	r3, [pc, #160]	; (80125f0 <prvInsertBlockIntoFreeList+0xac>)
 801254e:	60fb      	str	r3, [r7, #12]
 8012550:	e002      	b.n	8012558 <prvInsertBlockIntoFreeList+0x14>
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	60fb      	str	r3, [r7, #12]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	429a      	cmp	r2, r3
 8012560:	d8f7      	bhi.n	8012552 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	4413      	add	r3, r2
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	429a      	cmp	r2, r3
 8012572:	d108      	bne.n	8012586 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	685a      	ldr	r2, [r3, #4]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	441a      	add	r2, r3
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	68ba      	ldr	r2, [r7, #8]
 8012590:	441a      	add	r2, r3
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	429a      	cmp	r2, r3
 8012598:	d118      	bne.n	80125cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	4b15      	ldr	r3, [pc, #84]	; (80125f4 <prvInsertBlockIntoFreeList+0xb0>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d00d      	beq.n	80125c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685a      	ldr	r2, [r3, #4]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	441a      	add	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	601a      	str	r2, [r3, #0]
 80125c0:	e008      	b.n	80125d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80125c2:	4b0c      	ldr	r3, [pc, #48]	; (80125f4 <prvInsertBlockIntoFreeList+0xb0>)
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	e003      	b.n	80125d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80125d4:	68fa      	ldr	r2, [r7, #12]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d002      	beq.n	80125e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125e2:	bf00      	nop
 80125e4:	3714      	adds	r7, #20
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	20006db0 	.word	0x20006db0
 80125f4:	20006db8 	.word	0x20006db8

080125f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80125f8:	b480      	push	{r7}
 80125fa:	b083      	sub	sp, #12
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f103 0208 	add.w	r2, r3, #8
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f04f 32ff 	mov.w	r2, #4294967295
 8012610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f103 0208 	add.w	r2, r3, #8
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f103 0208 	add.w	r2, r3, #8
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801262c:	bf00      	nop
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012646:	bf00      	nop
 8012648:	370c      	adds	r7, #12
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012652:	b480      	push	{r7}
 8012654:	b085      	sub	sp, #20
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	689a      	ldr	r2, [r3, #8]
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	689b      	ldr	r3, [r3, #8]
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	687a      	ldr	r2, [r7, #4]
 8012682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
}
 801268e:	bf00      	nop
 8012690:	3714      	adds	r7, #20
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr

0801269a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801269a:	b480      	push	{r7}
 801269c:	b085      	sub	sp, #20
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
 80126a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b0:	d103      	bne.n	80126ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	691b      	ldr	r3, [r3, #16]
 80126b6:	60fb      	str	r3, [r7, #12]
 80126b8:	e00c      	b.n	80126d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	3308      	adds	r3, #8
 80126be:	60fb      	str	r3, [r7, #12]
 80126c0:	e002      	b.n	80126c8 <vListInsert+0x2e>
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	60fb      	str	r3, [r7, #12]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	68ba      	ldr	r2, [r7, #8]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d2f6      	bcs.n	80126c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	685a      	ldr	r2, [r3, #4]
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	1c5a      	adds	r2, r3, #1
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	601a      	str	r2, [r3, #0]
}
 8012700:	bf00      	nop
 8012702:	3714      	adds	r7, #20
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801270c:	b480      	push	{r7}
 801270e:	b085      	sub	sp, #20
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	691b      	ldr	r3, [r3, #16]
 8012718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	6892      	ldr	r2, [r2, #8]
 8012722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	6852      	ldr	r2, [r2, #4]
 801272c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	429a      	cmp	r2, r3
 8012736:	d103      	bne.n	8012740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	689a      	ldr	r2, [r3, #8]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	1e5a      	subs	r2, r3, #1
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681b      	ldr	r3, [r3, #0]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3714      	adds	r7, #20
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr

08012760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012760:	b480      	push	{r7}
 8012762:	b085      	sub	sp, #20
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	3b04      	subs	r3, #4
 8012770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	3b04      	subs	r3, #4
 801277e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	f023 0201 	bic.w	r2, r3, #1
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	3b04      	subs	r3, #4
 801278e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012790:	4a0c      	ldr	r2, [pc, #48]	; (80127c4 <pxPortInitialiseStack+0x64>)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	3b14      	subs	r3, #20
 801279a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3b04      	subs	r3, #4
 80127a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f06f 0202 	mvn.w	r2, #2
 80127ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	3b20      	subs	r3, #32
 80127b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80127b6:	68fb      	ldr	r3, [r7, #12]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3714      	adds	r7, #20
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr
 80127c4:	080127c9 	.word	0x080127c9

080127c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80127ce:	2300      	movs	r3, #0
 80127d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80127d2:	4b12      	ldr	r3, [pc, #72]	; (801281c <prvTaskExitError+0x54>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127da:	d00a      	beq.n	80127f2 <prvTaskExitError+0x2a>
	__asm volatile
 80127dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	60fb      	str	r3, [r7, #12]
}
 80127ee:	bf00      	nop
 80127f0:	e7fe      	b.n	80127f0 <prvTaskExitError+0x28>
	__asm volatile
 80127f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	60bb      	str	r3, [r7, #8]
}
 8012804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012806:	bf00      	nop
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0fc      	beq.n	8012808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801280e:	bf00      	nop
 8012810:	bf00      	nop
 8012812:	3714      	adds	r7, #20
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	20000054 	.word	0x20000054

08012820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012820:	4b07      	ldr	r3, [pc, #28]	; (8012840 <pxCurrentTCBConst2>)
 8012822:	6819      	ldr	r1, [r3, #0]
 8012824:	6808      	ldr	r0, [r1, #0]
 8012826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282a:	f380 8809 	msr	PSP, r0
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f04f 0000 	mov.w	r0, #0
 8012836:	f380 8811 	msr	BASEPRI, r0
 801283a:	4770      	bx	lr
 801283c:	f3af 8000 	nop.w

08012840 <pxCurrentTCBConst2>:
 8012840:	20006dd8 	.word	0x20006dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012844:	bf00      	nop
 8012846:	bf00      	nop

08012848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012848:	4808      	ldr	r0, [pc, #32]	; (801286c <prvPortStartFirstTask+0x24>)
 801284a:	6800      	ldr	r0, [r0, #0]
 801284c:	6800      	ldr	r0, [r0, #0]
 801284e:	f380 8808 	msr	MSP, r0
 8012852:	f04f 0000 	mov.w	r0, #0
 8012856:	f380 8814 	msr	CONTROL, r0
 801285a:	b662      	cpsie	i
 801285c:	b661      	cpsie	f
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	f3bf 8f6f 	isb	sy
 8012866:	df00      	svc	0
 8012868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801286a:	bf00      	nop
 801286c:	e000ed08 	.word	0xe000ed08

08012870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012876:	4b46      	ldr	r3, [pc, #280]	; (8012990 <xPortStartScheduler+0x120>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a46      	ldr	r2, [pc, #280]	; (8012994 <xPortStartScheduler+0x124>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d10a      	bne.n	8012896 <xPortStartScheduler+0x26>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	613b      	str	r3, [r7, #16]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012896:	4b3e      	ldr	r3, [pc, #248]	; (8012990 <xPortStartScheduler+0x120>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a3f      	ldr	r2, [pc, #252]	; (8012998 <xPortStartScheduler+0x128>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d10a      	bne.n	80128b6 <xPortStartScheduler+0x46>
	__asm volatile
 80128a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	60fb      	str	r3, [r7, #12]
}
 80128b2:	bf00      	nop
 80128b4:	e7fe      	b.n	80128b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80128b6:	4b39      	ldr	r3, [pc, #228]	; (801299c <xPortStartScheduler+0x12c>)
 80128b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	22ff      	movs	r2, #255	; 0xff
 80128c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	4b31      	ldr	r3, [pc, #196]	; (80129a0 <xPortStartScheduler+0x130>)
 80128dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80128de:	4b31      	ldr	r3, [pc, #196]	; (80129a4 <xPortStartScheduler+0x134>)
 80128e0:	2207      	movs	r2, #7
 80128e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128e4:	e009      	b.n	80128fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80128e6:	4b2f      	ldr	r3, [pc, #188]	; (80129a4 <xPortStartScheduler+0x134>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	4a2d      	ldr	r2, [pc, #180]	; (80129a4 <xPortStartScheduler+0x134>)
 80128ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80128f0:	78fb      	ldrb	r3, [r7, #3]
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128fa:	78fb      	ldrb	r3, [r7, #3]
 80128fc:	b2db      	uxtb	r3, r3
 80128fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012902:	2b80      	cmp	r3, #128	; 0x80
 8012904:	d0ef      	beq.n	80128e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012906:	4b27      	ldr	r3, [pc, #156]	; (80129a4 <xPortStartScheduler+0x134>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f1c3 0307 	rsb	r3, r3, #7
 801290e:	2b04      	cmp	r3, #4
 8012910:	d00a      	beq.n	8012928 <xPortStartScheduler+0xb8>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	60bb      	str	r3, [r7, #8]
}
 8012924:	bf00      	nop
 8012926:	e7fe      	b.n	8012926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012928:	4b1e      	ldr	r3, [pc, #120]	; (80129a4 <xPortStartScheduler+0x134>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	021b      	lsls	r3, r3, #8
 801292e:	4a1d      	ldr	r2, [pc, #116]	; (80129a4 <xPortStartScheduler+0x134>)
 8012930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012932:	4b1c      	ldr	r3, [pc, #112]	; (80129a4 <xPortStartScheduler+0x134>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801293a:	4a1a      	ldr	r2, [pc, #104]	; (80129a4 <xPortStartScheduler+0x134>)
 801293c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	b2da      	uxtb	r2, r3
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012946:	4b18      	ldr	r3, [pc, #96]	; (80129a8 <xPortStartScheduler+0x138>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a17      	ldr	r2, [pc, #92]	; (80129a8 <xPortStartScheduler+0x138>)
 801294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012952:	4b15      	ldr	r3, [pc, #84]	; (80129a8 <xPortStartScheduler+0x138>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a14      	ldr	r2, [pc, #80]	; (80129a8 <xPortStartScheduler+0x138>)
 8012958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801295c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801295e:	f000 f8dd 	bl	8012b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012962:	4b12      	ldr	r3, [pc, #72]	; (80129ac <xPortStartScheduler+0x13c>)
 8012964:	2200      	movs	r2, #0
 8012966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012968:	f000 f8fc 	bl	8012b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801296c:	4b10      	ldr	r3, [pc, #64]	; (80129b0 <xPortStartScheduler+0x140>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a0f      	ldr	r2, [pc, #60]	; (80129b0 <xPortStartScheduler+0x140>)
 8012972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012978:	f7ff ff66 	bl	8012848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801297c:	f001 f9fa 	bl	8013d74 <vTaskSwitchContext>
	prvTaskExitError();
 8012980:	f7ff ff22 	bl	80127c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3718      	adds	r7, #24
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	e000ed00 	.word	0xe000ed00
 8012994:	410fc271 	.word	0x410fc271
 8012998:	410fc270 	.word	0x410fc270
 801299c:	e000e400 	.word	0xe000e400
 80129a0:	20006dd0 	.word	0x20006dd0
 80129a4:	20006dd4 	.word	0x20006dd4
 80129a8:	e000ed20 	.word	0xe000ed20
 80129ac:	20000054 	.word	0x20000054
 80129b0:	e000ef34 	.word	0xe000ef34

080129b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
	__asm volatile
 80129ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129be:	f383 8811 	msr	BASEPRI, r3
 80129c2:	f3bf 8f6f 	isb	sy
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	607b      	str	r3, [r7, #4]
}
 80129cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80129ce:	4b0f      	ldr	r3, [pc, #60]	; (8012a0c <vPortEnterCritical+0x58>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	3301      	adds	r3, #1
 80129d4:	4a0d      	ldr	r2, [pc, #52]	; (8012a0c <vPortEnterCritical+0x58>)
 80129d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80129d8:	4b0c      	ldr	r3, [pc, #48]	; (8012a0c <vPortEnterCritical+0x58>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d10f      	bne.n	8012a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129e0:	4b0b      	ldr	r3, [pc, #44]	; (8012a10 <vPortEnterCritical+0x5c>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00a      	beq.n	8012a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80129ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	603b      	str	r3, [r7, #0]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <vPortEnterCritical+0x4a>
	}
}
 8012a00:	bf00      	nop
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	20000054 	.word	0x20000054
 8012a10:	e000ed04 	.word	0xe000ed04

08012a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012a1a:	4b12      	ldr	r3, [pc, #72]	; (8012a64 <vPortExitCritical+0x50>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d10a      	bne.n	8012a38 <vPortExitCritical+0x24>
	__asm volatile
 8012a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a26:	f383 8811 	msr	BASEPRI, r3
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	607b      	str	r3, [r7, #4]
}
 8012a34:	bf00      	nop
 8012a36:	e7fe      	b.n	8012a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012a38:	4b0a      	ldr	r3, [pc, #40]	; (8012a64 <vPortExitCritical+0x50>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	4a09      	ldr	r2, [pc, #36]	; (8012a64 <vPortExitCritical+0x50>)
 8012a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a42:	4b08      	ldr	r3, [pc, #32]	; (8012a64 <vPortExitCritical+0x50>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d105      	bne.n	8012a56 <vPortExitCritical+0x42>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012a56:	bf00      	nop
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	20000054 	.word	0x20000054
	...

08012a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a70:	f3ef 8009 	mrs	r0, PSP
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	4b15      	ldr	r3, [pc, #84]	; (8012ad0 <pxCurrentTCBConst>)
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	f01e 0f10 	tst.w	lr, #16
 8012a80:	bf08      	it	eq
 8012a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8a:	6010      	str	r0, [r2, #0]
 8012a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a94:	f380 8811 	msr	BASEPRI, r0
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f001 f968 	bl	8013d74 <vTaskSwitchContext>
 8012aa4:	f04f 0000 	mov.w	r0, #0
 8012aa8:	f380 8811 	msr	BASEPRI, r0
 8012aac:	bc09      	pop	{r0, r3}
 8012aae:	6819      	ldr	r1, [r3, #0]
 8012ab0:	6808      	ldr	r0, [r1, #0]
 8012ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab6:	f01e 0f10 	tst.w	lr, #16
 8012aba:	bf08      	it	eq
 8012abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ac0:	f380 8809 	msr	PSP, r0
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	f3af 8000 	nop.w

08012ad0 <pxCurrentTCBConst>:
 8012ad0:	20006dd8 	.word	0x20006dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ad4:	bf00      	nop
 8012ad6:	bf00      	nop

08012ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	607b      	str	r3, [r7, #4]
}
 8012af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012af2:	f001 f885 	bl	8013c00 <xTaskIncrementTick>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d003      	beq.n	8012b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012afc:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <xPortSysTickHandler+0x40>)
 8012afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b02:	601a      	str	r2, [r3, #0]
 8012b04:	2300      	movs	r3, #0
 8012b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	f383 8811 	msr	BASEPRI, r3
}
 8012b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	e000ed04 	.word	0xe000ed04

08012b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012b20:	4b0b      	ldr	r3, [pc, #44]	; (8012b50 <vPortSetupTimerInterrupt+0x34>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012b26:	4b0b      	ldr	r3, [pc, #44]	; (8012b54 <vPortSetupTimerInterrupt+0x38>)
 8012b28:	2200      	movs	r2, #0
 8012b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <vPortSetupTimerInterrupt+0x3c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a0a      	ldr	r2, [pc, #40]	; (8012b5c <vPortSetupTimerInterrupt+0x40>)
 8012b32:	fba2 2303 	umull	r2, r3, r2, r3
 8012b36:	099b      	lsrs	r3, r3, #6
 8012b38:	4a09      	ldr	r2, [pc, #36]	; (8012b60 <vPortSetupTimerInterrupt+0x44>)
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012b3e:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <vPortSetupTimerInterrupt+0x34>)
 8012b40:	2207      	movs	r2, #7
 8012b42:	601a      	str	r2, [r3, #0]
}
 8012b44:	bf00      	nop
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr
 8012b4e:	bf00      	nop
 8012b50:	e000e010 	.word	0xe000e010
 8012b54:	e000e018 	.word	0xe000e018
 8012b58:	20000048 	.word	0x20000048
 8012b5c:	10624dd3 	.word	0x10624dd3
 8012b60:	e000e014 	.word	0xe000e014

08012b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b74 <vPortEnableVFP+0x10>
 8012b68:	6801      	ldr	r1, [r0, #0]
 8012b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b6e:	6001      	str	r1, [r0, #0]
 8012b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b72:	bf00      	nop
 8012b74:	e000ed88 	.word	0xe000ed88

08012b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b7e:	f3ef 8305 	mrs	r3, IPSR
 8012b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2b0f      	cmp	r3, #15
 8012b88:	d914      	bls.n	8012bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b8a:	4a17      	ldr	r2, [pc, #92]	; (8012be8 <vPortValidateInterruptPriority+0x70>)
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	4413      	add	r3, r2
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b94:	4b15      	ldr	r3, [pc, #84]	; (8012bec <vPortValidateInterruptPriority+0x74>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	7afa      	ldrb	r2, [r7, #11]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d20a      	bcs.n	8012bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	607b      	str	r3, [r7, #4]
}
 8012bb0:	bf00      	nop
 8012bb2:	e7fe      	b.n	8012bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012bb4:	4b0e      	ldr	r3, [pc, #56]	; (8012bf0 <vPortValidateInterruptPriority+0x78>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012bbc:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <vPortValidateInterruptPriority+0x7c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d90a      	bls.n	8012bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	603b      	str	r3, [r7, #0]
}
 8012bd6:	bf00      	nop
 8012bd8:	e7fe      	b.n	8012bd8 <vPortValidateInterruptPriority+0x60>
	}
 8012bda:	bf00      	nop
 8012bdc:	3714      	adds	r7, #20
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop
 8012be8:	e000e3f0 	.word	0xe000e3f0
 8012bec:	20006dd0 	.word	0x20006dd0
 8012bf0:	e000ed0c 	.word	0xe000ed0c
 8012bf4:	20006dd4 	.word	0x20006dd4

08012bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d10a      	bne.n	8012c22 <xQueueGenericReset+0x2a>
	__asm volatile
 8012c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c10:	f383 8811 	msr	BASEPRI, r3
 8012c14:	f3bf 8f6f 	isb	sy
 8012c18:	f3bf 8f4f 	dsb	sy
 8012c1c:	60bb      	str	r3, [r7, #8]
}
 8012c1e:	bf00      	nop
 8012c20:	e7fe      	b.n	8012c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012c22:	f7ff fec7 	bl	80129b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2e:	68f9      	ldr	r1, [r7, #12]
 8012c30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c32:	fb01 f303 	mul.w	r3, r1, r3
 8012c36:	441a      	add	r2, r3
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c52:	3b01      	subs	r3, #1
 8012c54:	68f9      	ldr	r1, [r7, #12]
 8012c56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012c58:	fb01 f303 	mul.w	r3, r1, r3
 8012c5c:	441a      	add	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	22ff      	movs	r2, #255	; 0xff
 8012c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	22ff      	movs	r2, #255	; 0xff
 8012c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d114      	bne.n	8012ca2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	691b      	ldr	r3, [r3, #16]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d01a      	beq.n	8012cb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	3310      	adds	r3, #16
 8012c84:	4618      	mov	r0, r3
 8012c86:	f001 f929 	bl	8013edc <xTaskRemoveFromEventList>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d012      	beq.n	8012cb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c90:	4b0c      	ldr	r3, [pc, #48]	; (8012cc4 <xQueueGenericReset+0xcc>)
 8012c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c96:	601a      	str	r2, [r3, #0]
 8012c98:	f3bf 8f4f 	dsb	sy
 8012c9c:	f3bf 8f6f 	isb	sy
 8012ca0:	e009      	b.n	8012cb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	3310      	adds	r3, #16
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff fca6 	bl	80125f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3324      	adds	r3, #36	; 0x24
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fca1 	bl	80125f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012cb6:	f7ff fead 	bl	8012a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012cba:	2301      	movs	r3, #1
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3710      	adds	r7, #16
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	e000ed04 	.word	0xe000ed04

08012cc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08e      	sub	sp, #56	; 0x38
 8012ccc:	af02      	add	r7, sp, #8
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	607a      	str	r2, [r7, #4]
 8012cd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d10a      	bne.n	8012cf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012cee:	bf00      	nop
 8012cf0:	e7fe      	b.n	8012cf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d10a      	bne.n	8012d0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d0a:	bf00      	nop
 8012d0c:	e7fe      	b.n	8012d0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <xQueueGenericCreateStatic+0x52>
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d001      	beq.n	8012d1e <xQueueGenericCreateStatic+0x56>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e000      	b.n	8012d20 <xQueueGenericCreateStatic+0x58>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d10a      	bne.n	8012d3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	623b      	str	r3, [r7, #32]
}
 8012d36:	bf00      	nop
 8012d38:	e7fe      	b.n	8012d38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d102      	bne.n	8012d46 <xQueueGenericCreateStatic+0x7e>
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d101      	bne.n	8012d4a <xQueueGenericCreateStatic+0x82>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e000      	b.n	8012d4c <xQueueGenericCreateStatic+0x84>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d10a      	bne.n	8012d66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d54:	f383 8811 	msr	BASEPRI, r3
 8012d58:	f3bf 8f6f 	isb	sy
 8012d5c:	f3bf 8f4f 	dsb	sy
 8012d60:	61fb      	str	r3, [r7, #28]
}
 8012d62:	bf00      	nop
 8012d64:	e7fe      	b.n	8012d64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d66:	2350      	movs	r3, #80	; 0x50
 8012d68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	2b50      	cmp	r3, #80	; 0x50
 8012d6e:	d00a      	beq.n	8012d86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	61bb      	str	r3, [r7, #24]
}
 8012d82:	bf00      	nop
 8012d84:	e7fe      	b.n	8012d84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00d      	beq.n	8012dae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	2201      	movs	r2, #1
 8012d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	4613      	mov	r3, r2
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	68b9      	ldr	r1, [r7, #8]
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f000 f805 	bl	8012db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3730      	adds	r7, #48	; 0x30
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
 8012dc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d103      	bne.n	8012dd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	69ba      	ldr	r2, [r7, #24]
 8012dd0:	601a      	str	r2, [r3, #0]
 8012dd2:	e002      	b.n	8012dda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	68ba      	ldr	r2, [r7, #8]
 8012de4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012de6:	2101      	movs	r1, #1
 8012de8:	69b8      	ldr	r0, [r7, #24]
 8012dea:	f7ff ff05 	bl	8012bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	78fa      	ldrb	r2, [r7, #3]
 8012df2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012df6:	bf00      	nop
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
	...

08012e00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b08e      	sub	sp, #56	; 0x38
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10a      	bne.n	8012e32 <xQueueGenericSend+0x32>
	__asm volatile
 8012e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e20:	f383 8811 	msr	BASEPRI, r3
 8012e24:	f3bf 8f6f 	isb	sy
 8012e28:	f3bf 8f4f 	dsb	sy
 8012e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012e2e:	bf00      	nop
 8012e30:	e7fe      	b.n	8012e30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d103      	bne.n	8012e40 <xQueueGenericSend+0x40>
 8012e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <xQueueGenericSend+0x44>
 8012e40:	2301      	movs	r3, #1
 8012e42:	e000      	b.n	8012e46 <xQueueGenericSend+0x46>
 8012e44:	2300      	movs	r3, #0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10a      	bne.n	8012e60 <xQueueGenericSend+0x60>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012e5c:	bf00      	nop
 8012e5e:	e7fe      	b.n	8012e5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	2b02      	cmp	r3, #2
 8012e64:	d103      	bne.n	8012e6e <xQueueGenericSend+0x6e>
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d101      	bne.n	8012e72 <xQueueGenericSend+0x72>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e000      	b.n	8012e74 <xQueueGenericSend+0x74>
 8012e72:	2300      	movs	r3, #0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d10a      	bne.n	8012e8e <xQueueGenericSend+0x8e>
	__asm volatile
 8012e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	623b      	str	r3, [r7, #32]
}
 8012e8a:	bf00      	nop
 8012e8c:	e7fe      	b.n	8012e8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e8e:	f001 f9e7 	bl	8014260 <xTaskGetSchedulerState>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d102      	bne.n	8012e9e <xQueueGenericSend+0x9e>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <xQueueGenericSend+0xa2>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e000      	b.n	8012ea4 <xQueueGenericSend+0xa4>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10a      	bne.n	8012ebe <xQueueGenericSend+0xbe>
	__asm volatile
 8012ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eac:	f383 8811 	msr	BASEPRI, r3
 8012eb0:	f3bf 8f6f 	isb	sy
 8012eb4:	f3bf 8f4f 	dsb	sy
 8012eb8:	61fb      	str	r3, [r7, #28]
}
 8012eba:	bf00      	nop
 8012ebc:	e7fe      	b.n	8012ebc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ebe:	f7ff fd79 	bl	80129b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d302      	bcc.n	8012ed4 <xQueueGenericSend+0xd4>
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d129      	bne.n	8012f28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012ed4:	683a      	ldr	r2, [r7, #0]
 8012ed6:	68b9      	ldr	r1, [r7, #8]
 8012ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eda:	f000 fa0b 	bl	80132f4 <prvCopyDataToQueue>
 8012ede:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d010      	beq.n	8012f0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eea:	3324      	adds	r3, #36	; 0x24
 8012eec:	4618      	mov	r0, r3
 8012eee:	f000 fff5 	bl	8013edc <xTaskRemoveFromEventList>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d013      	beq.n	8012f20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012ef8:	4b3f      	ldr	r3, [pc, #252]	; (8012ff8 <xQueueGenericSend+0x1f8>)
 8012efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012efe:	601a      	str	r2, [r3, #0]
 8012f00:	f3bf 8f4f 	dsb	sy
 8012f04:	f3bf 8f6f 	isb	sy
 8012f08:	e00a      	b.n	8012f20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d007      	beq.n	8012f20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012f10:	4b39      	ldr	r3, [pc, #228]	; (8012ff8 <xQueueGenericSend+0x1f8>)
 8012f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	f3bf 8f4f 	dsb	sy
 8012f1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012f20:	f7ff fd78 	bl	8012a14 <vPortExitCritical>
				return pdPASS;
 8012f24:	2301      	movs	r3, #1
 8012f26:	e063      	b.n	8012ff0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d103      	bne.n	8012f36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f2e:	f7ff fd71 	bl	8012a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	e05c      	b.n	8012ff0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d106      	bne.n	8012f4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f3c:	f107 0314 	add.w	r3, r7, #20
 8012f40:	4618      	mov	r0, r3
 8012f42:	f001 f82f 	bl	8013fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f46:	2301      	movs	r3, #1
 8012f48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f4a:	f7ff fd63 	bl	8012a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f4e:	f000 fd9b 	bl	8013a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f52:	f7ff fd2f 	bl	80129b4 <vPortEnterCritical>
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f5c:	b25b      	sxtb	r3, r3
 8012f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f62:	d103      	bne.n	8012f6c <xQueueGenericSend+0x16c>
 8012f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f66:	2200      	movs	r2, #0
 8012f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f72:	b25b      	sxtb	r3, r3
 8012f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f78:	d103      	bne.n	8012f82 <xQueueGenericSend+0x182>
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f82:	f7ff fd47 	bl	8012a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f86:	1d3a      	adds	r2, r7, #4
 8012f88:	f107 0314 	add.w	r3, r7, #20
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f001 f81e 	bl	8013fd0 <xTaskCheckForTimeOut>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d124      	bne.n	8012fe4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f9c:	f000 faa2 	bl	80134e4 <prvIsQueueFull>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d018      	beq.n	8012fd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa8:	3310      	adds	r3, #16
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	4611      	mov	r1, r2
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 ff44 	bl	8013e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fb6:	f000 fa2d 	bl	8013414 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012fba:	f000 fd73 	bl	8013aa4 <xTaskResumeAll>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f47f af7c 	bne.w	8012ebe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012fc6:	4b0c      	ldr	r3, [pc, #48]	; (8012ff8 <xQueueGenericSend+0x1f8>)
 8012fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	f3bf 8f4f 	dsb	sy
 8012fd2:	f3bf 8f6f 	isb	sy
 8012fd6:	e772      	b.n	8012ebe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fda:	f000 fa1b 	bl	8013414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012fde:	f000 fd61 	bl	8013aa4 <xTaskResumeAll>
 8012fe2:	e76c      	b.n	8012ebe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fe6:	f000 fa15 	bl	8013414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012fea:	f000 fd5b 	bl	8013aa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012fee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3738      	adds	r7, #56	; 0x38
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	e000ed04 	.word	0xe000ed04

08012ffc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b090      	sub	sp, #64	; 0x40
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
 8013008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013010:	2b00      	cmp	r3, #0
 8013012:	d10a      	bne.n	801302a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013018:	f383 8811 	msr	BASEPRI, r3
 801301c:	f3bf 8f6f 	isb	sy
 8013020:	f3bf 8f4f 	dsb	sy
 8013024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013026:	bf00      	nop
 8013028:	e7fe      	b.n	8013028 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d103      	bne.n	8013038 <xQueueGenericSendFromISR+0x3c>
 8013030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013034:	2b00      	cmp	r3, #0
 8013036:	d101      	bne.n	801303c <xQueueGenericSendFromISR+0x40>
 8013038:	2301      	movs	r3, #1
 801303a:	e000      	b.n	801303e <xQueueGenericSendFromISR+0x42>
 801303c:	2300      	movs	r3, #0
 801303e:	2b00      	cmp	r3, #0
 8013040:	d10a      	bne.n	8013058 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013046:	f383 8811 	msr	BASEPRI, r3
 801304a:	f3bf 8f6f 	isb	sy
 801304e:	f3bf 8f4f 	dsb	sy
 8013052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013054:	bf00      	nop
 8013056:	e7fe      	b.n	8013056 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	2b02      	cmp	r3, #2
 801305c:	d103      	bne.n	8013066 <xQueueGenericSendFromISR+0x6a>
 801305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013062:	2b01      	cmp	r3, #1
 8013064:	d101      	bne.n	801306a <xQueueGenericSendFromISR+0x6e>
 8013066:	2301      	movs	r3, #1
 8013068:	e000      	b.n	801306c <xQueueGenericSendFromISR+0x70>
 801306a:	2300      	movs	r3, #0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10a      	bne.n	8013086 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	623b      	str	r3, [r7, #32]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013086:	f7ff fd77 	bl	8012b78 <vPortValidateInterruptPriority>
	__asm volatile
 801308a:	f3ef 8211 	mrs	r2, BASEPRI
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	f383 8811 	msr	BASEPRI, r3
 8013096:	f3bf 8f6f 	isb	sy
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	61fa      	str	r2, [r7, #28]
 80130a0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80130a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d302      	bcc.n	80130b8 <xQueueGenericSendFromISR+0xbc>
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d12f      	bne.n	8013118 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80130b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130c8:	683a      	ldr	r2, [r7, #0]
 80130ca:	68b9      	ldr	r1, [r7, #8]
 80130cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130ce:	f000 f911 	bl	80132f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80130d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80130d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130da:	d112      	bne.n	8013102 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d016      	beq.n	8013112 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	3324      	adds	r3, #36	; 0x24
 80130e8:	4618      	mov	r0, r3
 80130ea:	f000 fef7 	bl	8013edc <xTaskRemoveFromEventList>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00e      	beq.n	8013112 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00b      	beq.n	8013112 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2201      	movs	r2, #1
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	e007      	b.n	8013112 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013102:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013106:	3301      	adds	r3, #1
 8013108:	b2db      	uxtb	r3, r3
 801310a:	b25a      	sxtb	r2, r3
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013112:	2301      	movs	r3, #1
 8013114:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013116:	e001      	b.n	801311c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013118:	2300      	movs	r3, #0
 801311a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	f383 8811 	msr	BASEPRI, r3
}
 8013126:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801312a:	4618      	mov	r0, r3
 801312c:	3740      	adds	r7, #64	; 0x40
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
	...

08013134 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b08c      	sub	sp, #48	; 0x30
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013140:	2300      	movs	r3, #0
 8013142:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314a:	2b00      	cmp	r3, #0
 801314c:	d10a      	bne.n	8013164 <xQueueReceive+0x30>
	__asm volatile
 801314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	623b      	str	r3, [r7, #32]
}
 8013160:	bf00      	nop
 8013162:	e7fe      	b.n	8013162 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d103      	bne.n	8013172 <xQueueReceive+0x3e>
 801316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801316e:	2b00      	cmp	r3, #0
 8013170:	d101      	bne.n	8013176 <xQueueReceive+0x42>
 8013172:	2301      	movs	r3, #1
 8013174:	e000      	b.n	8013178 <xQueueReceive+0x44>
 8013176:	2300      	movs	r3, #0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10a      	bne.n	8013192 <xQueueReceive+0x5e>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	61fb      	str	r3, [r7, #28]
}
 801318e:	bf00      	nop
 8013190:	e7fe      	b.n	8013190 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013192:	f001 f865 	bl	8014260 <xTaskGetSchedulerState>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <xQueueReceive+0x6e>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d101      	bne.n	80131a6 <xQueueReceive+0x72>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e000      	b.n	80131a8 <xQueueReceive+0x74>
 80131a6:	2300      	movs	r3, #0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d10a      	bne.n	80131c2 <xQueueReceive+0x8e>
	__asm volatile
 80131ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b0:	f383 8811 	msr	BASEPRI, r3
 80131b4:	f3bf 8f6f 	isb	sy
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	61bb      	str	r3, [r7, #24]
}
 80131be:	bf00      	nop
 80131c0:	e7fe      	b.n	80131c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131c2:	f7ff fbf7 	bl	80129b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80131c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d01f      	beq.n	8013212 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80131d2:	68b9      	ldr	r1, [r7, #8]
 80131d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131d6:	f000 f8f7 	bl	80133c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	1e5a      	subs	r2, r3, #1
 80131de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00f      	beq.n	801320a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ec:	3310      	adds	r3, #16
 80131ee:	4618      	mov	r0, r3
 80131f0:	f000 fe74 	bl	8013edc <xTaskRemoveFromEventList>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d007      	beq.n	801320a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131fa:	4b3d      	ldr	r3, [pc, #244]	; (80132f0 <xQueueReceive+0x1bc>)
 80131fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	f3bf 8f4f 	dsb	sy
 8013206:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801320a:	f7ff fc03 	bl	8012a14 <vPortExitCritical>
				return pdPASS;
 801320e:	2301      	movs	r3, #1
 8013210:	e069      	b.n	80132e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d103      	bne.n	8013220 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013218:	f7ff fbfc 	bl	8012a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801321c:	2300      	movs	r3, #0
 801321e:	e062      	b.n	80132e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013222:	2b00      	cmp	r3, #0
 8013224:	d106      	bne.n	8013234 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013226:	f107 0310 	add.w	r3, r7, #16
 801322a:	4618      	mov	r0, r3
 801322c:	f000 feba 	bl	8013fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013230:	2301      	movs	r3, #1
 8013232:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013234:	f7ff fbee 	bl	8012a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013238:	f000 fc26 	bl	8013a88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801323c:	f7ff fbba 	bl	80129b4 <vPortEnterCritical>
 8013240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013246:	b25b      	sxtb	r3, r3
 8013248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324c:	d103      	bne.n	8013256 <xQueueReceive+0x122>
 801324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013250:	2200      	movs	r2, #0
 8013252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801325c:	b25b      	sxtb	r3, r3
 801325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013262:	d103      	bne.n	801326c <xQueueReceive+0x138>
 8013264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013266:	2200      	movs	r2, #0
 8013268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801326c:	f7ff fbd2 	bl	8012a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013270:	1d3a      	adds	r2, r7, #4
 8013272:	f107 0310 	add.w	r3, r7, #16
 8013276:	4611      	mov	r1, r2
 8013278:	4618      	mov	r0, r3
 801327a:	f000 fea9 	bl	8013fd0 <xTaskCheckForTimeOut>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d123      	bne.n	80132cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013286:	f000 f917 	bl	80134b8 <prvIsQueueEmpty>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d017      	beq.n	80132c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	3324      	adds	r3, #36	; 0x24
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	4611      	mov	r1, r2
 8013298:	4618      	mov	r0, r3
 801329a:	f000 fdcf 	bl	8013e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801329e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132a0:	f000 f8b8 	bl	8013414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132a4:	f000 fbfe 	bl	8013aa4 <xTaskResumeAll>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d189      	bne.n	80131c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80132ae:	4b10      	ldr	r3, [pc, #64]	; (80132f0 <xQueueReceive+0x1bc>)
 80132b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	f3bf 8f4f 	dsb	sy
 80132ba:	f3bf 8f6f 	isb	sy
 80132be:	e780      	b.n	80131c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80132c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132c2:	f000 f8a7 	bl	8013414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132c6:	f000 fbed 	bl	8013aa4 <xTaskResumeAll>
 80132ca:	e77a      	b.n	80131c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80132cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132ce:	f000 f8a1 	bl	8013414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132d2:	f000 fbe7 	bl	8013aa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132d8:	f000 f8ee 	bl	80134b8 <prvIsQueueEmpty>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f43f af6f 	beq.w	80131c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80132e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3730      	adds	r7, #48	; 0x30
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	e000ed04 	.word	0xe000ed04

080132f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013300:	2300      	movs	r3, #0
 8013302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10d      	bne.n	801332e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d14d      	bne.n	80133b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	689b      	ldr	r3, [r3, #8]
 801331e:	4618      	mov	r0, r3
 8013320:	f000 ffbc 	bl	801429c <xTaskPriorityDisinherit>
 8013324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	609a      	str	r2, [r3, #8]
 801332c:	e043      	b.n	80133b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d119      	bne.n	8013368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6858      	ldr	r0, [r3, #4]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801333c:	461a      	mov	r2, r3
 801333e:	68b9      	ldr	r1, [r7, #8]
 8013340:	f003 fe82 	bl	8017048 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	685a      	ldr	r2, [r3, #4]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801334c:	441a      	add	r2, r3
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	429a      	cmp	r2, r3
 801335c:	d32b      	bcc.n	80133b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	605a      	str	r2, [r3, #4]
 8013366:	e026      	b.n	80133b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	68d8      	ldr	r0, [r3, #12]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013370:	461a      	mov	r2, r3
 8013372:	68b9      	ldr	r1, [r7, #8]
 8013374:	f003 fe68 	bl	8017048 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	68da      	ldr	r2, [r3, #12]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013380:	425b      	negs	r3, r3
 8013382:	441a      	add	r2, r3
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	68da      	ldr	r2, [r3, #12]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	429a      	cmp	r2, r3
 8013392:	d207      	bcs.n	80133a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	689a      	ldr	r2, [r3, #8]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801339c:	425b      	negs	r3, r3
 801339e:	441a      	add	r2, r3
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b02      	cmp	r3, #2
 80133a8:	d105      	bne.n	80133b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	3b01      	subs	r3, #1
 80133b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	1c5a      	adds	r2, r3, #1
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80133be:	697b      	ldr	r3, [r7, #20]
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3718      	adds	r7, #24
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d018      	beq.n	801340c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	68da      	ldr	r2, [r3, #12]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133e2:	441a      	add	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	68da      	ldr	r2, [r3, #12]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	689b      	ldr	r3, [r3, #8]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d303      	bcc.n	80133fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	68d9      	ldr	r1, [r3, #12]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013404:	461a      	mov	r2, r3
 8013406:	6838      	ldr	r0, [r7, #0]
 8013408:	f003 fe1e 	bl	8017048 <memcpy>
	}
}
 801340c:	bf00      	nop
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801341c:	f7ff faca 	bl	80129b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013426:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013428:	e011      	b.n	801344e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342e:	2b00      	cmp	r3, #0
 8013430:	d012      	beq.n	8013458 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	3324      	adds	r3, #36	; 0x24
 8013436:	4618      	mov	r0, r3
 8013438:	f000 fd50 	bl	8013edc <xTaskRemoveFromEventList>
 801343c:	4603      	mov	r3, r0
 801343e:	2b00      	cmp	r3, #0
 8013440:	d001      	beq.n	8013446 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013442:	f000 fe27 	bl	8014094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013446:	7bfb      	ldrb	r3, [r7, #15]
 8013448:	3b01      	subs	r3, #1
 801344a:	b2db      	uxtb	r3, r3
 801344c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013452:	2b00      	cmp	r3, #0
 8013454:	dce9      	bgt.n	801342a <prvUnlockQueue+0x16>
 8013456:	e000      	b.n	801345a <prvUnlockQueue+0x46>
					break;
 8013458:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	22ff      	movs	r2, #255	; 0xff
 801345e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013462:	f7ff fad7 	bl	8012a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013466:	f7ff faa5 	bl	80129b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013470:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013472:	e011      	b.n	8013498 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d012      	beq.n	80134a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	3310      	adds	r3, #16
 8013480:	4618      	mov	r0, r3
 8013482:	f000 fd2b 	bl	8013edc <xTaskRemoveFromEventList>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d001      	beq.n	8013490 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801348c:	f000 fe02 	bl	8014094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013490:	7bbb      	ldrb	r3, [r7, #14]
 8013492:	3b01      	subs	r3, #1
 8013494:	b2db      	uxtb	r3, r3
 8013496:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801349c:	2b00      	cmp	r3, #0
 801349e:	dce9      	bgt.n	8013474 <prvUnlockQueue+0x60>
 80134a0:	e000      	b.n	80134a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80134a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	22ff      	movs	r2, #255	; 0xff
 80134a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80134ac:	f7ff fab2 	bl	8012a14 <vPortExitCritical>
}
 80134b0:	bf00      	nop
 80134b2:	3710      	adds	r7, #16
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80134c0:	f7ff fa78 	bl	80129b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d102      	bne.n	80134d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80134cc:	2301      	movs	r3, #1
 80134ce:	60fb      	str	r3, [r7, #12]
 80134d0:	e001      	b.n	80134d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80134d2:	2300      	movs	r3, #0
 80134d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80134d6:	f7ff fa9d 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 80134da:	68fb      	ldr	r3, [r7, #12]
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3710      	adds	r7, #16
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80134ec:	f7ff fa62 	bl	80129b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d102      	bne.n	8013502 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80134fc:	2301      	movs	r3, #1
 80134fe:	60fb      	str	r3, [r7, #12]
 8013500:	e001      	b.n	8013506 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013502:	2300      	movs	r3, #0
 8013504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013506:	f7ff fa85 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 801350a:	68fb      	ldr	r3, [r7, #12]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013514:	b480      	push	{r7}
 8013516:	b085      	sub	sp, #20
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801351e:	2300      	movs	r3, #0
 8013520:	60fb      	str	r3, [r7, #12]
 8013522:	e014      	b.n	801354e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013524:	4a0f      	ldr	r2, [pc, #60]	; (8013564 <vQueueAddToRegistry+0x50>)
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d10b      	bne.n	8013548 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013530:	490c      	ldr	r1, [pc, #48]	; (8013564 <vQueueAddToRegistry+0x50>)
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	683a      	ldr	r2, [r7, #0]
 8013536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801353a:	4a0a      	ldr	r2, [pc, #40]	; (8013564 <vQueueAddToRegistry+0x50>)
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	00db      	lsls	r3, r3, #3
 8013540:	4413      	add	r3, r2
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013546:	e006      	b.n	8013556 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3301      	adds	r3, #1
 801354c:	60fb      	str	r3, [r7, #12]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2b07      	cmp	r3, #7
 8013552:	d9e7      	bls.n	8013524 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013554:	bf00      	nop
 8013556:	bf00      	nop
 8013558:	3714      	adds	r7, #20
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr
 8013562:	bf00      	nop
 8013564:	20008654 	.word	0x20008654

08013568 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013578:	f7ff fa1c 	bl	80129b4 <vPortEnterCritical>
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013582:	b25b      	sxtb	r3, r3
 8013584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013588:	d103      	bne.n	8013592 <vQueueWaitForMessageRestricted+0x2a>
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	2200      	movs	r2, #0
 801358e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013598:	b25b      	sxtb	r3, r3
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	d103      	bne.n	80135a8 <vQueueWaitForMessageRestricted+0x40>
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	2200      	movs	r2, #0
 80135a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135a8:	f7ff fa34 	bl	8012a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d106      	bne.n	80135c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	3324      	adds	r3, #36	; 0x24
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	68b9      	ldr	r1, [r7, #8]
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 fc61 	bl	8013e84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80135c2:	6978      	ldr	r0, [r7, #20]
 80135c4:	f7ff ff26 	bl	8013414 <prvUnlockQueue>
	}
 80135c8:	bf00      	nop
 80135ca:	3718      	adds	r7, #24
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08e      	sub	sp, #56	; 0x38
 80135d4:	af04      	add	r7, sp, #16
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80135de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d10a      	bne.n	80135fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80135e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e8:	f383 8811 	msr	BASEPRI, r3
 80135ec:	f3bf 8f6f 	isb	sy
 80135f0:	f3bf 8f4f 	dsb	sy
 80135f4:	623b      	str	r3, [r7, #32]
}
 80135f6:	bf00      	nop
 80135f8:	e7fe      	b.n	80135f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80135fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d10a      	bne.n	8013616 <xTaskCreateStatic+0x46>
	__asm volatile
 8013600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013604:	f383 8811 	msr	BASEPRI, r3
 8013608:	f3bf 8f6f 	isb	sy
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	61fb      	str	r3, [r7, #28]
}
 8013612:	bf00      	nop
 8013614:	e7fe      	b.n	8013614 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013616:	23bc      	movs	r3, #188	; 0xbc
 8013618:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	2bbc      	cmp	r3, #188	; 0xbc
 801361e:	d00a      	beq.n	8013636 <xTaskCreateStatic+0x66>
	__asm volatile
 8013620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	61bb      	str	r3, [r7, #24]
}
 8013632:	bf00      	nop
 8013634:	e7fe      	b.n	8013634 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013636:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363a:	2b00      	cmp	r3, #0
 801363c:	d01e      	beq.n	801367c <xTaskCreateStatic+0xac>
 801363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013640:	2b00      	cmp	r3, #0
 8013642:	d01b      	beq.n	801367c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013646:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801364c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013650:	2202      	movs	r2, #2
 8013652:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013656:	2300      	movs	r3, #0
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	9302      	str	r3, [sp, #8]
 801365e:	f107 0314 	add.w	r3, r7, #20
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	68b9      	ldr	r1, [r7, #8]
 801366e:	68f8      	ldr	r0, [r7, #12]
 8013670:	f000 f850 	bl	8013714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013676:	f000 f8f3 	bl	8013860 <prvAddNewTaskToReadyList>
 801367a:	e001      	b.n	8013680 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801367c:	2300      	movs	r3, #0
 801367e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013680:	697b      	ldr	r3, [r7, #20]
	}
 8013682:	4618      	mov	r0, r3
 8013684:	3728      	adds	r7, #40	; 0x28
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801368a:	b580      	push	{r7, lr}
 801368c:	b08c      	sub	sp, #48	; 0x30
 801368e:	af04      	add	r7, sp, #16
 8013690:	60f8      	str	r0, [r7, #12]
 8013692:	60b9      	str	r1, [r7, #8]
 8013694:	603b      	str	r3, [r7, #0]
 8013696:	4613      	mov	r3, r2
 8013698:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801369a:	88fb      	ldrh	r3, [r7, #6]
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4618      	mov	r0, r3
 80136a0:	f7fe fdc0 	bl	8012224 <pvPortMalloc>
 80136a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00e      	beq.n	80136ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80136ac:	20bc      	movs	r0, #188	; 0xbc
 80136ae:	f7fe fdb9 	bl	8012224 <pvPortMalloc>
 80136b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	697a      	ldr	r2, [r7, #20]
 80136be:	631a      	str	r2, [r3, #48]	; 0x30
 80136c0:	e005      	b.n	80136ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80136c2:	6978      	ldr	r0, [r7, #20]
 80136c4:	f7fe fe7a 	bl	80123bc <vPortFree>
 80136c8:	e001      	b.n	80136ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80136ca:	2300      	movs	r3, #0
 80136cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d017      	beq.n	8013704 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	2200      	movs	r2, #0
 80136d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136dc:	88fa      	ldrh	r2, [r7, #6]
 80136de:	2300      	movs	r3, #0
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	9302      	str	r3, [sp, #8]
 80136e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e8:	9301      	str	r3, [sp, #4]
 80136ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	68b9      	ldr	r1, [r7, #8]
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f000 f80e 	bl	8013714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136f8:	69f8      	ldr	r0, [r7, #28]
 80136fa:	f000 f8b1 	bl	8013860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80136fe:	2301      	movs	r3, #1
 8013700:	61bb      	str	r3, [r7, #24]
 8013702:	e002      	b.n	801370a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013704:	f04f 33ff 	mov.w	r3, #4294967295
 8013708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801370a:	69bb      	ldr	r3, [r7, #24]
	}
 801370c:	4618      	mov	r0, r3
 801370e:	3720      	adds	r7, #32
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
 8013720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	461a      	mov	r2, r3
 801372c:	21a5      	movs	r1, #165	; 0xa5
 801372e:	f003 fc99 	bl	8017064 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801373c:	3b01      	subs	r3, #1
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	4413      	add	r3, r2
 8013742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	f023 0307 	bic.w	r3, r3, #7
 801374a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	f003 0307 	and.w	r3, r3, #7
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00a      	beq.n	801376c <prvInitialiseNewTask+0x58>
	__asm volatile
 8013756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375a:	f383 8811 	msr	BASEPRI, r3
 801375e:	f3bf 8f6f 	isb	sy
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	617b      	str	r3, [r7, #20]
}
 8013768:	bf00      	nop
 801376a:	e7fe      	b.n	801376a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d01f      	beq.n	80137b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013772:	2300      	movs	r3, #0
 8013774:	61fb      	str	r3, [r7, #28]
 8013776:	e012      	b.n	801379e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013778:	68ba      	ldr	r2, [r7, #8]
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	4413      	add	r3, r2
 801377e:	7819      	ldrb	r1, [r3, #0]
 8013780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013782:	69fb      	ldr	r3, [r7, #28]
 8013784:	4413      	add	r3, r2
 8013786:	3334      	adds	r3, #52	; 0x34
 8013788:	460a      	mov	r2, r1
 801378a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801378c:	68ba      	ldr	r2, [r7, #8]
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	4413      	add	r3, r2
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d006      	beq.n	80137a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	3301      	adds	r3, #1
 801379c:	61fb      	str	r3, [r7, #28]
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	2b0f      	cmp	r3, #15
 80137a2:	d9e9      	bls.n	8013778 <prvInitialiseNewTask+0x64>
 80137a4:	e000      	b.n	80137a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80137a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80137a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137aa:	2200      	movs	r2, #0
 80137ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80137b0:	e003      	b.n	80137ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80137b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b4:	2200      	movs	r2, #0
 80137b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80137ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137bc:	2b37      	cmp	r3, #55	; 0x37
 80137be:	d901      	bls.n	80137c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80137c0:	2337      	movs	r3, #55	; 0x37
 80137c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80137c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80137ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80137d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d2:	2200      	movs	r2, #0
 80137d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	3304      	adds	r3, #4
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fe ff2c 	bl	8012638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e2:	3318      	adds	r3, #24
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fe ff27 	bl	8012638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80137ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80137fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013802:	2200      	movs	r2, #0
 8013804:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	2200      	movs	r2, #0
 801380c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013812:	3354      	adds	r3, #84	; 0x54
 8013814:	2260      	movs	r2, #96	; 0x60
 8013816:	2100      	movs	r1, #0
 8013818:	4618      	mov	r0, r3
 801381a:	f003 fc23 	bl	8017064 <memset>
 801381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013820:	4a0c      	ldr	r2, [pc, #48]	; (8013854 <prvInitialiseNewTask+0x140>)
 8013822:	659a      	str	r2, [r3, #88]	; 0x58
 8013824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013826:	4a0c      	ldr	r2, [pc, #48]	; (8013858 <prvInitialiseNewTask+0x144>)
 8013828:	65da      	str	r2, [r3, #92]	; 0x5c
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	4a0b      	ldr	r2, [pc, #44]	; (801385c <prvInitialiseNewTask+0x148>)
 801382e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	68f9      	ldr	r1, [r7, #12]
 8013834:	69b8      	ldr	r0, [r7, #24]
 8013836:	f7fe ff93 	bl	8012760 <pxPortInitialiseStack>
 801383a:	4602      	mov	r2, r0
 801383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013842:	2b00      	cmp	r3, #0
 8013844:	d002      	beq.n	801384c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801384a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801384c:	bf00      	nop
 801384e:	3720      	adds	r7, #32
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	0801a1d4 	.word	0x0801a1d4
 8013858:	0801a1f4 	.word	0x0801a1f4
 801385c:	0801a1b4 	.word	0x0801a1b4

08013860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013868:	f7ff f8a4 	bl	80129b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801386c:	4b2d      	ldr	r3, [pc, #180]	; (8013924 <prvAddNewTaskToReadyList+0xc4>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3301      	adds	r3, #1
 8013872:	4a2c      	ldr	r2, [pc, #176]	; (8013924 <prvAddNewTaskToReadyList+0xc4>)
 8013874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013876:	4b2c      	ldr	r3, [pc, #176]	; (8013928 <prvAddNewTaskToReadyList+0xc8>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d109      	bne.n	8013892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801387e:	4a2a      	ldr	r2, [pc, #168]	; (8013928 <prvAddNewTaskToReadyList+0xc8>)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013884:	4b27      	ldr	r3, [pc, #156]	; (8013924 <prvAddNewTaskToReadyList+0xc4>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2b01      	cmp	r3, #1
 801388a:	d110      	bne.n	80138ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801388c:	f000 fc26 	bl	80140dc <prvInitialiseTaskLists>
 8013890:	e00d      	b.n	80138ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013892:	4b26      	ldr	r3, [pc, #152]	; (801392c <prvAddNewTaskToReadyList+0xcc>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801389a:	4b23      	ldr	r3, [pc, #140]	; (8013928 <prvAddNewTaskToReadyList+0xc8>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d802      	bhi.n	80138ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80138a8:	4a1f      	ldr	r2, [pc, #124]	; (8013928 <prvAddNewTaskToReadyList+0xc8>)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80138ae:	4b20      	ldr	r3, [pc, #128]	; (8013930 <prvAddNewTaskToReadyList+0xd0>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	3301      	adds	r3, #1
 80138b4:	4a1e      	ldr	r2, [pc, #120]	; (8013930 <prvAddNewTaskToReadyList+0xd0>)
 80138b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80138b8:	4b1d      	ldr	r3, [pc, #116]	; (8013930 <prvAddNewTaskToReadyList+0xd0>)
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c4:	4b1b      	ldr	r3, [pc, #108]	; (8013934 <prvAddNewTaskToReadyList+0xd4>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d903      	bls.n	80138d4 <prvAddNewTaskToReadyList+0x74>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d0:	4a18      	ldr	r2, [pc, #96]	; (8013934 <prvAddNewTaskToReadyList+0xd4>)
 80138d2:	6013      	str	r3, [r2, #0]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138d8:	4613      	mov	r3, r2
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	4413      	add	r3, r2
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	4a15      	ldr	r2, [pc, #84]	; (8013938 <prvAddNewTaskToReadyList+0xd8>)
 80138e2:	441a      	add	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	3304      	adds	r3, #4
 80138e8:	4619      	mov	r1, r3
 80138ea:	4610      	mov	r0, r2
 80138ec:	f7fe feb1 	bl	8012652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80138f0:	f7ff f890 	bl	8012a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80138f4:	4b0d      	ldr	r3, [pc, #52]	; (801392c <prvAddNewTaskToReadyList+0xcc>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00e      	beq.n	801391a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80138fc:	4b0a      	ldr	r3, [pc, #40]	; (8013928 <prvAddNewTaskToReadyList+0xc8>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013906:	429a      	cmp	r2, r3
 8013908:	d207      	bcs.n	801391a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801390a:	4b0c      	ldr	r3, [pc, #48]	; (801393c <prvAddNewTaskToReadyList+0xdc>)
 801390c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013910:	601a      	str	r2, [r3, #0]
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801391a:	bf00      	nop
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	200072ac 	.word	0x200072ac
 8013928:	20006dd8 	.word	0x20006dd8
 801392c:	200072b8 	.word	0x200072b8
 8013930:	200072c8 	.word	0x200072c8
 8013934:	200072b4 	.word	0x200072b4
 8013938:	20006ddc 	.word	0x20006ddc
 801393c:	e000ed04 	.word	0xe000ed04

08013940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013948:	2300      	movs	r3, #0
 801394a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d017      	beq.n	8013982 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013952:	4b13      	ldr	r3, [pc, #76]	; (80139a0 <vTaskDelay+0x60>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00a      	beq.n	8013970 <vTaskDelay+0x30>
	__asm volatile
 801395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395e:	f383 8811 	msr	BASEPRI, r3
 8013962:	f3bf 8f6f 	isb	sy
 8013966:	f3bf 8f4f 	dsb	sy
 801396a:	60bb      	str	r3, [r7, #8]
}
 801396c:	bf00      	nop
 801396e:	e7fe      	b.n	801396e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013970:	f000 f88a 	bl	8013a88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013974:	2100      	movs	r1, #0
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f000 fcfe 	bl	8014378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801397c:	f000 f892 	bl	8013aa4 <xTaskResumeAll>
 8013980:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d107      	bne.n	8013998 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013988:	4b06      	ldr	r3, [pc, #24]	; (80139a4 <vTaskDelay+0x64>)
 801398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801398e:	601a      	str	r2, [r3, #0]
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013998:	bf00      	nop
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	200072d4 	.word	0x200072d4
 80139a4:	e000ed04 	.word	0xe000ed04

080139a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08a      	sub	sp, #40	; 0x28
 80139ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80139b2:	2300      	movs	r3, #0
 80139b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80139b6:	463a      	mov	r2, r7
 80139b8:	1d39      	adds	r1, r7, #4
 80139ba:	f107 0308 	add.w	r3, r7, #8
 80139be:	4618      	mov	r0, r3
 80139c0:	f7fe fbfc 	bl	80121bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80139c4:	6839      	ldr	r1, [r7, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	9202      	str	r2, [sp, #8]
 80139cc:	9301      	str	r3, [sp, #4]
 80139ce:	2300      	movs	r3, #0
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	2300      	movs	r3, #0
 80139d4:	460a      	mov	r2, r1
 80139d6:	4924      	ldr	r1, [pc, #144]	; (8013a68 <vTaskStartScheduler+0xc0>)
 80139d8:	4824      	ldr	r0, [pc, #144]	; (8013a6c <vTaskStartScheduler+0xc4>)
 80139da:	f7ff fdf9 	bl	80135d0 <xTaskCreateStatic>
 80139de:	4603      	mov	r3, r0
 80139e0:	4a23      	ldr	r2, [pc, #140]	; (8013a70 <vTaskStartScheduler+0xc8>)
 80139e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80139e4:	4b22      	ldr	r3, [pc, #136]	; (8013a70 <vTaskStartScheduler+0xc8>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d002      	beq.n	80139f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80139ec:	2301      	movs	r3, #1
 80139ee:	617b      	str	r3, [r7, #20]
 80139f0:	e001      	b.n	80139f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80139f2:	2300      	movs	r3, #0
 80139f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d102      	bne.n	8013a02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80139fc:	f000 fd10 	bl	8014420 <xTimerCreateTimerTask>
 8013a00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d11b      	bne.n	8013a40 <vTaskStartScheduler+0x98>
	__asm volatile
 8013a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0c:	f383 8811 	msr	BASEPRI, r3
 8013a10:	f3bf 8f6f 	isb	sy
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	613b      	str	r3, [r7, #16]
}
 8013a1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013a1c:	4b15      	ldr	r3, [pc, #84]	; (8013a74 <vTaskStartScheduler+0xcc>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	3354      	adds	r3, #84	; 0x54
 8013a22:	4a15      	ldr	r2, [pc, #84]	; (8013a78 <vTaskStartScheduler+0xd0>)
 8013a24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a26:	4b15      	ldr	r3, [pc, #84]	; (8013a7c <vTaskStartScheduler+0xd4>)
 8013a28:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a2e:	4b14      	ldr	r3, [pc, #80]	; (8013a80 <vTaskStartScheduler+0xd8>)
 8013a30:	2201      	movs	r2, #1
 8013a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a34:	4b13      	ldr	r3, [pc, #76]	; (8013a84 <vTaskStartScheduler+0xdc>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a3a:	f7fe ff19 	bl	8012870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013a3e:	e00e      	b.n	8013a5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a46:	d10a      	bne.n	8013a5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8013a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4c:	f383 8811 	msr	BASEPRI, r3
 8013a50:	f3bf 8f6f 	isb	sy
 8013a54:	f3bf 8f4f 	dsb	sy
 8013a58:	60fb      	str	r3, [r7, #12]
}
 8013a5a:	bf00      	nop
 8013a5c:	e7fe      	b.n	8013a5c <vTaskStartScheduler+0xb4>
}
 8013a5e:	bf00      	nop
 8013a60:	3718      	adds	r7, #24
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	08019f2c 	.word	0x08019f2c
 8013a6c:	080140ad 	.word	0x080140ad
 8013a70:	200072d0 	.word	0x200072d0
 8013a74:	20006dd8 	.word	0x20006dd8
 8013a78:	200001cc 	.word	0x200001cc
 8013a7c:	200072cc 	.word	0x200072cc
 8013a80:	200072b8 	.word	0x200072b8
 8013a84:	200072b0 	.word	0x200072b0

08013a88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a88:	b480      	push	{r7}
 8013a8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013a8c:	4b04      	ldr	r3, [pc, #16]	; (8013aa0 <vTaskSuspendAll+0x18>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	3301      	adds	r3, #1
 8013a92:	4a03      	ldr	r2, [pc, #12]	; (8013aa0 <vTaskSuspendAll+0x18>)
 8013a94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013a96:	bf00      	nop
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr
 8013aa0:	200072d4 	.word	0x200072d4

08013aa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ab2:	4b42      	ldr	r3, [pc, #264]	; (8013bbc <xTaskResumeAll+0x118>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d10a      	bne.n	8013ad0 <xTaskResumeAll+0x2c>
	__asm volatile
 8013aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013abe:	f383 8811 	msr	BASEPRI, r3
 8013ac2:	f3bf 8f6f 	isb	sy
 8013ac6:	f3bf 8f4f 	dsb	sy
 8013aca:	603b      	str	r3, [r7, #0]
}
 8013acc:	bf00      	nop
 8013ace:	e7fe      	b.n	8013ace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ad0:	f7fe ff70 	bl	80129b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ad4:	4b39      	ldr	r3, [pc, #228]	; (8013bbc <xTaskResumeAll+0x118>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3b01      	subs	r3, #1
 8013ada:	4a38      	ldr	r2, [pc, #224]	; (8013bbc <xTaskResumeAll+0x118>)
 8013adc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ade:	4b37      	ldr	r3, [pc, #220]	; (8013bbc <xTaskResumeAll+0x118>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d162      	bne.n	8013bac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ae6:	4b36      	ldr	r3, [pc, #216]	; (8013bc0 <xTaskResumeAll+0x11c>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d05e      	beq.n	8013bac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013aee:	e02f      	b.n	8013b50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013af0:	4b34      	ldr	r3, [pc, #208]	; (8013bc4 <xTaskResumeAll+0x120>)
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3318      	adds	r3, #24
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fe fe05 	bl	801270c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	3304      	adds	r3, #4
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fe fe00 	bl	801270c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b10:	4b2d      	ldr	r3, [pc, #180]	; (8013bc8 <xTaskResumeAll+0x124>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d903      	bls.n	8013b20 <xTaskResumeAll+0x7c>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1c:	4a2a      	ldr	r2, [pc, #168]	; (8013bc8 <xTaskResumeAll+0x124>)
 8013b1e:	6013      	str	r3, [r2, #0]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b24:	4613      	mov	r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	4413      	add	r3, r2
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4a27      	ldr	r2, [pc, #156]	; (8013bcc <xTaskResumeAll+0x128>)
 8013b2e:	441a      	add	r2, r3
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	3304      	adds	r3, #4
 8013b34:	4619      	mov	r1, r3
 8013b36:	4610      	mov	r0, r2
 8013b38:	f7fe fd8b 	bl	8012652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b40:	4b23      	ldr	r3, [pc, #140]	; (8013bd0 <xTaskResumeAll+0x12c>)
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d302      	bcc.n	8013b50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013b4a:	4b22      	ldr	r3, [pc, #136]	; (8013bd4 <xTaskResumeAll+0x130>)
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b50:	4b1c      	ldr	r3, [pc, #112]	; (8013bc4 <xTaskResumeAll+0x120>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d1cb      	bne.n	8013af0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d001      	beq.n	8013b62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013b5e:	f000 fb5f 	bl	8014220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013b62:	4b1d      	ldr	r3, [pc, #116]	; (8013bd8 <xTaskResumeAll+0x134>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d010      	beq.n	8013b90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b6e:	f000 f847 	bl	8013c00 <xTaskIncrementTick>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d002      	beq.n	8013b7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013b78:	4b16      	ldr	r3, [pc, #88]	; (8013bd4 <xTaskResumeAll+0x130>)
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	3b01      	subs	r3, #1
 8013b82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d1f1      	bne.n	8013b6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013b8a:	4b13      	ldr	r3, [pc, #76]	; (8013bd8 <xTaskResumeAll+0x134>)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b90:	4b10      	ldr	r3, [pc, #64]	; (8013bd4 <xTaskResumeAll+0x130>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d009      	beq.n	8013bac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013b9c:	4b0f      	ldr	r3, [pc, #60]	; (8013bdc <xTaskResumeAll+0x138>)
 8013b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ba2:	601a      	str	r2, [r3, #0]
 8013ba4:	f3bf 8f4f 	dsb	sy
 8013ba8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013bac:	f7fe ff32 	bl	8012a14 <vPortExitCritical>

	return xAlreadyYielded;
 8013bb0:	68bb      	ldr	r3, [r7, #8]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3710      	adds	r7, #16
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	200072d4 	.word	0x200072d4
 8013bc0:	200072ac 	.word	0x200072ac
 8013bc4:	2000726c 	.word	0x2000726c
 8013bc8:	200072b4 	.word	0x200072b4
 8013bcc:	20006ddc 	.word	0x20006ddc
 8013bd0:	20006dd8 	.word	0x20006dd8
 8013bd4:	200072c0 	.word	0x200072c0
 8013bd8:	200072bc 	.word	0x200072bc
 8013bdc:	e000ed04 	.word	0xe000ed04

08013be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013be0:	b480      	push	{r7}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013be6:	4b05      	ldr	r3, [pc, #20]	; (8013bfc <xTaskGetTickCount+0x1c>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013bec:	687b      	ldr	r3, [r7, #4]
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	370c      	adds	r7, #12
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop
 8013bfc:	200072b0 	.word	0x200072b0

08013c00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013c06:	2300      	movs	r3, #0
 8013c08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c0a:	4b4f      	ldr	r3, [pc, #316]	; (8013d48 <xTaskIncrementTick+0x148>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f040 808f 	bne.w	8013d32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c14:	4b4d      	ldr	r3, [pc, #308]	; (8013d4c <xTaskIncrementTick+0x14c>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c1c:	4a4b      	ldr	r2, [pc, #300]	; (8013d4c <xTaskIncrementTick+0x14c>)
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d120      	bne.n	8013c6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013c28:	4b49      	ldr	r3, [pc, #292]	; (8013d50 <xTaskIncrementTick+0x150>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00a      	beq.n	8013c48 <xTaskIncrementTick+0x48>
	__asm volatile
 8013c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c36:	f383 8811 	msr	BASEPRI, r3
 8013c3a:	f3bf 8f6f 	isb	sy
 8013c3e:	f3bf 8f4f 	dsb	sy
 8013c42:	603b      	str	r3, [r7, #0]
}
 8013c44:	bf00      	nop
 8013c46:	e7fe      	b.n	8013c46 <xTaskIncrementTick+0x46>
 8013c48:	4b41      	ldr	r3, [pc, #260]	; (8013d50 <xTaskIncrementTick+0x150>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	60fb      	str	r3, [r7, #12]
 8013c4e:	4b41      	ldr	r3, [pc, #260]	; (8013d54 <xTaskIncrementTick+0x154>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	4a3f      	ldr	r2, [pc, #252]	; (8013d50 <xTaskIncrementTick+0x150>)
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	4a3f      	ldr	r2, [pc, #252]	; (8013d54 <xTaskIncrementTick+0x154>)
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	6013      	str	r3, [r2, #0]
 8013c5c:	4b3e      	ldr	r3, [pc, #248]	; (8013d58 <xTaskIncrementTick+0x158>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3301      	adds	r3, #1
 8013c62:	4a3d      	ldr	r2, [pc, #244]	; (8013d58 <xTaskIncrementTick+0x158>)
 8013c64:	6013      	str	r3, [r2, #0]
 8013c66:	f000 fadb 	bl	8014220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013c6a:	4b3c      	ldr	r3, [pc, #240]	; (8013d5c <xTaskIncrementTick+0x15c>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	693a      	ldr	r2, [r7, #16]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d349      	bcc.n	8013d08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c74:	4b36      	ldr	r3, [pc, #216]	; (8013d50 <xTaskIncrementTick+0x150>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d104      	bne.n	8013c88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c7e:	4b37      	ldr	r3, [pc, #220]	; (8013d5c <xTaskIncrementTick+0x15c>)
 8013c80:	f04f 32ff 	mov.w	r2, #4294967295
 8013c84:	601a      	str	r2, [r3, #0]
					break;
 8013c86:	e03f      	b.n	8013d08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c88:	4b31      	ldr	r3, [pc, #196]	; (8013d50 <xTaskIncrementTick+0x150>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	68db      	ldr	r3, [r3, #12]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c98:	693a      	ldr	r2, [r7, #16]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d203      	bcs.n	8013ca8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013ca0:	4a2e      	ldr	r2, [pc, #184]	; (8013d5c <xTaskIncrementTick+0x15c>)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013ca6:	e02f      	b.n	8013d08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	3304      	adds	r3, #4
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fe fd2d 	bl	801270c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d004      	beq.n	8013cc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	3318      	adds	r3, #24
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe fd24 	bl	801270c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc8:	4b25      	ldr	r3, [pc, #148]	; (8013d60 <xTaskIncrementTick+0x160>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d903      	bls.n	8013cd8 <xTaskIncrementTick+0xd8>
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd4:	4a22      	ldr	r2, [pc, #136]	; (8013d60 <xTaskIncrementTick+0x160>)
 8013cd6:	6013      	str	r3, [r2, #0]
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cdc:	4613      	mov	r3, r2
 8013cde:	009b      	lsls	r3, r3, #2
 8013ce0:	4413      	add	r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4a1f      	ldr	r2, [pc, #124]	; (8013d64 <xTaskIncrementTick+0x164>)
 8013ce6:	441a      	add	r2, r3
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	3304      	adds	r3, #4
 8013cec:	4619      	mov	r1, r3
 8013cee:	4610      	mov	r0, r2
 8013cf0:	f7fe fcaf 	bl	8012652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cf8:	4b1b      	ldr	r3, [pc, #108]	; (8013d68 <xTaskIncrementTick+0x168>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d3b8      	bcc.n	8013c74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013d02:	2301      	movs	r3, #1
 8013d04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d06:	e7b5      	b.n	8013c74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d08:	4b17      	ldr	r3, [pc, #92]	; (8013d68 <xTaskIncrementTick+0x168>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d0e:	4915      	ldr	r1, [pc, #84]	; (8013d64 <xTaskIncrementTick+0x164>)
 8013d10:	4613      	mov	r3, r2
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	440b      	add	r3, r1
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	d901      	bls.n	8013d24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013d20:	2301      	movs	r3, #1
 8013d22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013d24:	4b11      	ldr	r3, [pc, #68]	; (8013d6c <xTaskIncrementTick+0x16c>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d007      	beq.n	8013d3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	617b      	str	r3, [r7, #20]
 8013d30:	e004      	b.n	8013d3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013d32:	4b0f      	ldr	r3, [pc, #60]	; (8013d70 <xTaskIncrementTick+0x170>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	3301      	adds	r3, #1
 8013d38:	4a0d      	ldr	r2, [pc, #52]	; (8013d70 <xTaskIncrementTick+0x170>)
 8013d3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013d3c:	697b      	ldr	r3, [r7, #20]
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3718      	adds	r7, #24
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	200072d4 	.word	0x200072d4
 8013d4c:	200072b0 	.word	0x200072b0
 8013d50:	20007264 	.word	0x20007264
 8013d54:	20007268 	.word	0x20007268
 8013d58:	200072c4 	.word	0x200072c4
 8013d5c:	200072cc 	.word	0x200072cc
 8013d60:	200072b4 	.word	0x200072b4
 8013d64:	20006ddc 	.word	0x20006ddc
 8013d68:	20006dd8 	.word	0x20006dd8
 8013d6c:	200072c0 	.word	0x200072c0
 8013d70:	200072bc 	.word	0x200072bc

08013d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013d7a:	4b2a      	ldr	r3, [pc, #168]	; (8013e24 <vTaskSwitchContext+0xb0>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d003      	beq.n	8013d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013d82:	4b29      	ldr	r3, [pc, #164]	; (8013e28 <vTaskSwitchContext+0xb4>)
 8013d84:	2201      	movs	r2, #1
 8013d86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013d88:	e046      	b.n	8013e18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013d8a:	4b27      	ldr	r3, [pc, #156]	; (8013e28 <vTaskSwitchContext+0xb4>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d90:	4b26      	ldr	r3, [pc, #152]	; (8013e2c <vTaskSwitchContext+0xb8>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	60fb      	str	r3, [r7, #12]
 8013d96:	e010      	b.n	8013dba <vTaskSwitchContext+0x46>
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d10a      	bne.n	8013db4 <vTaskSwitchContext+0x40>
	__asm volatile
 8013d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da2:	f383 8811 	msr	BASEPRI, r3
 8013da6:	f3bf 8f6f 	isb	sy
 8013daa:	f3bf 8f4f 	dsb	sy
 8013dae:	607b      	str	r3, [r7, #4]
}
 8013db0:	bf00      	nop
 8013db2:	e7fe      	b.n	8013db2 <vTaskSwitchContext+0x3e>
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	3b01      	subs	r3, #1
 8013db8:	60fb      	str	r3, [r7, #12]
 8013dba:	491d      	ldr	r1, [pc, #116]	; (8013e30 <vTaskSwitchContext+0xbc>)
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	009b      	lsls	r3, r3, #2
 8013dc2:	4413      	add	r3, r2
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	440b      	add	r3, r1
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d0e4      	beq.n	8013d98 <vTaskSwitchContext+0x24>
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	009b      	lsls	r3, r3, #2
 8013dd4:	4413      	add	r3, r2
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	4a15      	ldr	r2, [pc, #84]	; (8013e30 <vTaskSwitchContext+0xbc>)
 8013dda:	4413      	add	r3, r2
 8013ddc:	60bb      	str	r3, [r7, #8]
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	685a      	ldr	r2, [r3, #4]
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	605a      	str	r2, [r3, #4]
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	685a      	ldr	r2, [r3, #4]
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	3308      	adds	r3, #8
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d104      	bne.n	8013dfe <vTaskSwitchContext+0x8a>
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	685a      	ldr	r2, [r3, #4]
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	605a      	str	r2, [r3, #4]
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	68db      	ldr	r3, [r3, #12]
 8013e04:	4a0b      	ldr	r2, [pc, #44]	; (8013e34 <vTaskSwitchContext+0xc0>)
 8013e06:	6013      	str	r3, [r2, #0]
 8013e08:	4a08      	ldr	r2, [pc, #32]	; (8013e2c <vTaskSwitchContext+0xb8>)
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e0e:	4b09      	ldr	r3, [pc, #36]	; (8013e34 <vTaskSwitchContext+0xc0>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	3354      	adds	r3, #84	; 0x54
 8013e14:	4a08      	ldr	r2, [pc, #32]	; (8013e38 <vTaskSwitchContext+0xc4>)
 8013e16:	6013      	str	r3, [r2, #0]
}
 8013e18:	bf00      	nop
 8013e1a:	3714      	adds	r7, #20
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr
 8013e24:	200072d4 	.word	0x200072d4
 8013e28:	200072c0 	.word	0x200072c0
 8013e2c:	200072b4 	.word	0x200072b4
 8013e30:	20006ddc 	.word	0x20006ddc
 8013e34:	20006dd8 	.word	0x20006dd8
 8013e38:	200001cc 	.word	0x200001cc

08013e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d10a      	bne.n	8013e62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e50:	f383 8811 	msr	BASEPRI, r3
 8013e54:	f3bf 8f6f 	isb	sy
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	60fb      	str	r3, [r7, #12]
}
 8013e5e:	bf00      	nop
 8013e60:	e7fe      	b.n	8013e60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e62:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <vTaskPlaceOnEventList+0x44>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	3318      	adds	r3, #24
 8013e68:	4619      	mov	r1, r3
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7fe fc15 	bl	801269a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013e70:	2101      	movs	r1, #1
 8013e72:	6838      	ldr	r0, [r7, #0]
 8013e74:	f000 fa80 	bl	8014378 <prvAddCurrentTaskToDelayedList>
}
 8013e78:	bf00      	nop
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	20006dd8 	.word	0x20006dd8

08013e84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b086      	sub	sp, #24
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d10a      	bne.n	8013eac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9a:	f383 8811 	msr	BASEPRI, r3
 8013e9e:	f3bf 8f6f 	isb	sy
 8013ea2:	f3bf 8f4f 	dsb	sy
 8013ea6:	617b      	str	r3, [r7, #20]
}
 8013ea8:	bf00      	nop
 8013eaa:	e7fe      	b.n	8013eaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013eac:	4b0a      	ldr	r3, [pc, #40]	; (8013ed8 <vTaskPlaceOnEventListRestricted+0x54>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	3318      	adds	r3, #24
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	f7fe fbcc 	bl	8012652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013ec6:	6879      	ldr	r1, [r7, #4]
 8013ec8:	68b8      	ldr	r0, [r7, #8]
 8013eca:	f000 fa55 	bl	8014378 <prvAddCurrentTaskToDelayedList>
	}
 8013ece:	bf00      	nop
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	20006dd8 	.word	0x20006dd8

08013edc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b086      	sub	sp, #24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d10a      	bne.n	8013f08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef6:	f383 8811 	msr	BASEPRI, r3
 8013efa:	f3bf 8f6f 	isb	sy
 8013efe:	f3bf 8f4f 	dsb	sy
 8013f02:	60fb      	str	r3, [r7, #12]
}
 8013f04:	bf00      	nop
 8013f06:	e7fe      	b.n	8013f06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	3318      	adds	r3, #24
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fe fbfd 	bl	801270c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f12:	4b1e      	ldr	r3, [pc, #120]	; (8013f8c <xTaskRemoveFromEventList+0xb0>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d11d      	bne.n	8013f56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe fbf4 	bl	801270c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f28:	4b19      	ldr	r3, [pc, #100]	; (8013f90 <xTaskRemoveFromEventList+0xb4>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d903      	bls.n	8013f38 <xTaskRemoveFromEventList+0x5c>
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f34:	4a16      	ldr	r2, [pc, #88]	; (8013f90 <xTaskRemoveFromEventList+0xb4>)
 8013f36:	6013      	str	r3, [r2, #0]
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	4413      	add	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	4a13      	ldr	r2, [pc, #76]	; (8013f94 <xTaskRemoveFromEventList+0xb8>)
 8013f46:	441a      	add	r2, r3
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	3304      	adds	r3, #4
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	4610      	mov	r0, r2
 8013f50:	f7fe fb7f 	bl	8012652 <vListInsertEnd>
 8013f54:	e005      	b.n	8013f62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	3318      	adds	r3, #24
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	480e      	ldr	r0, [pc, #56]	; (8013f98 <xTaskRemoveFromEventList+0xbc>)
 8013f5e:	f7fe fb78 	bl	8012652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f66:	4b0d      	ldr	r3, [pc, #52]	; (8013f9c <xTaskRemoveFromEventList+0xc0>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d905      	bls.n	8013f7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013f70:	2301      	movs	r3, #1
 8013f72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013f74:	4b0a      	ldr	r3, [pc, #40]	; (8013fa0 <xTaskRemoveFromEventList+0xc4>)
 8013f76:	2201      	movs	r2, #1
 8013f78:	601a      	str	r2, [r3, #0]
 8013f7a:	e001      	b.n	8013f80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013f80:	697b      	ldr	r3, [r7, #20]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3718      	adds	r7, #24
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	200072d4 	.word	0x200072d4
 8013f90:	200072b4 	.word	0x200072b4
 8013f94:	20006ddc 	.word	0x20006ddc
 8013f98:	2000726c 	.word	0x2000726c
 8013f9c:	20006dd8 	.word	0x20006dd8
 8013fa0:	200072c0 	.word	0x200072c0

08013fa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013fac:	4b06      	ldr	r3, [pc, #24]	; (8013fc8 <vTaskInternalSetTimeOutState+0x24>)
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013fb4:	4b05      	ldr	r3, [pc, #20]	; (8013fcc <vTaskInternalSetTimeOutState+0x28>)
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	605a      	str	r2, [r3, #4]
}
 8013fbc:	bf00      	nop
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	200072c4 	.word	0x200072c4
 8013fcc:	200072b0 	.word	0x200072b0

08013fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b088      	sub	sp, #32
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10a      	bne.n	8013ff6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe4:	f383 8811 	msr	BASEPRI, r3
 8013fe8:	f3bf 8f6f 	isb	sy
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	613b      	str	r3, [r7, #16]
}
 8013ff2:	bf00      	nop
 8013ff4:	e7fe      	b.n	8013ff4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10a      	bne.n	8014012 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	60fb      	str	r3, [r7, #12]
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014012:	f7fe fccf 	bl	80129b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014016:	4b1d      	ldr	r3, [pc, #116]	; (801408c <xTaskCheckForTimeOut+0xbc>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	69ba      	ldr	r2, [r7, #24]
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801402e:	d102      	bne.n	8014036 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014030:	2300      	movs	r3, #0
 8014032:	61fb      	str	r3, [r7, #28]
 8014034:	e023      	b.n	801407e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	4b15      	ldr	r3, [pc, #84]	; (8014090 <xTaskCheckForTimeOut+0xc0>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	d007      	beq.n	8014052 <xTaskCheckForTimeOut+0x82>
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	69ba      	ldr	r2, [r7, #24]
 8014048:	429a      	cmp	r2, r3
 801404a:	d302      	bcc.n	8014052 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801404c:	2301      	movs	r3, #1
 801404e:	61fb      	str	r3, [r7, #28]
 8014050:	e015      	b.n	801407e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	429a      	cmp	r2, r3
 801405a:	d20b      	bcs.n	8014074 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	1ad2      	subs	r2, r2, r3
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f7ff ff9b 	bl	8013fa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801406e:	2300      	movs	r3, #0
 8014070:	61fb      	str	r3, [r7, #28]
 8014072:	e004      	b.n	801407e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	2200      	movs	r2, #0
 8014078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801407a:	2301      	movs	r3, #1
 801407c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801407e:	f7fe fcc9 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 8014082:	69fb      	ldr	r3, [r7, #28]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3720      	adds	r7, #32
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	200072b0 	.word	0x200072b0
 8014090:	200072c4 	.word	0x200072c4

08014094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014094:	b480      	push	{r7}
 8014096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014098:	4b03      	ldr	r3, [pc, #12]	; (80140a8 <vTaskMissedYield+0x14>)
 801409a:	2201      	movs	r2, #1
 801409c:	601a      	str	r2, [r3, #0]
}
 801409e:	bf00      	nop
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr
 80140a8:	200072c0 	.word	0x200072c0

080140ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80140b4:	f000 f852 	bl	801415c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80140b8:	4b06      	ldr	r3, [pc, #24]	; (80140d4 <prvIdleTask+0x28>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d9f9      	bls.n	80140b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80140c0:	4b05      	ldr	r3, [pc, #20]	; (80140d8 <prvIdleTask+0x2c>)
 80140c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140c6:	601a      	str	r2, [r3, #0]
 80140c8:	f3bf 8f4f 	dsb	sy
 80140cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80140d0:	e7f0      	b.n	80140b4 <prvIdleTask+0x8>
 80140d2:	bf00      	nop
 80140d4:	20006ddc 	.word	0x20006ddc
 80140d8:	e000ed04 	.word	0xe000ed04

080140dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140e2:	2300      	movs	r3, #0
 80140e4:	607b      	str	r3, [r7, #4]
 80140e6:	e00c      	b.n	8014102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	4613      	mov	r3, r2
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	4413      	add	r3, r2
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4a12      	ldr	r2, [pc, #72]	; (801413c <prvInitialiseTaskLists+0x60>)
 80140f4:	4413      	add	r3, r2
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fe fa7e 	bl	80125f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	3301      	adds	r3, #1
 8014100:	607b      	str	r3, [r7, #4]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2b37      	cmp	r3, #55	; 0x37
 8014106:	d9ef      	bls.n	80140e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014108:	480d      	ldr	r0, [pc, #52]	; (8014140 <prvInitialiseTaskLists+0x64>)
 801410a:	f7fe fa75 	bl	80125f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801410e:	480d      	ldr	r0, [pc, #52]	; (8014144 <prvInitialiseTaskLists+0x68>)
 8014110:	f7fe fa72 	bl	80125f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014114:	480c      	ldr	r0, [pc, #48]	; (8014148 <prvInitialiseTaskLists+0x6c>)
 8014116:	f7fe fa6f 	bl	80125f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801411a:	480c      	ldr	r0, [pc, #48]	; (801414c <prvInitialiseTaskLists+0x70>)
 801411c:	f7fe fa6c 	bl	80125f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014120:	480b      	ldr	r0, [pc, #44]	; (8014150 <prvInitialiseTaskLists+0x74>)
 8014122:	f7fe fa69 	bl	80125f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014126:	4b0b      	ldr	r3, [pc, #44]	; (8014154 <prvInitialiseTaskLists+0x78>)
 8014128:	4a05      	ldr	r2, [pc, #20]	; (8014140 <prvInitialiseTaskLists+0x64>)
 801412a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801412c:	4b0a      	ldr	r3, [pc, #40]	; (8014158 <prvInitialiseTaskLists+0x7c>)
 801412e:	4a05      	ldr	r2, [pc, #20]	; (8014144 <prvInitialiseTaskLists+0x68>)
 8014130:	601a      	str	r2, [r3, #0]
}
 8014132:	bf00      	nop
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	20006ddc 	.word	0x20006ddc
 8014140:	2000723c 	.word	0x2000723c
 8014144:	20007250 	.word	0x20007250
 8014148:	2000726c 	.word	0x2000726c
 801414c:	20007280 	.word	0x20007280
 8014150:	20007298 	.word	0x20007298
 8014154:	20007264 	.word	0x20007264
 8014158:	20007268 	.word	0x20007268

0801415c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014162:	e019      	b.n	8014198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014164:	f7fe fc26 	bl	80129b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014168:	4b10      	ldr	r3, [pc, #64]	; (80141ac <prvCheckTasksWaitingTermination+0x50>)
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	68db      	ldr	r3, [r3, #12]
 801416e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3304      	adds	r3, #4
 8014174:	4618      	mov	r0, r3
 8014176:	f7fe fac9 	bl	801270c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801417a:	4b0d      	ldr	r3, [pc, #52]	; (80141b0 <prvCheckTasksWaitingTermination+0x54>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	3b01      	subs	r3, #1
 8014180:	4a0b      	ldr	r2, [pc, #44]	; (80141b0 <prvCheckTasksWaitingTermination+0x54>)
 8014182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014184:	4b0b      	ldr	r3, [pc, #44]	; (80141b4 <prvCheckTasksWaitingTermination+0x58>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	3b01      	subs	r3, #1
 801418a:	4a0a      	ldr	r2, [pc, #40]	; (80141b4 <prvCheckTasksWaitingTermination+0x58>)
 801418c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801418e:	f7fe fc41 	bl	8012a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f000 f810 	bl	80141b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014198:	4b06      	ldr	r3, [pc, #24]	; (80141b4 <prvCheckTasksWaitingTermination+0x58>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1e1      	bne.n	8014164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141a0:	bf00      	nop
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	20007280 	.word	0x20007280
 80141b0:	200072ac 	.word	0x200072ac
 80141b4:	20007294 	.word	0x20007294

080141b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3354      	adds	r3, #84	; 0x54
 80141c4:	4618      	mov	r0, r3
 80141c6:	f003 fb89 	bl	80178dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d108      	bne.n	80141e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fe f8ef 	bl	80123bc <vPortFree>
				vPortFree( pxTCB );
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f7fe f8ec 	bl	80123bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80141e4:	e018      	b.n	8014218 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d103      	bne.n	80141f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f7fe f8e3 	bl	80123bc <vPortFree>
	}
 80141f6:	e00f      	b.n	8014218 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80141fe:	2b02      	cmp	r3, #2
 8014200:	d00a      	beq.n	8014218 <prvDeleteTCB+0x60>
	__asm volatile
 8014202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014206:	f383 8811 	msr	BASEPRI, r3
 801420a:	f3bf 8f6f 	isb	sy
 801420e:	f3bf 8f4f 	dsb	sy
 8014212:	60fb      	str	r3, [r7, #12]
}
 8014214:	bf00      	nop
 8014216:	e7fe      	b.n	8014216 <prvDeleteTCB+0x5e>
	}
 8014218:	bf00      	nop
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014220:	b480      	push	{r7}
 8014222:	b083      	sub	sp, #12
 8014224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014226:	4b0c      	ldr	r3, [pc, #48]	; (8014258 <prvResetNextTaskUnblockTime+0x38>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d104      	bne.n	801423a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014230:	4b0a      	ldr	r3, [pc, #40]	; (801425c <prvResetNextTaskUnblockTime+0x3c>)
 8014232:	f04f 32ff 	mov.w	r2, #4294967295
 8014236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014238:	e008      	b.n	801424c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801423a:	4b07      	ldr	r3, [pc, #28]	; (8014258 <prvResetNextTaskUnblockTime+0x38>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	68db      	ldr	r3, [r3, #12]
 8014242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	4a04      	ldr	r2, [pc, #16]	; (801425c <prvResetNextTaskUnblockTime+0x3c>)
 801424a:	6013      	str	r3, [r2, #0]
}
 801424c:	bf00      	nop
 801424e:	370c      	adds	r7, #12
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr
 8014258:	20007264 	.word	0x20007264
 801425c:	200072cc 	.word	0x200072cc

08014260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014266:	4b0b      	ldr	r3, [pc, #44]	; (8014294 <xTaskGetSchedulerState+0x34>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d102      	bne.n	8014274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801426e:	2301      	movs	r3, #1
 8014270:	607b      	str	r3, [r7, #4]
 8014272:	e008      	b.n	8014286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014274:	4b08      	ldr	r3, [pc, #32]	; (8014298 <xTaskGetSchedulerState+0x38>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d102      	bne.n	8014282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801427c:	2302      	movs	r3, #2
 801427e:	607b      	str	r3, [r7, #4]
 8014280:	e001      	b.n	8014286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014282:	2300      	movs	r3, #0
 8014284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014286:	687b      	ldr	r3, [r7, #4]
	}
 8014288:	4618      	mov	r0, r3
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr
 8014294:	200072b8 	.word	0x200072b8
 8014298:	200072d4 	.word	0x200072d4

0801429c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801429c:	b580      	push	{r7, lr}
 801429e:	b086      	sub	sp, #24
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80142a8:	2300      	movs	r3, #0
 80142aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d056      	beq.n	8014360 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80142b2:	4b2e      	ldr	r3, [pc, #184]	; (801436c <xTaskPriorityDisinherit+0xd0>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	693a      	ldr	r2, [r7, #16]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d00a      	beq.n	80142d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80142bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	60fb      	str	r3, [r7, #12]
}
 80142ce:	bf00      	nop
 80142d0:	e7fe      	b.n	80142d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80142d2:	693b      	ldr	r3, [r7, #16]
 80142d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d10a      	bne.n	80142f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80142da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142de:	f383 8811 	msr	BASEPRI, r3
 80142e2:	f3bf 8f6f 	isb	sy
 80142e6:	f3bf 8f4f 	dsb	sy
 80142ea:	60bb      	str	r3, [r7, #8]
}
 80142ec:	bf00      	nop
 80142ee:	e7fe      	b.n	80142ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142f4:	1e5a      	subs	r2, r3, #1
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014302:	429a      	cmp	r2, r3
 8014304:	d02c      	beq.n	8014360 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801430a:	2b00      	cmp	r3, #0
 801430c:	d128      	bne.n	8014360 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801430e:	693b      	ldr	r3, [r7, #16]
 8014310:	3304      	adds	r3, #4
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe f9fa 	bl	801270c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014324:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014330:	4b0f      	ldr	r3, [pc, #60]	; (8014370 <xTaskPriorityDisinherit+0xd4>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	429a      	cmp	r2, r3
 8014336:	d903      	bls.n	8014340 <xTaskPriorityDisinherit+0xa4>
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433c:	4a0c      	ldr	r2, [pc, #48]	; (8014370 <xTaskPriorityDisinherit+0xd4>)
 801433e:	6013      	str	r3, [r2, #0]
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014344:	4613      	mov	r3, r2
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	4413      	add	r3, r2
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	4a09      	ldr	r2, [pc, #36]	; (8014374 <xTaskPriorityDisinherit+0xd8>)
 801434e:	441a      	add	r2, r3
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	3304      	adds	r3, #4
 8014354:	4619      	mov	r1, r3
 8014356:	4610      	mov	r0, r2
 8014358:	f7fe f97b 	bl	8012652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801435c:	2301      	movs	r3, #1
 801435e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014360:	697b      	ldr	r3, [r7, #20]
	}
 8014362:	4618      	mov	r0, r3
 8014364:	3718      	adds	r7, #24
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	20006dd8 	.word	0x20006dd8
 8014370:	200072b4 	.word	0x200072b4
 8014374:	20006ddc 	.word	0x20006ddc

08014378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014382:	4b21      	ldr	r3, [pc, #132]	; (8014408 <prvAddCurrentTaskToDelayedList+0x90>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014388:	4b20      	ldr	r3, [pc, #128]	; (801440c <prvAddCurrentTaskToDelayedList+0x94>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	3304      	adds	r3, #4
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe f9bc 	bl	801270c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801439a:	d10a      	bne.n	80143b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d007      	beq.n	80143b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143a2:	4b1a      	ldr	r3, [pc, #104]	; (801440c <prvAddCurrentTaskToDelayedList+0x94>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	3304      	adds	r3, #4
 80143a8:	4619      	mov	r1, r3
 80143aa:	4819      	ldr	r0, [pc, #100]	; (8014410 <prvAddCurrentTaskToDelayedList+0x98>)
 80143ac:	f7fe f951 	bl	8012652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80143b0:	e026      	b.n	8014400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	4413      	add	r3, r2
 80143b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80143ba:	4b14      	ldr	r3, [pc, #80]	; (801440c <prvAddCurrentTaskToDelayedList+0x94>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	68ba      	ldr	r2, [r7, #8]
 80143c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80143c2:	68ba      	ldr	r2, [r7, #8]
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d209      	bcs.n	80143de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143ca:	4b12      	ldr	r3, [pc, #72]	; (8014414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	4b0f      	ldr	r3, [pc, #60]	; (801440c <prvAddCurrentTaskToDelayedList+0x94>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	3304      	adds	r3, #4
 80143d4:	4619      	mov	r1, r3
 80143d6:	4610      	mov	r0, r2
 80143d8:	f7fe f95f 	bl	801269a <vListInsert>
}
 80143dc:	e010      	b.n	8014400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143de:	4b0e      	ldr	r3, [pc, #56]	; (8014418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	4b0a      	ldr	r3, [pc, #40]	; (801440c <prvAddCurrentTaskToDelayedList+0x94>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3304      	adds	r3, #4
 80143e8:	4619      	mov	r1, r3
 80143ea:	4610      	mov	r0, r2
 80143ec:	f7fe f955 	bl	801269a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80143f0:	4b0a      	ldr	r3, [pc, #40]	; (801441c <prvAddCurrentTaskToDelayedList+0xa4>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d202      	bcs.n	8014400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80143fa:	4a08      	ldr	r2, [pc, #32]	; (801441c <prvAddCurrentTaskToDelayedList+0xa4>)
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	6013      	str	r3, [r2, #0]
}
 8014400:	bf00      	nop
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	200072b0 	.word	0x200072b0
 801440c:	20006dd8 	.word	0x20006dd8
 8014410:	20007298 	.word	0x20007298
 8014414:	20007268 	.word	0x20007268
 8014418:	20007264 	.word	0x20007264
 801441c:	200072cc 	.word	0x200072cc

08014420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	; 0x28
 8014424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014426:	2300      	movs	r3, #0
 8014428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801442a:	f000 fb07 	bl	8014a3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801442e:	4b1c      	ldr	r3, [pc, #112]	; (80144a0 <xTimerCreateTimerTask+0x80>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d021      	beq.n	801447a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014436:	2300      	movs	r3, #0
 8014438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801443a:	2300      	movs	r3, #0
 801443c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801443e:	1d3a      	adds	r2, r7, #4
 8014440:	f107 0108 	add.w	r1, r7, #8
 8014444:	f107 030c 	add.w	r3, r7, #12
 8014448:	4618      	mov	r0, r3
 801444a:	f7fd fed1 	bl	80121f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801444e:	6879      	ldr	r1, [r7, #4]
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	9202      	str	r2, [sp, #8]
 8014456:	9301      	str	r3, [sp, #4]
 8014458:	2302      	movs	r3, #2
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	2300      	movs	r3, #0
 801445e:	460a      	mov	r2, r1
 8014460:	4910      	ldr	r1, [pc, #64]	; (80144a4 <xTimerCreateTimerTask+0x84>)
 8014462:	4811      	ldr	r0, [pc, #68]	; (80144a8 <xTimerCreateTimerTask+0x88>)
 8014464:	f7ff f8b4 	bl	80135d0 <xTaskCreateStatic>
 8014468:	4603      	mov	r3, r0
 801446a:	4a10      	ldr	r2, [pc, #64]	; (80144ac <xTimerCreateTimerTask+0x8c>)
 801446c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801446e:	4b0f      	ldr	r3, [pc, #60]	; (80144ac <xTimerCreateTimerTask+0x8c>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d001      	beq.n	801447a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014476:	2301      	movs	r3, #1
 8014478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10a      	bne.n	8014496 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	613b      	str	r3, [r7, #16]
}
 8014492:	bf00      	nop
 8014494:	e7fe      	b.n	8014494 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014496:	697b      	ldr	r3, [r7, #20]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	20007308 	.word	0x20007308
 80144a4:	08019f34 	.word	0x08019f34
 80144a8:	080145e5 	.word	0x080145e5
 80144ac:	2000730c 	.word	0x2000730c

080144b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b08a      	sub	sp, #40	; 0x28
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
 80144bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80144be:	2300      	movs	r3, #0
 80144c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d10a      	bne.n	80144de <xTimerGenericCommand+0x2e>
	__asm volatile
 80144c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144cc:	f383 8811 	msr	BASEPRI, r3
 80144d0:	f3bf 8f6f 	isb	sy
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	623b      	str	r3, [r7, #32]
}
 80144da:	bf00      	nop
 80144dc:	e7fe      	b.n	80144dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80144de:	4b1a      	ldr	r3, [pc, #104]	; (8014548 <xTimerGenericCommand+0x98>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d02a      	beq.n	801453c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	2b05      	cmp	r3, #5
 80144f6:	dc18      	bgt.n	801452a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80144f8:	f7ff feb2 	bl	8014260 <xTaskGetSchedulerState>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b02      	cmp	r3, #2
 8014500:	d109      	bne.n	8014516 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014502:	4b11      	ldr	r3, [pc, #68]	; (8014548 <xTimerGenericCommand+0x98>)
 8014504:	6818      	ldr	r0, [r3, #0]
 8014506:	f107 0110 	add.w	r1, r7, #16
 801450a:	2300      	movs	r3, #0
 801450c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801450e:	f7fe fc77 	bl	8012e00 <xQueueGenericSend>
 8014512:	6278      	str	r0, [r7, #36]	; 0x24
 8014514:	e012      	b.n	801453c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014516:	4b0c      	ldr	r3, [pc, #48]	; (8014548 <xTimerGenericCommand+0x98>)
 8014518:	6818      	ldr	r0, [r3, #0]
 801451a:	f107 0110 	add.w	r1, r7, #16
 801451e:	2300      	movs	r3, #0
 8014520:	2200      	movs	r2, #0
 8014522:	f7fe fc6d 	bl	8012e00 <xQueueGenericSend>
 8014526:	6278      	str	r0, [r7, #36]	; 0x24
 8014528:	e008      	b.n	801453c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801452a:	4b07      	ldr	r3, [pc, #28]	; (8014548 <xTimerGenericCommand+0x98>)
 801452c:	6818      	ldr	r0, [r3, #0]
 801452e:	f107 0110 	add.w	r1, r7, #16
 8014532:	2300      	movs	r3, #0
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	f7fe fd61 	bl	8012ffc <xQueueGenericSendFromISR>
 801453a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801453e:	4618      	mov	r0, r3
 8014540:	3728      	adds	r7, #40	; 0x28
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	20007308 	.word	0x20007308

0801454c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b088      	sub	sp, #32
 8014550:	af02      	add	r7, sp, #8
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014556:	4b22      	ldr	r3, [pc, #136]	; (80145e0 <prvProcessExpiredTimer+0x94>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	3304      	adds	r3, #4
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe f8d1 	bl	801270c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014570:	f003 0304 	and.w	r3, r3, #4
 8014574:	2b00      	cmp	r3, #0
 8014576:	d022      	beq.n	80145be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	699a      	ldr	r2, [r3, #24]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	18d1      	adds	r1, r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	683a      	ldr	r2, [r7, #0]
 8014584:	6978      	ldr	r0, [r7, #20]
 8014586:	f000 f8d1 	bl	801472c <prvInsertTimerInActiveList>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d01f      	beq.n	80145d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014590:	2300      	movs	r3, #0
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	2300      	movs	r3, #0
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	2100      	movs	r1, #0
 801459a:	6978      	ldr	r0, [r7, #20]
 801459c:	f7ff ff88 	bl	80144b0 <xTimerGenericCommand>
 80145a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d113      	bne.n	80145d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80145a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ac:	f383 8811 	msr	BASEPRI, r3
 80145b0:	f3bf 8f6f 	isb	sy
 80145b4:	f3bf 8f4f 	dsb	sy
 80145b8:	60fb      	str	r3, [r7, #12]
}
 80145ba:	bf00      	nop
 80145bc:	e7fe      	b.n	80145bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145c4:	f023 0301 	bic.w	r3, r3, #1
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	6a1b      	ldr	r3, [r3, #32]
 80145d4:	6978      	ldr	r0, [r7, #20]
 80145d6:	4798      	blx	r3
}
 80145d8:	bf00      	nop
 80145da:	3718      	adds	r7, #24
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	20007300 	.word	0x20007300

080145e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80145ec:	f107 0308 	add.w	r3, r7, #8
 80145f0:	4618      	mov	r0, r3
 80145f2:	f000 f857 	bl	80146a4 <prvGetNextExpireTime>
 80145f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	4619      	mov	r1, r3
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f000 f803 	bl	8014608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014602:	f000 f8d5 	bl	80147b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014606:	e7f1      	b.n	80145ec <prvTimerTask+0x8>

08014608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014612:	f7ff fa39 	bl	8013a88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014616:	f107 0308 	add.w	r3, r7, #8
 801461a:	4618      	mov	r0, r3
 801461c:	f000 f866 	bl	80146ec <prvSampleTimeNow>
 8014620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d130      	bne.n	801468a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d10a      	bne.n	8014644 <prvProcessTimerOrBlockTask+0x3c>
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	429a      	cmp	r2, r3
 8014634:	d806      	bhi.n	8014644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014636:	f7ff fa35 	bl	8013aa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801463a:	68f9      	ldr	r1, [r7, #12]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f7ff ff85 	bl	801454c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014642:	e024      	b.n	801468e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d008      	beq.n	801465c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <prvProcessTimerOrBlockTask+0x90>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d101      	bne.n	8014658 <prvProcessTimerOrBlockTask+0x50>
 8014654:	2301      	movs	r3, #1
 8014656:	e000      	b.n	801465a <prvProcessTimerOrBlockTask+0x52>
 8014658:	2300      	movs	r3, #0
 801465a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801465c:	4b0f      	ldr	r3, [pc, #60]	; (801469c <prvProcessTimerOrBlockTask+0x94>)
 801465e:	6818      	ldr	r0, [r3, #0]
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	1ad3      	subs	r3, r2, r3
 8014666:	683a      	ldr	r2, [r7, #0]
 8014668:	4619      	mov	r1, r3
 801466a:	f7fe ff7d 	bl	8013568 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801466e:	f7ff fa19 	bl	8013aa4 <xTaskResumeAll>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d10a      	bne.n	801468e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014678:	4b09      	ldr	r3, [pc, #36]	; (80146a0 <prvProcessTimerOrBlockTask+0x98>)
 801467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801467e:	601a      	str	r2, [r3, #0]
 8014680:	f3bf 8f4f 	dsb	sy
 8014684:	f3bf 8f6f 	isb	sy
}
 8014688:	e001      	b.n	801468e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801468a:	f7ff fa0b 	bl	8013aa4 <xTaskResumeAll>
}
 801468e:	bf00      	nop
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20007304 	.word	0x20007304
 801469c:	20007308 	.word	0x20007308
 80146a0:	e000ed04 	.word	0xe000ed04

080146a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80146a4:	b480      	push	{r7}
 80146a6:	b085      	sub	sp, #20
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80146ac:	4b0e      	ldr	r3, [pc, #56]	; (80146e8 <prvGetNextExpireTime+0x44>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d101      	bne.n	80146ba <prvGetNextExpireTime+0x16>
 80146b6:	2201      	movs	r2, #1
 80146b8:	e000      	b.n	80146bc <prvGetNextExpireTime+0x18>
 80146ba:	2200      	movs	r2, #0
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d105      	bne.n	80146d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80146c8:	4b07      	ldr	r3, [pc, #28]	; (80146e8 <prvGetNextExpireTime+0x44>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	68db      	ldr	r3, [r3, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	e001      	b.n	80146d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80146d4:	2300      	movs	r3, #0
 80146d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80146d8:	68fb      	ldr	r3, [r7, #12]
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3714      	adds	r7, #20
 80146de:	46bd      	mov	sp, r7
 80146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e4:	4770      	bx	lr
 80146e6:	bf00      	nop
 80146e8:	20007300 	.word	0x20007300

080146ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80146f4:	f7ff fa74 	bl	8013be0 <xTaskGetTickCount>
 80146f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80146fa:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <prvSampleTimeNow+0x3c>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	429a      	cmp	r2, r3
 8014702:	d205      	bcs.n	8014710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014704:	f000 f936 	bl	8014974 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2201      	movs	r2, #1
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e002      	b.n	8014716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014716:	4a04      	ldr	r2, [pc, #16]	; (8014728 <prvSampleTimeNow+0x3c>)
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801471c:	68fb      	ldr	r3, [r7, #12]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3710      	adds	r7, #16
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	20007310 	.word	0x20007310

0801472c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
 8014738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801473a:	2300      	movs	r3, #0
 801473c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	68ba      	ldr	r2, [r7, #8]
 8014742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	68fa      	ldr	r2, [r7, #12]
 8014748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801474a:	68ba      	ldr	r2, [r7, #8]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	429a      	cmp	r2, r3
 8014750:	d812      	bhi.n	8014778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	1ad2      	subs	r2, r2, r3
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	699b      	ldr	r3, [r3, #24]
 801475c:	429a      	cmp	r2, r3
 801475e:	d302      	bcc.n	8014766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014760:	2301      	movs	r3, #1
 8014762:	617b      	str	r3, [r7, #20]
 8014764:	e01b      	b.n	801479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014766:	4b10      	ldr	r3, [pc, #64]	; (80147a8 <prvInsertTimerInActiveList+0x7c>)
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	3304      	adds	r3, #4
 801476e:	4619      	mov	r1, r3
 8014770:	4610      	mov	r0, r2
 8014772:	f7fd ff92 	bl	801269a <vListInsert>
 8014776:	e012      	b.n	801479e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	429a      	cmp	r2, r3
 801477e:	d206      	bcs.n	801478e <prvInsertTimerInActiveList+0x62>
 8014780:	68ba      	ldr	r2, [r7, #8]
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	429a      	cmp	r2, r3
 8014786:	d302      	bcc.n	801478e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014788:	2301      	movs	r3, #1
 801478a:	617b      	str	r3, [r7, #20]
 801478c:	e007      	b.n	801479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801478e:	4b07      	ldr	r3, [pc, #28]	; (80147ac <prvInsertTimerInActiveList+0x80>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	3304      	adds	r3, #4
 8014796:	4619      	mov	r1, r3
 8014798:	4610      	mov	r0, r2
 801479a:	f7fd ff7e 	bl	801269a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801479e:	697b      	ldr	r3, [r7, #20]
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3718      	adds	r7, #24
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	20007304 	.word	0x20007304
 80147ac:	20007300 	.word	0x20007300

080147b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b08e      	sub	sp, #56	; 0x38
 80147b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80147b6:	e0ca      	b.n	801494e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	da18      	bge.n	80147f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80147be:	1d3b      	adds	r3, r7, #4
 80147c0:	3304      	adds	r3, #4
 80147c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80147c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d10a      	bne.n	80147e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80147ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ce:	f383 8811 	msr	BASEPRI, r3
 80147d2:	f3bf 8f6f 	isb	sy
 80147d6:	f3bf 8f4f 	dsb	sy
 80147da:	61fb      	str	r3, [r7, #28]
}
 80147dc:	bf00      	nop
 80147de:	e7fe      	b.n	80147de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80147e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147e6:	6850      	ldr	r0, [r2, #4]
 80147e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ea:	6892      	ldr	r2, [r2, #8]
 80147ec:	4611      	mov	r1, r2
 80147ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f2c0 80aa 	blt.w	801494c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80147fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fe:	695b      	ldr	r3, [r3, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d004      	beq.n	801480e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014806:	3304      	adds	r3, #4
 8014808:	4618      	mov	r0, r3
 801480a:	f7fd ff7f 	bl	801270c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801480e:	463b      	mov	r3, r7
 8014810:	4618      	mov	r0, r3
 8014812:	f7ff ff6b 	bl	80146ec <prvSampleTimeNow>
 8014816:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b09      	cmp	r3, #9
 801481c:	f200 8097 	bhi.w	801494e <prvProcessReceivedCommands+0x19e>
 8014820:	a201      	add	r2, pc, #4	; (adr r2, 8014828 <prvProcessReceivedCommands+0x78>)
 8014822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014826:	bf00      	nop
 8014828:	08014851 	.word	0x08014851
 801482c:	08014851 	.word	0x08014851
 8014830:	08014851 	.word	0x08014851
 8014834:	080148c5 	.word	0x080148c5
 8014838:	080148d9 	.word	0x080148d9
 801483c:	08014923 	.word	0x08014923
 8014840:	08014851 	.word	0x08014851
 8014844:	08014851 	.word	0x08014851
 8014848:	080148c5 	.word	0x080148c5
 801484c:	080148d9 	.word	0x080148d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014856:	f043 0301 	orr.w	r3, r3, #1
 801485a:	b2da      	uxtb	r2, r3
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014866:	699b      	ldr	r3, [r3, #24]
 8014868:	18d1      	adds	r1, r2, r3
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801486e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014870:	f7ff ff5c 	bl	801472c <prvInsertTimerInActiveList>
 8014874:	4603      	mov	r3, r0
 8014876:	2b00      	cmp	r3, #0
 8014878:	d069      	beq.n	801494e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487c:	6a1b      	ldr	r3, [r3, #32]
 801487e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014888:	f003 0304 	and.w	r3, r3, #4
 801488c:	2b00      	cmp	r3, #0
 801488e:	d05e      	beq.n	801494e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014890:	68ba      	ldr	r2, [r7, #8]
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	699b      	ldr	r3, [r3, #24]
 8014896:	441a      	add	r2, r3
 8014898:	2300      	movs	r3, #0
 801489a:	9300      	str	r3, [sp, #0]
 801489c:	2300      	movs	r3, #0
 801489e:	2100      	movs	r1, #0
 80148a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148a2:	f7ff fe05 	bl	80144b0 <xTimerGenericCommand>
 80148a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80148a8:	6a3b      	ldr	r3, [r7, #32]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d14f      	bne.n	801494e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80148ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148b2:	f383 8811 	msr	BASEPRI, r3
 80148b6:	f3bf 8f6f 	isb	sy
 80148ba:	f3bf 8f4f 	dsb	sy
 80148be:	61bb      	str	r3, [r7, #24]
}
 80148c0:	bf00      	nop
 80148c2:	e7fe      	b.n	80148c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148ca:	f023 0301 	bic.w	r3, r3, #1
 80148ce:	b2da      	uxtb	r2, r3
 80148d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80148d6:	e03a      	b.n	801494e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80148d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148de:	f043 0301 	orr.w	r3, r3, #1
 80148e2:	b2da      	uxtb	r2, r3
 80148e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80148ea:	68ba      	ldr	r2, [r7, #8]
 80148ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80148f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f2:	699b      	ldr	r3, [r3, #24]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d10a      	bne.n	801490e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80148f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fc:	f383 8811 	msr	BASEPRI, r3
 8014900:	f3bf 8f6f 	isb	sy
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	617b      	str	r3, [r7, #20]
}
 801490a:	bf00      	nop
 801490c:	e7fe      	b.n	801490c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014910:	699a      	ldr	r2, [r3, #24]
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	18d1      	adds	r1, r2, r3
 8014916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801491a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801491c:	f7ff ff06 	bl	801472c <prvInsertTimerInActiveList>
					break;
 8014920:	e015      	b.n	801494e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014928:	f003 0302 	and.w	r3, r3, #2
 801492c:	2b00      	cmp	r3, #0
 801492e:	d103      	bne.n	8014938 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014932:	f7fd fd43 	bl	80123bc <vPortFree>
 8014936:	e00a      	b.n	801494e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801493e:	f023 0301 	bic.w	r3, r3, #1
 8014942:	b2da      	uxtb	r2, r3
 8014944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801494a:	e000      	b.n	801494e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801494c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801494e:	4b08      	ldr	r3, [pc, #32]	; (8014970 <prvProcessReceivedCommands+0x1c0>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	1d39      	adds	r1, r7, #4
 8014954:	2200      	movs	r2, #0
 8014956:	4618      	mov	r0, r3
 8014958:	f7fe fbec 	bl	8013134 <xQueueReceive>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	f47f af2a 	bne.w	80147b8 <prvProcessReceivedCommands+0x8>
	}
}
 8014964:	bf00      	nop
 8014966:	bf00      	nop
 8014968:	3730      	adds	r7, #48	; 0x30
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	20007308 	.word	0x20007308

08014974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b088      	sub	sp, #32
 8014978:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801497a:	e048      	b.n	8014a0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801497c:	4b2d      	ldr	r3, [pc, #180]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014986:	4b2b      	ldr	r3, [pc, #172]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	68db      	ldr	r3, [r3, #12]
 801498e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	3304      	adds	r3, #4
 8014994:	4618      	mov	r0, r3
 8014996:	f7fd feb9 	bl	801270c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6a1b      	ldr	r3, [r3, #32]
 801499e:	68f8      	ldr	r0, [r7, #12]
 80149a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149a8:	f003 0304 	and.w	r3, r3, #4
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d02e      	beq.n	8014a0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	699b      	ldr	r3, [r3, #24]
 80149b4:	693a      	ldr	r2, [r7, #16]
 80149b6:	4413      	add	r3, r2
 80149b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d90e      	bls.n	80149e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80149ce:	4b19      	ldr	r3, [pc, #100]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	3304      	adds	r3, #4
 80149d6:	4619      	mov	r1, r3
 80149d8:	4610      	mov	r0, r2
 80149da:	f7fd fe5e 	bl	801269a <vListInsert>
 80149de:	e016      	b.n	8014a0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80149e0:	2300      	movs	r3, #0
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	2300      	movs	r3, #0
 80149e6:	693a      	ldr	r2, [r7, #16]
 80149e8:	2100      	movs	r1, #0
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7ff fd60 	bl	80144b0 <xTimerGenericCommand>
 80149f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d10a      	bne.n	8014a0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	603b      	str	r3, [r7, #0]
}
 8014a0a:	bf00      	nop
 8014a0c:	e7fe      	b.n	8014a0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a0e:	4b09      	ldr	r3, [pc, #36]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d1b1      	bne.n	801497c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014a18:	4b06      	ldr	r3, [pc, #24]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014a1e:	4b06      	ldr	r3, [pc, #24]	; (8014a38 <prvSwitchTimerLists+0xc4>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4a04      	ldr	r2, [pc, #16]	; (8014a34 <prvSwitchTimerLists+0xc0>)
 8014a24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014a26:	4a04      	ldr	r2, [pc, #16]	; (8014a38 <prvSwitchTimerLists+0xc4>)
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	6013      	str	r3, [r2, #0]
}
 8014a2c:	bf00      	nop
 8014a2e:	3718      	adds	r7, #24
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	20007300 	.word	0x20007300
 8014a38:	20007304 	.word	0x20007304

08014a3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014a42:	f7fd ffb7 	bl	80129b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014a46:	4b15      	ldr	r3, [pc, #84]	; (8014a9c <prvCheckForValidListAndQueue+0x60>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d120      	bne.n	8014a90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014a4e:	4814      	ldr	r0, [pc, #80]	; (8014aa0 <prvCheckForValidListAndQueue+0x64>)
 8014a50:	f7fd fdd2 	bl	80125f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014a54:	4813      	ldr	r0, [pc, #76]	; (8014aa4 <prvCheckForValidListAndQueue+0x68>)
 8014a56:	f7fd fdcf 	bl	80125f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014a5a:	4b13      	ldr	r3, [pc, #76]	; (8014aa8 <prvCheckForValidListAndQueue+0x6c>)
 8014a5c:	4a10      	ldr	r2, [pc, #64]	; (8014aa0 <prvCheckForValidListAndQueue+0x64>)
 8014a5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014a60:	4b12      	ldr	r3, [pc, #72]	; (8014aac <prvCheckForValidListAndQueue+0x70>)
 8014a62:	4a10      	ldr	r2, [pc, #64]	; (8014aa4 <prvCheckForValidListAndQueue+0x68>)
 8014a64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014a66:	2300      	movs	r3, #0
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	4b11      	ldr	r3, [pc, #68]	; (8014ab0 <prvCheckForValidListAndQueue+0x74>)
 8014a6c:	4a11      	ldr	r2, [pc, #68]	; (8014ab4 <prvCheckForValidListAndQueue+0x78>)
 8014a6e:	2110      	movs	r1, #16
 8014a70:	200a      	movs	r0, #10
 8014a72:	f7fe f929 	bl	8012cc8 <xQueueGenericCreateStatic>
 8014a76:	4603      	mov	r3, r0
 8014a78:	4a08      	ldr	r2, [pc, #32]	; (8014a9c <prvCheckForValidListAndQueue+0x60>)
 8014a7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014a7c:	4b07      	ldr	r3, [pc, #28]	; (8014a9c <prvCheckForValidListAndQueue+0x60>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d005      	beq.n	8014a90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014a84:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <prvCheckForValidListAndQueue+0x60>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	490b      	ldr	r1, [pc, #44]	; (8014ab8 <prvCheckForValidListAndQueue+0x7c>)
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe fd42 	bl	8013514 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a90:	f7fd ffc0 	bl	8012a14 <vPortExitCritical>
}
 8014a94:	bf00      	nop
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20007308 	.word	0x20007308
 8014aa0:	200072d8 	.word	0x200072d8
 8014aa4:	200072ec 	.word	0x200072ec
 8014aa8:	20007300 	.word	0x20007300
 8014aac:	20007304 	.word	0x20007304
 8014ab0:	200073b4 	.word	0x200073b4
 8014ab4:	20007314 	.word	0x20007314
 8014ab8:	08019f3c 	.word	0x08019f3c

08014abc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b084      	sub	sp, #16
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014ac8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014acc:	f002 f906 	bl	8016cdc <USBD_static_malloc>
 8014ad0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d105      	bne.n	8014ae4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	e066      	b.n	8014bb2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	7c1b      	ldrb	r3, [r3, #16]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d119      	bne.n	8014b28 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014af8:	2202      	movs	r2, #2
 8014afa:	2181      	movs	r1, #129	; 0x81
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f001 ffca 	bl	8016a96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2201      	movs	r2, #1
 8014b06:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b0c:	2202      	movs	r2, #2
 8014b0e:	2101      	movs	r1, #1
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f001 ffc0 	bl	8016a96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2201      	movs	r2, #1
 8014b1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2210      	movs	r2, #16
 8014b22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014b26:	e016      	b.n	8014b56 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014b28:	2340      	movs	r3, #64	; 0x40
 8014b2a:	2202      	movs	r2, #2
 8014b2c:	2181      	movs	r1, #129	; 0x81
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f001 ffb1 	bl	8016a96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2201      	movs	r2, #1
 8014b38:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014b3a:	2340      	movs	r3, #64	; 0x40
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	2101      	movs	r1, #1
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f001 ffa8 	bl	8016a96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2201      	movs	r2, #1
 8014b4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2210      	movs	r2, #16
 8014b52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014b56:	2308      	movs	r3, #8
 8014b58:	2203      	movs	r2, #3
 8014b5a:	2182      	movs	r1, #130	; 0x82
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f001 ff9a 	bl	8016a96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2201      	movs	r2, #1
 8014b66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2200      	movs	r2, #0
 8014b78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	7c1b      	ldrb	r3, [r3, #16]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d109      	bne.n	8014ba0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b96:	2101      	movs	r1, #1
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f002 f86b 	bl	8016c74 <USBD_LL_PrepareReceive>
 8014b9e:	e007      	b.n	8014bb0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014ba6:	2340      	movs	r3, #64	; 0x40
 8014ba8:	2101      	movs	r1, #1
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f002 f862 	bl	8016c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3710      	adds	r7, #16
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bba:	b580      	push	{r7, lr}
 8014bbc:	b082      	sub	sp, #8
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014bc6:	2181      	movs	r1, #129	; 0x81
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f001 ff8a 	bl	8016ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014bd4:	2101      	movs	r1, #1
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f001 ff83 	bl	8016ae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2200      	movs	r2, #0
 8014be0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014be4:	2182      	movs	r1, #130	; 0x82
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f001 ff7b 	bl	8016ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d00e      	beq.n	8014c24 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c16:	4618      	mov	r0, r3
 8014c18:	f002 f86e 	bl	8016cf8 <USBD_static_free>
    pdev->pClassData = NULL;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014c24:	2300      	movs	r3, #0
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b086      	sub	sp, #24
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014c42:	2300      	movs	r3, #0
 8014c44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014c46:	2300      	movs	r3, #0
 8014c48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d101      	bne.n	8014c58 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014c54:	2303      	movs	r3, #3
 8014c56:	e0af      	b.n	8014db8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d03f      	beq.n	8014ce4 <USBD_CDC_Setup+0xb4>
 8014c64:	2b20      	cmp	r3, #32
 8014c66:	f040 809f 	bne.w	8014da8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	88db      	ldrh	r3, [r3, #6]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d02e      	beq.n	8014cd0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	b25b      	sxtb	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	da16      	bge.n	8014caa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	683a      	ldr	r2, [r7, #0]
 8014c86:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014c88:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	88d2      	ldrh	r2, [r2, #6]
 8014c8e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	88db      	ldrh	r3, [r3, #6]
 8014c94:	2b07      	cmp	r3, #7
 8014c96:	bf28      	it	cs
 8014c98:	2307      	movcs	r3, #7
 8014c9a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	89fa      	ldrh	r2, [r7, #14]
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f001 fae9 	bl	801627a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014ca8:	e085      	b.n	8014db6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	785a      	ldrb	r2, [r3, #1]
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	88db      	ldrh	r3, [r3, #6]
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014cc0:	6939      	ldr	r1, [r7, #16]
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	88db      	ldrh	r3, [r3, #6]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f001 fb02 	bl	80162d2 <USBD_CtlPrepareRx>
      break;
 8014cce:	e072      	b.n	8014db6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cd6:	689b      	ldr	r3, [r3, #8]
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	7850      	ldrb	r0, [r2, #1]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	6839      	ldr	r1, [r7, #0]
 8014ce0:	4798      	blx	r3
      break;
 8014ce2:	e068      	b.n	8014db6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	785b      	ldrb	r3, [r3, #1]
 8014ce8:	2b0b      	cmp	r3, #11
 8014cea:	d852      	bhi.n	8014d92 <USBD_CDC_Setup+0x162>
 8014cec:	a201      	add	r2, pc, #4	; (adr r2, 8014cf4 <USBD_CDC_Setup+0xc4>)
 8014cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cf2:	bf00      	nop
 8014cf4:	08014d25 	.word	0x08014d25
 8014cf8:	08014da1 	.word	0x08014da1
 8014cfc:	08014d93 	.word	0x08014d93
 8014d00:	08014d93 	.word	0x08014d93
 8014d04:	08014d93 	.word	0x08014d93
 8014d08:	08014d93 	.word	0x08014d93
 8014d0c:	08014d93 	.word	0x08014d93
 8014d10:	08014d93 	.word	0x08014d93
 8014d14:	08014d93 	.word	0x08014d93
 8014d18:	08014d93 	.word	0x08014d93
 8014d1c:	08014d4f 	.word	0x08014d4f
 8014d20:	08014d79 	.word	0x08014d79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	d107      	bne.n	8014d40 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014d30:	f107 030a 	add.w	r3, r7, #10
 8014d34:	2202      	movs	r2, #2
 8014d36:	4619      	mov	r1, r3
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f001 fa9e 	bl	801627a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d3e:	e032      	b.n	8014da6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014d40:	6839      	ldr	r1, [r7, #0]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f001 fa28 	bl	8016198 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d48:	2303      	movs	r3, #3
 8014d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8014d4c:	e02b      	b.n	8014da6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	2b03      	cmp	r3, #3
 8014d58:	d107      	bne.n	8014d6a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014d5a:	f107 030d 	add.w	r3, r7, #13
 8014d5e:	2201      	movs	r2, #1
 8014d60:	4619      	mov	r1, r3
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f001 fa89 	bl	801627a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d68:	e01d      	b.n	8014da6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014d6a:	6839      	ldr	r1, [r7, #0]
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f001 fa13 	bl	8016198 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d72:	2303      	movs	r3, #3
 8014d74:	75fb      	strb	r3, [r7, #23]
          break;
 8014d76:	e016      	b.n	8014da6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	2b03      	cmp	r3, #3
 8014d82:	d00f      	beq.n	8014da4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014d84:	6839      	ldr	r1, [r7, #0]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f001 fa06 	bl	8016198 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d8c:	2303      	movs	r3, #3
 8014d8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014d90:	e008      	b.n	8014da4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014d92:	6839      	ldr	r1, [r7, #0]
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f001 f9ff 	bl	8016198 <USBD_CtlError>
          ret = USBD_FAIL;
 8014d9a:	2303      	movs	r3, #3
 8014d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8014d9e:	e002      	b.n	8014da6 <USBD_CDC_Setup+0x176>
          break;
 8014da0:	bf00      	nop
 8014da2:	e008      	b.n	8014db6 <USBD_CDC_Setup+0x186>
          break;
 8014da4:	bf00      	nop
      }
      break;
 8014da6:	e006      	b.n	8014db6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f001 f9f4 	bl	8016198 <USBD_CtlError>
      ret = USBD_FAIL;
 8014db0:	2303      	movs	r3, #3
 8014db2:	75fb      	strb	r3, [r7, #23]
      break;
 8014db4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3718      	adds	r7, #24
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b084      	sub	sp, #16
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	460b      	mov	r3, r1
 8014dca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d101      	bne.n	8014de2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014dde:	2303      	movs	r3, #3
 8014de0:	e04f      	b.n	8014e82 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014de8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014dea:	78fa      	ldrb	r2, [r7, #3]
 8014dec:	6879      	ldr	r1, [r7, #4]
 8014dee:	4613      	mov	r3, r2
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4413      	add	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	440b      	add	r3, r1
 8014df8:	3318      	adds	r3, #24
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d029      	beq.n	8014e54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014e00:	78fa      	ldrb	r2, [r7, #3]
 8014e02:	6879      	ldr	r1, [r7, #4]
 8014e04:	4613      	mov	r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4413      	add	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	440b      	add	r3, r1
 8014e0e:	3318      	adds	r3, #24
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	78f9      	ldrb	r1, [r7, #3]
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	460b      	mov	r3, r1
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	1a5b      	subs	r3, r3, r1
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4403      	add	r3, r0
 8014e20:	3344      	adds	r3, #68	; 0x44
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	fbb2 f1f3 	udiv	r1, r2, r3
 8014e28:	fb03 f301 	mul.w	r3, r3, r1
 8014e2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d110      	bne.n	8014e54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014e32:	78fa      	ldrb	r2, [r7, #3]
 8014e34:	6879      	ldr	r1, [r7, #4]
 8014e36:	4613      	mov	r3, r2
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	4413      	add	r3, r2
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	440b      	add	r3, r1
 8014e40:	3318      	adds	r3, #24
 8014e42:	2200      	movs	r2, #0
 8014e44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014e46:	78f9      	ldrb	r1, [r7, #3]
 8014e48:	2300      	movs	r3, #0
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f001 fef0 	bl	8016c32 <USBD_LL_Transmit>
 8014e52:	e015      	b.n	8014e80 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	2200      	movs	r2, #0
 8014e58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e62:	691b      	ldr	r3, [r3, #16]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00b      	beq.n	8014e80 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e6e:	691b      	ldr	r3, [r3, #16]
 8014e70:	68ba      	ldr	r2, [r7, #8]
 8014e72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014e76:	68ba      	ldr	r2, [r7, #8]
 8014e78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014e7c:	78fa      	ldrb	r2, [r7, #3]
 8014e7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014e80:	2300      	movs	r3, #0
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3710      	adds	r7, #16
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}

08014e8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e8a:	b580      	push	{r7, lr}
 8014e8c:	b084      	sub	sp, #16
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	6078      	str	r0, [r7, #4]
 8014e92:	460b      	mov	r3, r1
 8014e94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014ea8:	2303      	movs	r3, #3
 8014eaa:	e015      	b.n	8014ed8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014eac:	78fb      	ldrb	r3, [r7, #3]
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f001 ff00 	bl	8016cb6 <USBD_LL_GetRxDataSize>
 8014eb6:	4602      	mov	r2, r0
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014ed6:	2300      	movs	r3, #0
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3710      	adds	r7, #16
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014eee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d101      	bne.n	8014efa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	e01b      	b.n	8014f32 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d015      	beq.n	8014f30 <USBD_CDC_EP0_RxReady+0x50>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014f0a:	2bff      	cmp	r3, #255	; 0xff
 8014f0c:	d010      	beq.n	8014f30 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f14:	689b      	ldr	r3, [r3, #8]
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014f1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014f1e:	68fa      	ldr	r2, [r7, #12]
 8014f20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014f24:	b292      	uxth	r2, r2
 8014f26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	22ff      	movs	r2, #255	; 0xff
 8014f2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014f30:	2300      	movs	r3, #0
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
	...

08014f3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2243      	movs	r2, #67	; 0x43
 8014f48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014f4a:	4b03      	ldr	r3, [pc, #12]	; (8014f58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	370c      	adds	r7, #12
 8014f50:	46bd      	mov	sp, r7
 8014f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f56:	4770      	bx	lr
 8014f58:	200000e0 	.word	0x200000e0

08014f5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2243      	movs	r2, #67	; 0x43
 8014f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014f6a:	4b03      	ldr	r3, [pc, #12]	; (8014f78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	370c      	adds	r7, #12
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr
 8014f78:	2000009c 	.word	0x2000009c

08014f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2243      	movs	r2, #67	; 0x43
 8014f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014f8a:	4b03      	ldr	r3, [pc, #12]	; (8014f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr
 8014f98:	20000124 	.word	0x20000124

08014f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	220a      	movs	r2, #10
 8014fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014faa:	4b03      	ldr	r3, [pc, #12]	; (8014fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr
 8014fb8:	20000058 	.word	0x20000058

08014fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
 8014fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014fcc:	2303      	movs	r3, #3
 8014fce:	e004      	b.n	8014fda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	683a      	ldr	r2, [r7, #0]
 8014fd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014fd8:	2300      	movs	r3, #0
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	370c      	adds	r7, #12
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe4:	4770      	bx	lr

08014fe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014fe6:	b480      	push	{r7}
 8014fe8:	b087      	sub	sp, #28
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	60f8      	str	r0, [r7, #12]
 8014fee:	60b9      	str	r1, [r7, #8]
 8014ff0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ff8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d101      	bne.n	8015004 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8015000:	2303      	movs	r3, #3
 8015002:	e008      	b.n	8015016 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	68ba      	ldr	r2, [r7, #8]
 8015008:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015014:	2300      	movs	r3, #0
}
 8015016:	4618      	mov	r0, r3
 8015018:	371c      	adds	r7, #28
 801501a:	46bd      	mov	sp, r7
 801501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015020:	4770      	bx	lr

08015022 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015022:	b480      	push	{r7}
 8015024:	b085      	sub	sp, #20
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
 801502a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015032:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d101      	bne.n	801503e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801503a:	2303      	movs	r3, #3
 801503c:	e004      	b.n	8015048 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	683a      	ldr	r2, [r7, #0]
 8015042:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3714      	adds	r7, #20
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr

08015054 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015062:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801506a:	2b00      	cmp	r3, #0
 801506c:	d101      	bne.n	8015072 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801506e:	2303      	movs	r3, #3
 8015070:	e016      	b.n	80150a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	7c1b      	ldrb	r3, [r3, #16]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d109      	bne.n	801508e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015084:	2101      	movs	r1, #1
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f001 fdf4 	bl	8016c74 <USBD_LL_PrepareReceive>
 801508c:	e007      	b.n	801509e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015094:	2340      	movs	r3, #64	; 0x40
 8015096:	2101      	movs	r1, #1
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f001 fdeb 	bl	8016c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801509e:	2300      	movs	r3, #0
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	4613      	mov	r3, r2
 80150b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d101      	bne.n	80150c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80150bc:	2303      	movs	r3, #3
 80150be:	e01f      	b.n	8015100 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	2200      	movs	r2, #0
 80150c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2200      	movs	r2, #0
 80150cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2200      	movs	r2, #0
 80150d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d003      	beq.n	80150e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	68ba      	ldr	r2, [r7, #8]
 80150e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2201      	movs	r2, #1
 80150ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	79fa      	ldrb	r2, [r7, #7]
 80150f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f001 fc67 	bl	80169c8 <USBD_LL_Init>
 80150fa:	4603      	mov	r3, r0
 80150fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80150fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8015100:	4618      	mov	r0, r3
 8015102:	3718      	adds	r7, #24
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015112:	2300      	movs	r3, #0
 8015114:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801511c:	2303      	movs	r3, #3
 801511e:	e016      	b.n	801514e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	683a      	ldr	r2, [r7, #0]
 8015124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015130:	2b00      	cmp	r3, #0
 8015132:	d00b      	beq.n	801514c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513c:	f107 020e 	add.w	r2, r7, #14
 8015140:	4610      	mov	r0, r2
 8015142:	4798      	blx	r3
 8015144:	4602      	mov	r2, r0
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801514c:	2300      	movs	r3, #0
}
 801514e:	4618      	mov	r0, r3
 8015150:	3710      	adds	r7, #16
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b082      	sub	sp, #8
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f001 fc7e 	bl	8016a60 <USBD_LL_Start>
 8015164:	4603      	mov	r3, r0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}

0801516e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801516e:	b480      	push	{r7}
 8015170:	b083      	sub	sp, #12
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015176:	2300      	movs	r3, #0
}
 8015178:	4618      	mov	r0, r3
 801517a:	370c      	adds	r7, #12
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	460b      	mov	r3, r1
 801518e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015190:	2303      	movs	r3, #3
 8015192:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801519a:	2b00      	cmp	r3, #0
 801519c:	d009      	beq.n	80151b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	78fa      	ldrb	r2, [r7, #3]
 80151a8:	4611      	mov	r1, r2
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	4798      	blx	r3
 80151ae:	4603      	mov	r3, r0
 80151b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	460b      	mov	r3, r1
 80151c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d007      	beq.n	80151e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	78fa      	ldrb	r2, [r7, #3]
 80151dc:	4611      	mov	r1, r2
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	4798      	blx	r3
  }

  return USBD_OK;
 80151e2:	2300      	movs	r3, #0
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3708      	adds	r7, #8
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151fc:	6839      	ldr	r1, [r7, #0]
 80151fe:	4618      	mov	r0, r3
 8015200:	f000 ff90 	bl	8016124 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2201      	movs	r2, #1
 8015208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015212:	461a      	mov	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015220:	f003 031f 	and.w	r3, r3, #31
 8015224:	2b02      	cmp	r3, #2
 8015226:	d01a      	beq.n	801525e <USBD_LL_SetupStage+0x72>
 8015228:	2b02      	cmp	r3, #2
 801522a:	d822      	bhi.n	8015272 <USBD_LL_SetupStage+0x86>
 801522c:	2b00      	cmp	r3, #0
 801522e:	d002      	beq.n	8015236 <USBD_LL_SetupStage+0x4a>
 8015230:	2b01      	cmp	r3, #1
 8015232:	d00a      	beq.n	801524a <USBD_LL_SetupStage+0x5e>
 8015234:	e01d      	b.n	8015272 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801523c:	4619      	mov	r1, r3
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f000 fa62 	bl	8015708 <USBD_StdDevReq>
 8015244:	4603      	mov	r3, r0
 8015246:	73fb      	strb	r3, [r7, #15]
      break;
 8015248:	e020      	b.n	801528c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 fac6 	bl	80157e4 <USBD_StdItfReq>
 8015258:	4603      	mov	r3, r0
 801525a:	73fb      	strb	r3, [r7, #15]
      break;
 801525c:	e016      	b.n	801528c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015264:	4619      	mov	r1, r3
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f000 fb05 	bl	8015876 <USBD_StdEPReq>
 801526c:	4603      	mov	r3, r0
 801526e:	73fb      	strb	r3, [r7, #15]
      break;
 8015270:	e00c      	b.n	801528c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801527c:	b2db      	uxtb	r3, r3
 801527e:	4619      	mov	r1, r3
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f001 fc4d 	bl	8016b20 <USBD_LL_StallEP>
 8015286:	4603      	mov	r3, r0
 8015288:	73fb      	strb	r3, [r7, #15]
      break;
 801528a:	bf00      	nop
  }

  return ret;
 801528c:	7bfb      	ldrb	r3, [r7, #15]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3710      	adds	r7, #16
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b086      	sub	sp, #24
 801529a:	af00      	add	r7, sp, #0
 801529c:	60f8      	str	r0, [r7, #12]
 801529e:	460b      	mov	r3, r1
 80152a0:	607a      	str	r2, [r7, #4]
 80152a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80152a4:	7afb      	ldrb	r3, [r7, #11]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d138      	bne.n	801531c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80152b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80152b8:	2b03      	cmp	r3, #3
 80152ba:	d14a      	bne.n	8015352 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	689a      	ldr	r2, [r3, #8]
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d913      	bls.n	80152f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	689a      	ldr	r2, [r3, #8]
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	1ad2      	subs	r2, r2, r3
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	68da      	ldr	r2, [r3, #12]
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	689b      	ldr	r3, [r3, #8]
 80152de:	4293      	cmp	r3, r2
 80152e0:	bf28      	it	cs
 80152e2:	4613      	movcs	r3, r2
 80152e4:	461a      	mov	r2, r3
 80152e6:	6879      	ldr	r1, [r7, #4]
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f001 f80f 	bl	801630c <USBD_CtlContinueRx>
 80152ee:	e030      	b.n	8015352 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	2b03      	cmp	r3, #3
 80152fa:	d10b      	bne.n	8015314 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d005      	beq.n	8015314 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801530e:	691b      	ldr	r3, [r3, #16]
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f001 f80a 	bl	801632e <USBD_CtlSendStatus>
 801531a:	e01a      	b.n	8015352 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015322:	b2db      	uxtb	r3, r3
 8015324:	2b03      	cmp	r3, #3
 8015326:	d114      	bne.n	8015352 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801532e:	699b      	ldr	r3, [r3, #24]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00e      	beq.n	8015352 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801533a:	699b      	ldr	r3, [r3, #24]
 801533c:	7afa      	ldrb	r2, [r7, #11]
 801533e:	4611      	mov	r1, r2
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	4798      	blx	r3
 8015344:	4603      	mov	r3, r0
 8015346:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015348:	7dfb      	ldrb	r3, [r7, #23]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d001      	beq.n	8015352 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801534e:	7dfb      	ldrb	r3, [r7, #23]
 8015350:	e000      	b.n	8015354 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8015352:	2300      	movs	r3, #0
}
 8015354:	4618      	mov	r0, r3
 8015356:	3718      	adds	r7, #24
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b086      	sub	sp, #24
 8015360:	af00      	add	r7, sp, #0
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	460b      	mov	r3, r1
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801536a:	7afb      	ldrb	r3, [r7, #11]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d16b      	bne.n	8015448 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	3314      	adds	r3, #20
 8015374:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801537c:	2b02      	cmp	r3, #2
 801537e:	d156      	bne.n	801542e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	689a      	ldr	r2, [r3, #8]
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	429a      	cmp	r2, r3
 801538a:	d914      	bls.n	80153b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	689a      	ldr	r2, [r3, #8]
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	1ad2      	subs	r2, r2, r3
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	689b      	ldr	r3, [r3, #8]
 801539e:	461a      	mov	r2, r3
 80153a0:	6879      	ldr	r1, [r7, #4]
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	f000 ff84 	bl	80162b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153a8:	2300      	movs	r3, #0
 80153aa:	2200      	movs	r2, #0
 80153ac:	2100      	movs	r1, #0
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f001 fc60 	bl	8016c74 <USBD_LL_PrepareReceive>
 80153b4:	e03b      	b.n	801542e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	68da      	ldr	r2, [r3, #12]
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	689b      	ldr	r3, [r3, #8]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d11c      	bne.n	80153fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	685a      	ldr	r2, [r3, #4]
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d316      	bcc.n	80153fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	685a      	ldr	r2, [r3, #4]
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80153d8:	429a      	cmp	r2, r3
 80153da:	d20f      	bcs.n	80153fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80153dc:	2200      	movs	r2, #0
 80153de:	2100      	movs	r1, #0
 80153e0:	68f8      	ldr	r0, [r7, #12]
 80153e2:	f000 ff65 	bl	80162b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2200      	movs	r2, #0
 80153ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153ee:	2300      	movs	r3, #0
 80153f0:	2200      	movs	r2, #0
 80153f2:	2100      	movs	r1, #0
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f001 fc3d 	bl	8016c74 <USBD_LL_PrepareReceive>
 80153fa:	e018      	b.n	801542e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015402:	b2db      	uxtb	r3, r3
 8015404:	2b03      	cmp	r3, #3
 8015406:	d10b      	bne.n	8015420 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801540e:	68db      	ldr	r3, [r3, #12]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d005      	beq.n	8015420 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	68f8      	ldr	r0, [r7, #12]
 801541e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015420:	2180      	movs	r1, #128	; 0x80
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f001 fb7c 	bl	8016b20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f000 ff93 	bl	8016354 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015434:	2b01      	cmp	r3, #1
 8015436:	d122      	bne.n	801547e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f7ff fe98 	bl	801516e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2200      	movs	r2, #0
 8015442:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015446:	e01a      	b.n	801547e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2b03      	cmp	r3, #3
 8015452:	d114      	bne.n	801547e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801545a:	695b      	ldr	r3, [r3, #20]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d00e      	beq.n	801547e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015466:	695b      	ldr	r3, [r3, #20]
 8015468:	7afa      	ldrb	r2, [r7, #11]
 801546a:	4611      	mov	r1, r2
 801546c:	68f8      	ldr	r0, [r7, #12]
 801546e:	4798      	blx	r3
 8015470:	4603      	mov	r3, r0
 8015472:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015474:	7dfb      	ldrb	r3, [r7, #23]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d001      	beq.n	801547e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801547a:	7dfb      	ldrb	r3, [r7, #23]
 801547c:	e000      	b.n	8015480 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801547e:	2300      	movs	r3, #0
}
 8015480:	4618      	mov	r0, r3
 8015482:	3718      	adds	r7, #24
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}

08015488 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2201      	movs	r2, #1
 8015494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d101      	bne.n	80154bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80154b8:	2303      	movs	r3, #3
 80154ba:	e02f      	b.n	801551c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d00f      	beq.n	80154e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d009      	beq.n	80154e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	6852      	ldr	r2, [r2, #4]
 80154de:	b2d2      	uxtb	r2, r2
 80154e0:	4611      	mov	r1, r2
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154e6:	2340      	movs	r3, #64	; 0x40
 80154e8:	2200      	movs	r2, #0
 80154ea:	2100      	movs	r1, #0
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f001 fad2 	bl	8016a96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2201      	movs	r2, #1
 80154f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2240      	movs	r2, #64	; 0x40
 80154fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015502:	2340      	movs	r3, #64	; 0x40
 8015504:	2200      	movs	r2, #0
 8015506:	2180      	movs	r1, #128	; 0x80
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f001 fac4 	bl	8016a96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2201      	movs	r2, #1
 8015512:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2240      	movs	r2, #64	; 0x40
 8015518:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801551a:	2300      	movs	r3, #0
}
 801551c:	4618      	mov	r0, r3
 801551e:	3708      	adds	r7, #8
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	460b      	mov	r3, r1
 801552e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	78fa      	ldrb	r2, [r7, #3]
 8015534:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015536:	2300      	movs	r3, #0
}
 8015538:	4618      	mov	r0, r3
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr

08015544 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015552:	b2da      	uxtb	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2204      	movs	r2, #4
 801555e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015562:	2300      	movs	r3, #0
}
 8015564:	4618      	mov	r0, r3
 8015566:	370c      	adds	r7, #12
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2b04      	cmp	r3, #4
 8015582:	d106      	bne.n	8015592 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801558a:	b2da      	uxtb	r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	370c      	adds	r7, #12
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr

080155a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d101      	bne.n	80155b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80155b2:	2303      	movs	r3, #3
 80155b4:	e012      	b.n	80155dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b03      	cmp	r3, #3
 80155c0:	d10b      	bne.n	80155da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c8:	69db      	ldr	r3, [r3, #28]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d005      	beq.n	80155da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d4:	69db      	ldr	r3, [r3, #28]
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155da:	2300      	movs	r3, #0
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	460b      	mov	r3, r1
 80155ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d101      	bne.n	80155fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80155fa:	2303      	movs	r3, #3
 80155fc:	e014      	b.n	8015628 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015604:	b2db      	uxtb	r3, r3
 8015606:	2b03      	cmp	r3, #3
 8015608:	d10d      	bne.n	8015626 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015610:	6a1b      	ldr	r3, [r3, #32]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d007      	beq.n	8015626 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801561c:	6a1b      	ldr	r3, [r3, #32]
 801561e:	78fa      	ldrb	r2, [r7, #3]
 8015620:	4611      	mov	r1, r2
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015626:	2300      	movs	r3, #0
}
 8015628:	4618      	mov	r0, r3
 801562a:	3708      	adds	r7, #8
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	460b      	mov	r3, r1
 801563a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015642:	2b00      	cmp	r3, #0
 8015644:	d101      	bne.n	801564a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8015646:	2303      	movs	r3, #3
 8015648:	e014      	b.n	8015674 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015650:	b2db      	uxtb	r3, r3
 8015652:	2b03      	cmp	r3, #3
 8015654:	d10d      	bne.n	8015672 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565e:	2b00      	cmp	r3, #0
 8015660:	d007      	beq.n	8015672 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566a:	78fa      	ldrb	r2, [r7, #3]
 801566c:	4611      	mov	r1, r2
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015672:	2300      	movs	r3, #0
}
 8015674:	4618      	mov	r0, r3
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801567c:	b480      	push	{r7}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b082      	sub	sp, #8
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d009      	beq.n	80156c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	6852      	ldr	r2, [r2, #4]
 80156b8:	b2d2      	uxtb	r2, r2
 80156ba:	4611      	mov	r1, r2
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	4798      	blx	r3
  }

  return USBD_OK;
 80156c0:	2300      	movs	r3, #0
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80156ca:	b480      	push	{r7}
 80156cc:	b087      	sub	sp, #28
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	3301      	adds	r3, #1
 80156e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	781b      	ldrb	r3, [r3, #0]
 80156e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80156e8:	8a3b      	ldrh	r3, [r7, #16]
 80156ea:	021b      	lsls	r3, r3, #8
 80156ec:	b21a      	sxth	r2, r3
 80156ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80156f2:	4313      	orrs	r3, r2
 80156f4:	b21b      	sxth	r3, r3
 80156f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80156f8:	89fb      	ldrh	r3, [r7, #14]
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	371c      	adds	r7, #28
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr
	...

08015708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b084      	sub	sp, #16
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015712:	2300      	movs	r3, #0
 8015714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801571e:	2b40      	cmp	r3, #64	; 0x40
 8015720:	d005      	beq.n	801572e <USBD_StdDevReq+0x26>
 8015722:	2b40      	cmp	r3, #64	; 0x40
 8015724:	d853      	bhi.n	80157ce <USBD_StdDevReq+0xc6>
 8015726:	2b00      	cmp	r3, #0
 8015728:	d00b      	beq.n	8015742 <USBD_StdDevReq+0x3a>
 801572a:	2b20      	cmp	r3, #32
 801572c:	d14f      	bne.n	80157ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015734:	689b      	ldr	r3, [r3, #8]
 8015736:	6839      	ldr	r1, [r7, #0]
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	4798      	blx	r3
 801573c:	4603      	mov	r3, r0
 801573e:	73fb      	strb	r3, [r7, #15]
      break;
 8015740:	e04a      	b.n	80157d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	785b      	ldrb	r3, [r3, #1]
 8015746:	2b09      	cmp	r3, #9
 8015748:	d83b      	bhi.n	80157c2 <USBD_StdDevReq+0xba>
 801574a:	a201      	add	r2, pc, #4	; (adr r2, 8015750 <USBD_StdDevReq+0x48>)
 801574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015750:	080157a5 	.word	0x080157a5
 8015754:	080157b9 	.word	0x080157b9
 8015758:	080157c3 	.word	0x080157c3
 801575c:	080157af 	.word	0x080157af
 8015760:	080157c3 	.word	0x080157c3
 8015764:	08015783 	.word	0x08015783
 8015768:	08015779 	.word	0x08015779
 801576c:	080157c3 	.word	0x080157c3
 8015770:	0801579b 	.word	0x0801579b
 8015774:	0801578d 	.word	0x0801578d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015778:	6839      	ldr	r1, [r7, #0]
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f000 f9de 	bl	8015b3c <USBD_GetDescriptor>
          break;
 8015780:	e024      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015782:	6839      	ldr	r1, [r7, #0]
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f000 fb43 	bl	8015e10 <USBD_SetAddress>
          break;
 801578a:	e01f      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801578c:	6839      	ldr	r1, [r7, #0]
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 fb82 	bl	8015e98 <USBD_SetConfig>
 8015794:	4603      	mov	r3, r0
 8015796:	73fb      	strb	r3, [r7, #15]
          break;
 8015798:	e018      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801579a:	6839      	ldr	r1, [r7, #0]
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f000 fc21 	bl	8015fe4 <USBD_GetConfig>
          break;
 80157a2:	e013      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157a4:	6839      	ldr	r1, [r7, #0]
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fc52 	bl	8016050 <USBD_GetStatus>
          break;
 80157ac:	e00e      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157ae:	6839      	ldr	r1, [r7, #0]
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f000 fc81 	bl	80160b8 <USBD_SetFeature>
          break;
 80157b6:	e009      	b.n	80157cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80157b8:	6839      	ldr	r1, [r7, #0]
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f000 fc90 	bl	80160e0 <USBD_ClrFeature>
          break;
 80157c0:	e004      	b.n	80157cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80157c2:	6839      	ldr	r1, [r7, #0]
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f000 fce7 	bl	8016198 <USBD_CtlError>
          break;
 80157ca:	bf00      	nop
      }
      break;
 80157cc:	e004      	b.n	80157d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80157ce:	6839      	ldr	r1, [r7, #0]
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 fce1 	bl	8016198 <USBD_CtlError>
      break;
 80157d6:	bf00      	nop
  }

  return ret;
 80157d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop

080157e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80157ee:	2300      	movs	r3, #0
 80157f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157fa:	2b40      	cmp	r3, #64	; 0x40
 80157fc:	d005      	beq.n	801580a <USBD_StdItfReq+0x26>
 80157fe:	2b40      	cmp	r3, #64	; 0x40
 8015800:	d82f      	bhi.n	8015862 <USBD_StdItfReq+0x7e>
 8015802:	2b00      	cmp	r3, #0
 8015804:	d001      	beq.n	801580a <USBD_StdItfReq+0x26>
 8015806:	2b20      	cmp	r3, #32
 8015808:	d12b      	bne.n	8015862 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015810:	b2db      	uxtb	r3, r3
 8015812:	3b01      	subs	r3, #1
 8015814:	2b02      	cmp	r3, #2
 8015816:	d81d      	bhi.n	8015854 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	889b      	ldrh	r3, [r3, #4]
 801581c:	b2db      	uxtb	r3, r3
 801581e:	2b01      	cmp	r3, #1
 8015820:	d813      	bhi.n	801584a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015828:	689b      	ldr	r3, [r3, #8]
 801582a:	6839      	ldr	r1, [r7, #0]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	4798      	blx	r3
 8015830:	4603      	mov	r3, r0
 8015832:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	88db      	ldrh	r3, [r3, #6]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d110      	bne.n	801585e <USBD_StdItfReq+0x7a>
 801583c:	7bfb      	ldrb	r3, [r7, #15]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d10d      	bne.n	801585e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f000 fd73 	bl	801632e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015848:	e009      	b.n	801585e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801584a:	6839      	ldr	r1, [r7, #0]
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f000 fca3 	bl	8016198 <USBD_CtlError>
          break;
 8015852:	e004      	b.n	801585e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8015854:	6839      	ldr	r1, [r7, #0]
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f000 fc9e 	bl	8016198 <USBD_CtlError>
          break;
 801585c:	e000      	b.n	8015860 <USBD_StdItfReq+0x7c>
          break;
 801585e:	bf00      	nop
      }
      break;
 8015860:	e004      	b.n	801586c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8015862:	6839      	ldr	r1, [r7, #0]
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f000 fc97 	bl	8016198 <USBD_CtlError>
      break;
 801586a:	bf00      	nop
  }

  return ret;
 801586c:	7bfb      	ldrb	r3, [r7, #15]
}
 801586e:	4618      	mov	r0, r3
 8015870:	3710      	adds	r7, #16
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b084      	sub	sp, #16
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
 801587e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015880:	2300      	movs	r3, #0
 8015882:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	889b      	ldrh	r3, [r3, #4]
 8015888:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015892:	2b40      	cmp	r3, #64	; 0x40
 8015894:	d007      	beq.n	80158a6 <USBD_StdEPReq+0x30>
 8015896:	2b40      	cmp	r3, #64	; 0x40
 8015898:	f200 8145 	bhi.w	8015b26 <USBD_StdEPReq+0x2b0>
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00c      	beq.n	80158ba <USBD_StdEPReq+0x44>
 80158a0:	2b20      	cmp	r3, #32
 80158a2:	f040 8140 	bne.w	8015b26 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ac:	689b      	ldr	r3, [r3, #8]
 80158ae:	6839      	ldr	r1, [r7, #0]
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	4798      	blx	r3
 80158b4:	4603      	mov	r3, r0
 80158b6:	73fb      	strb	r3, [r7, #15]
      break;
 80158b8:	e13a      	b.n	8015b30 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	785b      	ldrb	r3, [r3, #1]
 80158be:	2b03      	cmp	r3, #3
 80158c0:	d007      	beq.n	80158d2 <USBD_StdEPReq+0x5c>
 80158c2:	2b03      	cmp	r3, #3
 80158c4:	f300 8129 	bgt.w	8015b1a <USBD_StdEPReq+0x2a4>
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d07f      	beq.n	80159cc <USBD_StdEPReq+0x156>
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d03c      	beq.n	801594a <USBD_StdEPReq+0xd4>
 80158d0:	e123      	b.n	8015b1a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	2b02      	cmp	r3, #2
 80158dc:	d002      	beq.n	80158e4 <USBD_StdEPReq+0x6e>
 80158de:	2b03      	cmp	r3, #3
 80158e0:	d016      	beq.n	8015910 <USBD_StdEPReq+0x9a>
 80158e2:	e02c      	b.n	801593e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158e4:	7bbb      	ldrb	r3, [r7, #14]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d00d      	beq.n	8015906 <USBD_StdEPReq+0x90>
 80158ea:	7bbb      	ldrb	r3, [r7, #14]
 80158ec:	2b80      	cmp	r3, #128	; 0x80
 80158ee:	d00a      	beq.n	8015906 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158f0:	7bbb      	ldrb	r3, [r7, #14]
 80158f2:	4619      	mov	r1, r3
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f001 f913 	bl	8016b20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158fa:	2180      	movs	r1, #128	; 0x80
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f001 f90f 	bl	8016b20 <USBD_LL_StallEP>
 8015902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015904:	e020      	b.n	8015948 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8015906:	6839      	ldr	r1, [r7, #0]
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f000 fc45 	bl	8016198 <USBD_CtlError>
              break;
 801590e:	e01b      	b.n	8015948 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	885b      	ldrh	r3, [r3, #2]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d10e      	bne.n	8015936 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015918:	7bbb      	ldrb	r3, [r7, #14]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00b      	beq.n	8015936 <USBD_StdEPReq+0xc0>
 801591e:	7bbb      	ldrb	r3, [r7, #14]
 8015920:	2b80      	cmp	r3, #128	; 0x80
 8015922:	d008      	beq.n	8015936 <USBD_StdEPReq+0xc0>
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	88db      	ldrh	r3, [r3, #6]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d104      	bne.n	8015936 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801592c:	7bbb      	ldrb	r3, [r7, #14]
 801592e:	4619      	mov	r1, r3
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f001 f8f5 	bl	8016b20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f000 fcf9 	bl	801632e <USBD_CtlSendStatus>

              break;
 801593c:	e004      	b.n	8015948 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801593e:	6839      	ldr	r1, [r7, #0]
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fc29 	bl	8016198 <USBD_CtlError>
              break;
 8015946:	bf00      	nop
          }
          break;
 8015948:	e0ec      	b.n	8015b24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015950:	b2db      	uxtb	r3, r3
 8015952:	2b02      	cmp	r3, #2
 8015954:	d002      	beq.n	801595c <USBD_StdEPReq+0xe6>
 8015956:	2b03      	cmp	r3, #3
 8015958:	d016      	beq.n	8015988 <USBD_StdEPReq+0x112>
 801595a:	e030      	b.n	80159be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801595c:	7bbb      	ldrb	r3, [r7, #14]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00d      	beq.n	801597e <USBD_StdEPReq+0x108>
 8015962:	7bbb      	ldrb	r3, [r7, #14]
 8015964:	2b80      	cmp	r3, #128	; 0x80
 8015966:	d00a      	beq.n	801597e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015968:	7bbb      	ldrb	r3, [r7, #14]
 801596a:	4619      	mov	r1, r3
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f001 f8d7 	bl	8016b20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015972:	2180      	movs	r1, #128	; 0x80
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f001 f8d3 	bl	8016b20 <USBD_LL_StallEP>
 801597a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801597c:	e025      	b.n	80159ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f000 fc09 	bl	8016198 <USBD_CtlError>
              break;
 8015986:	e020      	b.n	80159ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	885b      	ldrh	r3, [r3, #2]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d11b      	bne.n	80159c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015990:	7bbb      	ldrb	r3, [r7, #14]
 8015992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015996:	2b00      	cmp	r3, #0
 8015998:	d004      	beq.n	80159a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801599a:	7bbb      	ldrb	r3, [r7, #14]
 801599c:	4619      	mov	r1, r3
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f001 f8dd 	bl	8016b5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 fcc2 	bl	801632e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159b0:	689b      	ldr	r3, [r3, #8]
 80159b2:	6839      	ldr	r1, [r7, #0]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	4798      	blx	r3
 80159b8:	4603      	mov	r3, r0
 80159ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80159bc:	e004      	b.n	80159c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80159be:	6839      	ldr	r1, [r7, #0]
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f000 fbe9 	bl	8016198 <USBD_CtlError>
              break;
 80159c6:	e000      	b.n	80159ca <USBD_StdEPReq+0x154>
              break;
 80159c8:	bf00      	nop
          }
          break;
 80159ca:	e0ab      	b.n	8015b24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	2b02      	cmp	r3, #2
 80159d6:	d002      	beq.n	80159de <USBD_StdEPReq+0x168>
 80159d8:	2b03      	cmp	r3, #3
 80159da:	d032      	beq.n	8015a42 <USBD_StdEPReq+0x1cc>
 80159dc:	e097      	b.n	8015b0e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159de:	7bbb      	ldrb	r3, [r7, #14]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d007      	beq.n	80159f4 <USBD_StdEPReq+0x17e>
 80159e4:	7bbb      	ldrb	r3, [r7, #14]
 80159e6:	2b80      	cmp	r3, #128	; 0x80
 80159e8:	d004      	beq.n	80159f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80159ea:	6839      	ldr	r1, [r7, #0]
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 fbd3 	bl	8016198 <USBD_CtlError>
                break;
 80159f2:	e091      	b.n	8015b18 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	da0b      	bge.n	8015a14 <USBD_StdEPReq+0x19e>
 80159fc:	7bbb      	ldrb	r3, [r7, #14]
 80159fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a02:	4613      	mov	r3, r2
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	4413      	add	r3, r2
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	3310      	adds	r3, #16
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	4413      	add	r3, r2
 8015a10:	3304      	adds	r3, #4
 8015a12:	e00b      	b.n	8015a2c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a14:	7bbb      	ldrb	r3, [r7, #14]
 8015a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	4413      	add	r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a26:	687a      	ldr	r2, [r7, #4]
 8015a28:	4413      	add	r3, r2
 8015a2a:	3304      	adds	r3, #4
 8015a2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2200      	movs	r2, #0
 8015a32:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	2202      	movs	r2, #2
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 fc1d 	bl	801627a <USBD_CtlSendData>
              break;
 8015a40:	e06a      	b.n	8015b18 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	da11      	bge.n	8015a6e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a4a:	7bbb      	ldrb	r3, [r7, #14]
 8015a4c:	f003 020f 	and.w	r2, r3, #15
 8015a50:	6879      	ldr	r1, [r7, #4]
 8015a52:	4613      	mov	r3, r2
 8015a54:	009b      	lsls	r3, r3, #2
 8015a56:	4413      	add	r3, r2
 8015a58:	009b      	lsls	r3, r3, #2
 8015a5a:	440b      	add	r3, r1
 8015a5c:	3324      	adds	r3, #36	; 0x24
 8015a5e:	881b      	ldrh	r3, [r3, #0]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d117      	bne.n	8015a94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015a64:	6839      	ldr	r1, [r7, #0]
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f000 fb96 	bl	8016198 <USBD_CtlError>
                  break;
 8015a6c:	e054      	b.n	8015b18 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	f003 020f 	and.w	r2, r3, #15
 8015a74:	6879      	ldr	r1, [r7, #4]
 8015a76:	4613      	mov	r3, r2
 8015a78:	009b      	lsls	r3, r3, #2
 8015a7a:	4413      	add	r3, r2
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	440b      	add	r3, r1
 8015a80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a84:	881b      	ldrh	r3, [r3, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d104      	bne.n	8015a94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015a8a:	6839      	ldr	r1, [r7, #0]
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f000 fb83 	bl	8016198 <USBD_CtlError>
                  break;
 8015a92:	e041      	b.n	8015b18 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	da0b      	bge.n	8015ab4 <USBD_StdEPReq+0x23e>
 8015a9c:	7bbb      	ldrb	r3, [r7, #14]
 8015a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	4413      	add	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	3310      	adds	r3, #16
 8015aac:	687a      	ldr	r2, [r7, #4]
 8015aae:	4413      	add	r3, r2
 8015ab0:	3304      	adds	r3, #4
 8015ab2:	e00b      	b.n	8015acc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ab4:	7bbb      	ldrb	r3, [r7, #14]
 8015ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aba:	4613      	mov	r3, r2
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	4413      	add	r3, r2
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	4413      	add	r3, r2
 8015aca:	3304      	adds	r3, #4
 8015acc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d002      	beq.n	8015ada <USBD_StdEPReq+0x264>
 8015ad4:	7bbb      	ldrb	r3, [r7, #14]
 8015ad6:	2b80      	cmp	r3, #128	; 0x80
 8015ad8:	d103      	bne.n	8015ae2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	2200      	movs	r2, #0
 8015ade:	601a      	str	r2, [r3, #0]
 8015ae0:	e00e      	b.n	8015b00 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f001 f858 	bl	8016b9c <USBD_LL_IsStallEP>
 8015aec:	4603      	mov	r3, r0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d003      	beq.n	8015afa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	2201      	movs	r2, #1
 8015af6:	601a      	str	r2, [r3, #0]
 8015af8:	e002      	b.n	8015b00 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	2200      	movs	r2, #0
 8015afe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	2202      	movs	r2, #2
 8015b04:	4619      	mov	r1, r3
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 fbb7 	bl	801627a <USBD_CtlSendData>
              break;
 8015b0c:	e004      	b.n	8015b18 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015b0e:	6839      	ldr	r1, [r7, #0]
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 fb41 	bl	8016198 <USBD_CtlError>
              break;
 8015b16:	bf00      	nop
          }
          break;
 8015b18:	e004      	b.n	8015b24 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015b1a:	6839      	ldr	r1, [r7, #0]
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 fb3b 	bl	8016198 <USBD_CtlError>
          break;
 8015b22:	bf00      	nop
      }
      break;
 8015b24:	e004      	b.n	8015b30 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015b26:	6839      	ldr	r1, [r7, #0]
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f000 fb35 	bl	8016198 <USBD_CtlError>
      break;
 8015b2e:	bf00      	nop
  }

  return ret;
 8015b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
	...

08015b3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b46:	2300      	movs	r3, #0
 8015b48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	885b      	ldrh	r3, [r3, #2]
 8015b56:	0a1b      	lsrs	r3, r3, #8
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	3b01      	subs	r3, #1
 8015b5c:	2b06      	cmp	r3, #6
 8015b5e:	f200 8128 	bhi.w	8015db2 <USBD_GetDescriptor+0x276>
 8015b62:	a201      	add	r2, pc, #4	; (adr r2, 8015b68 <USBD_GetDescriptor+0x2c>)
 8015b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b68:	08015b85 	.word	0x08015b85
 8015b6c:	08015b9d 	.word	0x08015b9d
 8015b70:	08015bdd 	.word	0x08015bdd
 8015b74:	08015db3 	.word	0x08015db3
 8015b78:	08015db3 	.word	0x08015db3
 8015b7c:	08015d53 	.word	0x08015d53
 8015b80:	08015d7f 	.word	0x08015d7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	7c12      	ldrb	r2, [r2, #16]
 8015b90:	f107 0108 	add.w	r1, r7, #8
 8015b94:	4610      	mov	r0, r2
 8015b96:	4798      	blx	r3
 8015b98:	60f8      	str	r0, [r7, #12]
      break;
 8015b9a:	e112      	b.n	8015dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	7c1b      	ldrb	r3, [r3, #16]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d10d      	bne.n	8015bc0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bac:	f107 0208 	add.w	r2, r7, #8
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	4798      	blx	r3
 8015bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	3301      	adds	r3, #1
 8015bba:	2202      	movs	r2, #2
 8015bbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bbe:	e100      	b.n	8015dc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bc8:	f107 0208 	add.w	r2, r7, #8
 8015bcc:	4610      	mov	r0, r2
 8015bce:	4798      	blx	r3
 8015bd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	2202      	movs	r2, #2
 8015bd8:	701a      	strb	r2, [r3, #0]
      break;
 8015bda:	e0f2      	b.n	8015dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	885b      	ldrh	r3, [r3, #2]
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	2b05      	cmp	r3, #5
 8015be4:	f200 80ac 	bhi.w	8015d40 <USBD_GetDescriptor+0x204>
 8015be8:	a201      	add	r2, pc, #4	; (adr r2, 8015bf0 <USBD_GetDescriptor+0xb4>)
 8015bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bee:	bf00      	nop
 8015bf0:	08015c09 	.word	0x08015c09
 8015bf4:	08015c3d 	.word	0x08015c3d
 8015bf8:	08015c71 	.word	0x08015c71
 8015bfc:	08015ca5 	.word	0x08015ca5
 8015c00:	08015cd9 	.word	0x08015cd9
 8015c04:	08015d0d 	.word	0x08015d0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00b      	beq.n	8015c2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	7c12      	ldrb	r2, [r2, #16]
 8015c20:	f107 0108 	add.w	r1, r7, #8
 8015c24:	4610      	mov	r0, r2
 8015c26:	4798      	blx	r3
 8015c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c2a:	e091      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c2c:	6839      	ldr	r1, [r7, #0]
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 fab2 	bl	8016198 <USBD_CtlError>
            err++;
 8015c34:	7afb      	ldrb	r3, [r7, #11]
 8015c36:	3301      	adds	r3, #1
 8015c38:	72fb      	strb	r3, [r7, #11]
          break;
 8015c3a:	e089      	b.n	8015d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00b      	beq.n	8015c60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	7c12      	ldrb	r2, [r2, #16]
 8015c54:	f107 0108 	add.w	r1, r7, #8
 8015c58:	4610      	mov	r0, r2
 8015c5a:	4798      	blx	r3
 8015c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c5e:	e077      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c60:	6839      	ldr	r1, [r7, #0]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fa98 	bl	8016198 <USBD_CtlError>
            err++;
 8015c68:	7afb      	ldrb	r3, [r7, #11]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c6e:	e06f      	b.n	8015d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d00b      	beq.n	8015c94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	7c12      	ldrb	r2, [r2, #16]
 8015c88:	f107 0108 	add.w	r1, r7, #8
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	4798      	blx	r3
 8015c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c92:	e05d      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c94:	6839      	ldr	r1, [r7, #0]
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 fa7e 	bl	8016198 <USBD_CtlError>
            err++;
 8015c9c:	7afb      	ldrb	r3, [r7, #11]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ca2:	e055      	b.n	8015d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015caa:	691b      	ldr	r3, [r3, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00b      	beq.n	8015cc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cb6:	691b      	ldr	r3, [r3, #16]
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	7c12      	ldrb	r2, [r2, #16]
 8015cbc:	f107 0108 	add.w	r1, r7, #8
 8015cc0:	4610      	mov	r0, r2
 8015cc2:	4798      	blx	r3
 8015cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cc6:	e043      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cc8:	6839      	ldr	r1, [r7, #0]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f000 fa64 	bl	8016198 <USBD_CtlError>
            err++;
 8015cd0:	7afb      	ldrb	r3, [r7, #11]
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8015cd6:	e03b      	b.n	8015d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cea:	695b      	ldr	r3, [r3, #20]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	7c12      	ldrb	r2, [r2, #16]
 8015cf0:	f107 0108 	add.w	r1, r7, #8
 8015cf4:	4610      	mov	r0, r2
 8015cf6:	4798      	blx	r3
 8015cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cfa:	e029      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 fa4a 	bl	8016198 <USBD_CtlError>
            err++;
 8015d04:	7afb      	ldrb	r3, [r7, #11]
 8015d06:	3301      	adds	r3, #1
 8015d08:	72fb      	strb	r3, [r7, #11]
          break;
 8015d0a:	e021      	b.n	8015d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d12:	699b      	ldr	r3, [r3, #24]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d00b      	beq.n	8015d30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1e:	699b      	ldr	r3, [r3, #24]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	7c12      	ldrb	r2, [r2, #16]
 8015d24:	f107 0108 	add.w	r1, r7, #8
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
 8015d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d2e:	e00f      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d30:	6839      	ldr	r1, [r7, #0]
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 fa30 	bl	8016198 <USBD_CtlError>
            err++;
 8015d38:	7afb      	ldrb	r3, [r7, #11]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d3e:	e007      	b.n	8015d50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fa28 	bl	8016198 <USBD_CtlError>
          err++;
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015d4e:	bf00      	nop
      }
      break;
 8015d50:	e037      	b.n	8015dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	7c1b      	ldrb	r3, [r3, #16]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d109      	bne.n	8015d6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d62:	f107 0208 	add.w	r2, r7, #8
 8015d66:	4610      	mov	r0, r2
 8015d68:	4798      	blx	r3
 8015d6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d6c:	e029      	b.n	8015dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d6e:	6839      	ldr	r1, [r7, #0]
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 fa11 	bl	8016198 <USBD_CtlError>
        err++;
 8015d76:	7afb      	ldrb	r3, [r7, #11]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015d7c:	e021      	b.n	8015dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	7c1b      	ldrb	r3, [r3, #16]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d10d      	bne.n	8015da2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d8e:	f107 0208 	add.w	r2, r7, #8
 8015d92:	4610      	mov	r0, r2
 8015d94:	4798      	blx	r3
 8015d96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	2207      	movs	r2, #7
 8015d9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015da0:	e00f      	b.n	8015dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f000 f9f7 	bl	8016198 <USBD_CtlError>
        err++;
 8015daa:	7afb      	ldrb	r3, [r7, #11]
 8015dac:	3301      	adds	r3, #1
 8015dae:	72fb      	strb	r3, [r7, #11]
      break;
 8015db0:	e007      	b.n	8015dc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 f9ef 	bl	8016198 <USBD_CtlError>
      err++;
 8015dba:	7afb      	ldrb	r3, [r7, #11]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8015dc0:	bf00      	nop
  }

  if (err != 0U)
 8015dc2:	7afb      	ldrb	r3, [r7, #11]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d11e      	bne.n	8015e06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	88db      	ldrh	r3, [r3, #6]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d016      	beq.n	8015dfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015dd0:	893b      	ldrh	r3, [r7, #8]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00e      	beq.n	8015df4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	88da      	ldrh	r2, [r3, #6]
 8015dda:	893b      	ldrh	r3, [r7, #8]
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	bf28      	it	cs
 8015de0:	4613      	movcs	r3, r2
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015de6:	893b      	ldrh	r3, [r7, #8]
 8015de8:	461a      	mov	r2, r3
 8015dea:	68f9      	ldr	r1, [r7, #12]
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f000 fa44 	bl	801627a <USBD_CtlSendData>
 8015df2:	e009      	b.n	8015e08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 f9ce 	bl	8016198 <USBD_CtlError>
 8015dfc:	e004      	b.n	8015e08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 fa95 	bl	801632e <USBD_CtlSendStatus>
 8015e04:	e000      	b.n	8015e08 <USBD_GetDescriptor+0x2cc>
    return;
 8015e06:	bf00      	nop
  }
}
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop

08015e10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	889b      	ldrh	r3, [r3, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d131      	bne.n	8015e86 <USBD_SetAddress+0x76>
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	88db      	ldrh	r3, [r3, #6]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d12d      	bne.n	8015e86 <USBD_SetAddress+0x76>
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	885b      	ldrh	r3, [r3, #2]
 8015e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e30:	d829      	bhi.n	8015e86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	885b      	ldrh	r3, [r3, #2]
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d104      	bne.n	8015e54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f000 f9a3 	bl	8016198 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e52:	e01d      	b.n	8015e90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	7bfa      	ldrb	r2, [r7, #15]
 8015e58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e5c:	7bfb      	ldrb	r3, [r7, #15]
 8015e5e:	4619      	mov	r1, r3
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f000 fec7 	bl	8016bf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 fa61 	bl	801632e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d004      	beq.n	8015e7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2202      	movs	r2, #2
 8015e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e7a:	e009      	b.n	8015e90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2201      	movs	r2, #1
 8015e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e84:	e004      	b.n	8015e90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 f985 	bl	8016198 <USBD_CtlError>
  }
}
 8015e8e:	bf00      	nop
 8015e90:	bf00      	nop
 8015e92:	3710      	adds	r7, #16
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	885b      	ldrh	r3, [r3, #2]
 8015eaa:	b2da      	uxtb	r2, r3
 8015eac:	4b4c      	ldr	r3, [pc, #304]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015eae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015eb0:	4b4b      	ldr	r3, [pc, #300]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b01      	cmp	r3, #1
 8015eb6:	d905      	bls.n	8015ec4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015eb8:	6839      	ldr	r1, [r7, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 f96c 	bl	8016198 <USBD_CtlError>
    return USBD_FAIL;
 8015ec0:	2303      	movs	r3, #3
 8015ec2:	e088      	b.n	8015fd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	2b02      	cmp	r3, #2
 8015ece:	d002      	beq.n	8015ed6 <USBD_SetConfig+0x3e>
 8015ed0:	2b03      	cmp	r3, #3
 8015ed2:	d025      	beq.n	8015f20 <USBD_SetConfig+0x88>
 8015ed4:	e071      	b.n	8015fba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ed6:	4b42      	ldr	r3, [pc, #264]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d01c      	beq.n	8015f18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015ede:	4b40      	ldr	r3, [pc, #256]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ee8:	4b3d      	ldr	r3, [pc, #244]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	4619      	mov	r1, r3
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff f948 	bl	8015184 <USBD_SetClassConfig>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ef8:	7bfb      	ldrb	r3, [r7, #15]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d004      	beq.n	8015f08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 f949 	bl	8016198 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f06:	e065      	b.n	8015fd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f000 fa10 	bl	801632e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2203      	movs	r2, #3
 8015f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f16:	e05d      	b.n	8015fd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f000 fa08 	bl	801632e <USBD_CtlSendStatus>
      break;
 8015f1e:	e059      	b.n	8015fd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f20:	4b2f      	ldr	r3, [pc, #188]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d112      	bne.n	8015f4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2202      	movs	r2, #2
 8015f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f30:	4b2b      	ldr	r3, [pc, #172]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	461a      	mov	r2, r3
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f3a:	4b29      	ldr	r3, [pc, #164]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f7ff f93b 	bl	80151bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 f9f1 	bl	801632e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f4c:	e042      	b.n	8015fd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015f4e:	4b24      	ldr	r3, [pc, #144]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	461a      	mov	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d02a      	beq.n	8015fb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	4619      	mov	r1, r3
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f7ff f929 	bl	80151bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f6a:	4b1d      	ldr	r3, [pc, #116]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f74:	4b1a      	ldr	r3, [pc, #104]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	4619      	mov	r1, r3
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f7ff f902 	bl	8015184 <USBD_SetClassConfig>
 8015f80:	4603      	mov	r3, r0
 8015f82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f84:	7bfb      	ldrb	r3, [r7, #15]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d00f      	beq.n	8015faa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 f903 	bl	8016198 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	4619      	mov	r1, r3
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f7ff f90e 	bl	80151bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2202      	movs	r2, #2
 8015fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fa8:	e014      	b.n	8015fd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 f9bf 	bl	801632e <USBD_CtlSendStatus>
      break;
 8015fb0:	e010      	b.n	8015fd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 f9bb 	bl	801632e <USBD_CtlSendStatus>
      break;
 8015fb8:	e00c      	b.n	8015fd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015fba:	6839      	ldr	r1, [r7, #0]
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 f8eb 	bl	8016198 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fc2:	4b07      	ldr	r3, [pc, #28]	; (8015fe0 <USBD_SetConfig+0x148>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7ff f8f7 	bl	80151bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fce:	2303      	movs	r3, #3
 8015fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8015fd2:	bf00      	nop
  }

  return ret;
 8015fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	20007404 	.word	0x20007404

08015fe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	88db      	ldrh	r3, [r3, #6]
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d004      	beq.n	8016000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f8cd 	bl	8016198 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015ffe:	e023      	b.n	8016048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016006:	b2db      	uxtb	r3, r3
 8016008:	2b02      	cmp	r3, #2
 801600a:	dc02      	bgt.n	8016012 <USBD_GetConfig+0x2e>
 801600c:	2b00      	cmp	r3, #0
 801600e:	dc03      	bgt.n	8016018 <USBD_GetConfig+0x34>
 8016010:	e015      	b.n	801603e <USBD_GetConfig+0x5a>
 8016012:	2b03      	cmp	r3, #3
 8016014:	d00b      	beq.n	801602e <USBD_GetConfig+0x4a>
 8016016:	e012      	b.n	801603e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2200      	movs	r2, #0
 801601c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	3308      	adds	r3, #8
 8016022:	2201      	movs	r2, #1
 8016024:	4619      	mov	r1, r3
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f000 f927 	bl	801627a <USBD_CtlSendData>
        break;
 801602c:	e00c      	b.n	8016048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	3304      	adds	r3, #4
 8016032:	2201      	movs	r2, #1
 8016034:	4619      	mov	r1, r3
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 f91f 	bl	801627a <USBD_CtlSendData>
        break;
 801603c:	e004      	b.n	8016048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801603e:	6839      	ldr	r1, [r7, #0]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 f8a9 	bl	8016198 <USBD_CtlError>
        break;
 8016046:	bf00      	nop
}
 8016048:	bf00      	nop
 801604a:	3708      	adds	r7, #8
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016060:	b2db      	uxtb	r3, r3
 8016062:	3b01      	subs	r3, #1
 8016064:	2b02      	cmp	r3, #2
 8016066:	d81e      	bhi.n	80160a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	88db      	ldrh	r3, [r3, #6]
 801606c:	2b02      	cmp	r3, #2
 801606e:	d004      	beq.n	801607a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016070:	6839      	ldr	r1, [r7, #0]
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 f890 	bl	8016198 <USBD_CtlError>
        break;
 8016078:	e01a      	b.n	80160b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2201      	movs	r2, #1
 801607e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016086:	2b00      	cmp	r3, #0
 8016088:	d005      	beq.n	8016096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	68db      	ldr	r3, [r3, #12]
 801608e:	f043 0202 	orr.w	r2, r3, #2
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	330c      	adds	r3, #12
 801609a:	2202      	movs	r2, #2
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f000 f8eb 	bl	801627a <USBD_CtlSendData>
      break;
 80160a4:	e004      	b.n	80160b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160a6:	6839      	ldr	r1, [r7, #0]
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 f875 	bl	8016198 <USBD_CtlError>
      break;
 80160ae:	bf00      	nop
  }
}
 80160b0:	bf00      	nop
 80160b2:	3708      	adds	r7, #8
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	885b      	ldrh	r3, [r3, #2]
 80160c6:	2b01      	cmp	r3, #1
 80160c8:	d106      	bne.n	80160d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	2201      	movs	r2, #1
 80160ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 f92b 	bl	801632e <USBD_CtlSendStatus>
  }
}
 80160d8:	bf00      	nop
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	3b01      	subs	r3, #1
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	d80b      	bhi.n	8016110 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	885b      	ldrh	r3, [r3, #2]
 80160fc:	2b01      	cmp	r3, #1
 80160fe:	d10c      	bne.n	801611a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2200      	movs	r2, #0
 8016104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 f910 	bl	801632e <USBD_CtlSendStatus>
      }
      break;
 801610e:	e004      	b.n	801611a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016110:	6839      	ldr	r1, [r7, #0]
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 f840 	bl	8016198 <USBD_CtlError>
      break;
 8016118:	e000      	b.n	801611c <USBD_ClrFeature+0x3c>
      break;
 801611a:	bf00      	nop
  }
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b084      	sub	sp, #16
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	781a      	ldrb	r2, [r3, #0]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	3301      	adds	r3, #1
 801613e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	781a      	ldrb	r2, [r3, #0]
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	3301      	adds	r3, #1
 801614c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	f7ff fabb 	bl	80156ca <SWAPBYTE>
 8016154:	4603      	mov	r3, r0
 8016156:	461a      	mov	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	3301      	adds	r3, #1
 8016160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3301      	adds	r3, #1
 8016166:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f7ff faae 	bl	80156ca <SWAPBYTE>
 801616e:	4603      	mov	r3, r0
 8016170:	461a      	mov	r2, r3
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	3301      	adds	r3, #1
 8016180:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f7ff faa1 	bl	80156ca <SWAPBYTE>
 8016188:	4603      	mov	r3, r0
 801618a:	461a      	mov	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	80da      	strh	r2, [r3, #6]
}
 8016190:	bf00      	nop
 8016192:	3710      	adds	r7, #16
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161a2:	2180      	movs	r1, #128	; 0x80
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 fcbb 	bl	8016b20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161aa:	2100      	movs	r1, #0
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 fcb7 	bl	8016b20 <USBD_LL_StallEP>
}
 80161b2:	bf00      	nop
 80161b4:	3708      	adds	r7, #8
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}

080161ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b086      	sub	sp, #24
 80161be:	af00      	add	r7, sp, #0
 80161c0:	60f8      	str	r0, [r7, #12]
 80161c2:	60b9      	str	r1, [r7, #8]
 80161c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161c6:	2300      	movs	r3, #0
 80161c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d036      	beq.n	801623e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80161d4:	6938      	ldr	r0, [r7, #16]
 80161d6:	f000 f836 	bl	8016246 <USBD_GetLen>
 80161da:	4603      	mov	r3, r0
 80161dc:	3301      	adds	r3, #1
 80161de:	b29b      	uxth	r3, r3
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80161e8:	7dfb      	ldrb	r3, [r7, #23]
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	4413      	add	r3, r2
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	7812      	ldrb	r2, [r2, #0]
 80161f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80161f4:	7dfb      	ldrb	r3, [r7, #23]
 80161f6:	3301      	adds	r3, #1
 80161f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80161fa:	7dfb      	ldrb	r3, [r7, #23]
 80161fc:	68ba      	ldr	r2, [r7, #8]
 80161fe:	4413      	add	r3, r2
 8016200:	2203      	movs	r2, #3
 8016202:	701a      	strb	r2, [r3, #0]
  idx++;
 8016204:	7dfb      	ldrb	r3, [r7, #23]
 8016206:	3301      	adds	r3, #1
 8016208:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801620a:	e013      	b.n	8016234 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801620c:	7dfb      	ldrb	r3, [r7, #23]
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	4413      	add	r3, r2
 8016212:	693a      	ldr	r2, [r7, #16]
 8016214:	7812      	ldrb	r2, [r2, #0]
 8016216:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	3301      	adds	r3, #1
 801621c:	613b      	str	r3, [r7, #16]
    idx++;
 801621e:	7dfb      	ldrb	r3, [r7, #23]
 8016220:	3301      	adds	r3, #1
 8016222:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016224:	7dfb      	ldrb	r3, [r7, #23]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	4413      	add	r3, r2
 801622a:	2200      	movs	r2, #0
 801622c:	701a      	strb	r2, [r3, #0]
    idx++;
 801622e:	7dfb      	ldrb	r3, [r7, #23]
 8016230:	3301      	adds	r3, #1
 8016232:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	781b      	ldrb	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1e7      	bne.n	801620c <USBD_GetString+0x52>
 801623c:	e000      	b.n	8016240 <USBD_GetString+0x86>
    return;
 801623e:	bf00      	nop
  }
}
 8016240:	3718      	adds	r7, #24
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}

08016246 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016246:	b480      	push	{r7}
 8016248:	b085      	sub	sp, #20
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801624e:	2300      	movs	r3, #0
 8016250:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016256:	e005      	b.n	8016264 <USBD_GetLen+0x1e>
  {
    len++;
 8016258:	7bfb      	ldrb	r3, [r7, #15]
 801625a:	3301      	adds	r3, #1
 801625c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	3301      	adds	r3, #1
 8016262:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d1f5      	bne.n	8016258 <USBD_GetLen+0x12>
  }

  return len;
 801626c:	7bfb      	ldrb	r3, [r7, #15]
}
 801626e:	4618      	mov	r0, r3
 8016270:	3714      	adds	r7, #20
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr

0801627a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801627a:	b580      	push	{r7, lr}
 801627c:	b084      	sub	sp, #16
 801627e:	af00      	add	r7, sp, #0
 8016280:	60f8      	str	r0, [r7, #12]
 8016282:	60b9      	str	r1, [r7, #8]
 8016284:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2202      	movs	r2, #2
 801628a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	68ba      	ldr	r2, [r7, #8]
 801629e:	2100      	movs	r1, #0
 80162a0:	68f8      	ldr	r0, [r7, #12]
 80162a2:	f000 fcc6 	bl	8016c32 <USBD_LL_Transmit>

  return USBD_OK;
 80162a6:	2300      	movs	r3, #0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	68ba      	ldr	r2, [r7, #8]
 80162c0:	2100      	movs	r1, #0
 80162c2:	68f8      	ldr	r0, [r7, #12]
 80162c4:	f000 fcb5 	bl	8016c32 <USBD_LL_Transmit>

  return USBD_OK;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3710      	adds	r7, #16
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}

080162d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b084      	sub	sp, #16
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	60f8      	str	r0, [r7, #12]
 80162da:	60b9      	str	r1, [r7, #8]
 80162dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2203      	movs	r2, #3
 80162e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	687a      	ldr	r2, [r7, #4]
 80162f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	2100      	movs	r1, #0
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f000 fcb9 	bl	8016c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016302:	2300      	movs	r3, #0
}
 8016304:	4618      	mov	r0, r3
 8016306:	3710      	adds	r7, #16
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	60f8      	str	r0, [r7, #12]
 8016314:	60b9      	str	r1, [r7, #8]
 8016316:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	68ba      	ldr	r2, [r7, #8]
 801631c:	2100      	movs	r1, #0
 801631e:	68f8      	ldr	r0, [r7, #12]
 8016320:	f000 fca8 	bl	8016c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016324:	2300      	movs	r3, #0
}
 8016326:	4618      	mov	r0, r3
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801632e:	b580      	push	{r7, lr}
 8016330:	b082      	sub	sp, #8
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	2204      	movs	r2, #4
 801633a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801633e:	2300      	movs	r3, #0
 8016340:	2200      	movs	r2, #0
 8016342:	2100      	movs	r1, #0
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f000 fc74 	bl	8016c32 <USBD_LL_Transmit>

  return USBD_OK;
 801634a:	2300      	movs	r3, #0
}
 801634c:	4618      	mov	r0, r3
 801634e:	3708      	adds	r7, #8
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2205      	movs	r2, #5
 8016360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016364:	2300      	movs	r3, #0
 8016366:	2200      	movs	r2, #0
 8016368:	2100      	movs	r1, #0
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 fc82 	bl	8016c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016370:	2300      	movs	r3, #0
}
 8016372:	4618      	mov	r0, r3
 8016374:	3708      	adds	r7, #8
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}
	...

0801637c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016380:	2200      	movs	r2, #0
 8016382:	4912      	ldr	r1, [pc, #72]	; (80163cc <MX_USB_DEVICE_Init+0x50>)
 8016384:	4812      	ldr	r0, [pc, #72]	; (80163d0 <MX_USB_DEVICE_Init+0x54>)
 8016386:	f7fe fe8f 	bl	80150a8 <USBD_Init>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d001      	beq.n	8016394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016390:	f7ed f8ec 	bl	800356c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016394:	490f      	ldr	r1, [pc, #60]	; (80163d4 <MX_USB_DEVICE_Init+0x58>)
 8016396:	480e      	ldr	r0, [pc, #56]	; (80163d0 <MX_USB_DEVICE_Init+0x54>)
 8016398:	f7fe feb6 	bl	8015108 <USBD_RegisterClass>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d001      	beq.n	80163a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163a2:	f7ed f8e3 	bl	800356c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163a6:	490c      	ldr	r1, [pc, #48]	; (80163d8 <MX_USB_DEVICE_Init+0x5c>)
 80163a8:	4809      	ldr	r0, [pc, #36]	; (80163d0 <MX_USB_DEVICE_Init+0x54>)
 80163aa:	f7fe fe07 	bl	8014fbc <USBD_CDC_RegisterInterface>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d001      	beq.n	80163b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163b4:	f7ed f8da 	bl	800356c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163b8:	4805      	ldr	r0, [pc, #20]	; (80163d0 <MX_USB_DEVICE_Init+0x54>)
 80163ba:	f7fe fecc 	bl	8015156 <USBD_Start>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d001      	beq.n	80163c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163c4:	f7ed f8d2 	bl	800356c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163c8:	bf00      	nop
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	2000017c 	.word	0x2000017c
 80163d0:	20008694 	.word	0x20008694
 80163d4:	20000064 	.word	0x20000064
 80163d8:	20000168 	.word	0x20000168

080163dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80163e0:	2200      	movs	r2, #0
 80163e2:	4905      	ldr	r1, [pc, #20]	; (80163f8 <CDC_Init_FS+0x1c>)
 80163e4:	4805      	ldr	r0, [pc, #20]	; (80163fc <CDC_Init_FS+0x20>)
 80163e6:	f7fe fdfe 	bl	8014fe6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80163ea:	4905      	ldr	r1, [pc, #20]	; (8016400 <CDC_Init_FS+0x24>)
 80163ec:	4803      	ldr	r0, [pc, #12]	; (80163fc <CDC_Init_FS+0x20>)
 80163ee:	f7fe fe18 	bl	8015022 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80163f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	20009164 	.word	0x20009164
 80163fc:	20008694 	.word	0x20008694
 8016400:	20008964 	.word	0x20008964

08016404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016404:	b480      	push	{r7}
 8016406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801640a:	4618      	mov	r0, r3
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr

08016414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016414:	b480      	push	{r7}
 8016416:	b083      	sub	sp, #12
 8016418:	af00      	add	r7, sp, #0
 801641a:	4603      	mov	r3, r0
 801641c:	6039      	str	r1, [r7, #0]
 801641e:	71fb      	strb	r3, [r7, #7]
 8016420:	4613      	mov	r3, r2
 8016422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016424:	79fb      	ldrb	r3, [r7, #7]
 8016426:	2b23      	cmp	r3, #35	; 0x23
 8016428:	d84a      	bhi.n	80164c0 <CDC_Control_FS+0xac>
 801642a:	a201      	add	r2, pc, #4	; (adr r2, 8016430 <CDC_Control_FS+0x1c>)
 801642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016430:	080164c1 	.word	0x080164c1
 8016434:	080164c1 	.word	0x080164c1
 8016438:	080164c1 	.word	0x080164c1
 801643c:	080164c1 	.word	0x080164c1
 8016440:	080164c1 	.word	0x080164c1
 8016444:	080164c1 	.word	0x080164c1
 8016448:	080164c1 	.word	0x080164c1
 801644c:	080164c1 	.word	0x080164c1
 8016450:	080164c1 	.word	0x080164c1
 8016454:	080164c1 	.word	0x080164c1
 8016458:	080164c1 	.word	0x080164c1
 801645c:	080164c1 	.word	0x080164c1
 8016460:	080164c1 	.word	0x080164c1
 8016464:	080164c1 	.word	0x080164c1
 8016468:	080164c1 	.word	0x080164c1
 801646c:	080164c1 	.word	0x080164c1
 8016470:	080164c1 	.word	0x080164c1
 8016474:	080164c1 	.word	0x080164c1
 8016478:	080164c1 	.word	0x080164c1
 801647c:	080164c1 	.word	0x080164c1
 8016480:	080164c1 	.word	0x080164c1
 8016484:	080164c1 	.word	0x080164c1
 8016488:	080164c1 	.word	0x080164c1
 801648c:	080164c1 	.word	0x080164c1
 8016490:	080164c1 	.word	0x080164c1
 8016494:	080164c1 	.word	0x080164c1
 8016498:	080164c1 	.word	0x080164c1
 801649c:	080164c1 	.word	0x080164c1
 80164a0:	080164c1 	.word	0x080164c1
 80164a4:	080164c1 	.word	0x080164c1
 80164a8:	080164c1 	.word	0x080164c1
 80164ac:	080164c1 	.word	0x080164c1
 80164b0:	080164c1 	.word	0x080164c1
 80164b4:	080164c1 	.word	0x080164c1
 80164b8:	080164c1 	.word	0x080164c1
 80164bc:	080164c1 	.word	0x080164c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80164c0:	bf00      	nop
  }

  return (USBD_OK);
 80164c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	370c      	adds	r7, #12
 80164c8:	46bd      	mov	sp, r7
 80164ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ce:	4770      	bx	lr

080164d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80164da:	6879      	ldr	r1, [r7, #4]
 80164dc:	4805      	ldr	r0, [pc, #20]	; (80164f4 <CDC_Receive_FS+0x24>)
 80164de:	f7fe fda0 	bl	8015022 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80164e2:	4804      	ldr	r0, [pc, #16]	; (80164f4 <CDC_Receive_FS+0x24>)
 80164e4:	f7fe fdb6 	bl	8015054 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80164e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	20008694 	.word	0x20008694

080164f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b087      	sub	sp, #28
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	4613      	mov	r3, r2
 8016504:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016506:	2300      	movs	r3, #0
 8016508:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801650a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801650e:	4618      	mov	r0, r3
 8016510:	371c      	adds	r7, #28
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr
	...

0801651c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801651c:	b480      	push	{r7}
 801651e:	b083      	sub	sp, #12
 8016520:	af00      	add	r7, sp, #0
 8016522:	4603      	mov	r3, r0
 8016524:	6039      	str	r1, [r7, #0]
 8016526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	2212      	movs	r2, #18
 801652c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801652e:	4b03      	ldr	r3, [pc, #12]	; (801653c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016530:	4618      	mov	r0, r3
 8016532:	370c      	adds	r7, #12
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr
 801653c:	20000198 	.word	0x20000198

08016540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	4603      	mov	r3, r0
 8016548:	6039      	str	r1, [r7, #0]
 801654a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	2204      	movs	r2, #4
 8016550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016552:	4b03      	ldr	r3, [pc, #12]	; (8016560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016554:	4618      	mov	r0, r3
 8016556:	370c      	adds	r7, #12
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr
 8016560:	200001ac 	.word	0x200001ac

08016564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
 801656a:	4603      	mov	r3, r0
 801656c:	6039      	str	r1, [r7, #0]
 801656e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016570:	79fb      	ldrb	r3, [r7, #7]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d105      	bne.n	8016582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016576:	683a      	ldr	r2, [r7, #0]
 8016578:	4907      	ldr	r1, [pc, #28]	; (8016598 <USBD_FS_ProductStrDescriptor+0x34>)
 801657a:	4808      	ldr	r0, [pc, #32]	; (801659c <USBD_FS_ProductStrDescriptor+0x38>)
 801657c:	f7ff fe1d 	bl	80161ba <USBD_GetString>
 8016580:	e004      	b.n	801658c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016582:	683a      	ldr	r2, [r7, #0]
 8016584:	4904      	ldr	r1, [pc, #16]	; (8016598 <USBD_FS_ProductStrDescriptor+0x34>)
 8016586:	4805      	ldr	r0, [pc, #20]	; (801659c <USBD_FS_ProductStrDescriptor+0x38>)
 8016588:	f7ff fe17 	bl	80161ba <USBD_GetString>
  }
  return USBD_StrDesc;
 801658c:	4b02      	ldr	r3, [pc, #8]	; (8016598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801658e:	4618      	mov	r0, r3
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	20009964 	.word	0x20009964
 801659c:	08019f44 	.word	0x08019f44

080165a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	6039      	str	r1, [r7, #0]
 80165aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80165ac:	683a      	ldr	r2, [r7, #0]
 80165ae:	4904      	ldr	r1, [pc, #16]	; (80165c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80165b0:	4804      	ldr	r0, [pc, #16]	; (80165c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80165b2:	f7ff fe02 	bl	80161ba <USBD_GetString>
  return USBD_StrDesc;
 80165b6:	4b02      	ldr	r3, [pc, #8]	; (80165c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	20009964 	.word	0x20009964
 80165c4:	08019f5c 	.word	0x08019f5c

080165c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	4603      	mov	r3, r0
 80165d0:	6039      	str	r1, [r7, #0]
 80165d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	221a      	movs	r2, #26
 80165d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80165da:	f000 f843 	bl	8016664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80165de:	4b02      	ldr	r3, [pc, #8]	; (80165e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3708      	adds	r7, #8
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}
 80165e8:	200001b0 	.word	0x200001b0

080165ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	4603      	mov	r3, r0
 80165f4:	6039      	str	r1, [r7, #0]
 80165f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80165f8:	79fb      	ldrb	r3, [r7, #7]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d105      	bne.n	801660a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80165fe:	683a      	ldr	r2, [r7, #0]
 8016600:	4907      	ldr	r1, [pc, #28]	; (8016620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016602:	4808      	ldr	r0, [pc, #32]	; (8016624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016604:	f7ff fdd9 	bl	80161ba <USBD_GetString>
 8016608:	e004      	b.n	8016614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801660a:	683a      	ldr	r2, [r7, #0]
 801660c:	4904      	ldr	r1, [pc, #16]	; (8016620 <USBD_FS_ConfigStrDescriptor+0x34>)
 801660e:	4805      	ldr	r0, [pc, #20]	; (8016624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016610:	f7ff fdd3 	bl	80161ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8016614:	4b02      	ldr	r3, [pc, #8]	; (8016620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016616:	4618      	mov	r0, r3
 8016618:	3708      	adds	r7, #8
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	20009964 	.word	0x20009964
 8016624:	08019f70 	.word	0x08019f70

08016628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
 801662e:	4603      	mov	r3, r0
 8016630:	6039      	str	r1, [r7, #0]
 8016632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016634:	79fb      	ldrb	r3, [r7, #7]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d105      	bne.n	8016646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801663a:	683a      	ldr	r2, [r7, #0]
 801663c:	4907      	ldr	r1, [pc, #28]	; (801665c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801663e:	4808      	ldr	r0, [pc, #32]	; (8016660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016640:	f7ff fdbb 	bl	80161ba <USBD_GetString>
 8016644:	e004      	b.n	8016650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016646:	683a      	ldr	r2, [r7, #0]
 8016648:	4904      	ldr	r1, [pc, #16]	; (801665c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801664a:	4805      	ldr	r0, [pc, #20]	; (8016660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801664c:	f7ff fdb5 	bl	80161ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8016650:	4b02      	ldr	r3, [pc, #8]	; (801665c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016652:	4618      	mov	r0, r3
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	20009964 	.word	0x20009964
 8016660:	08019f7c 	.word	0x08019f7c

08016664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801666a:	4b0f      	ldr	r3, [pc, #60]	; (80166a8 <Get_SerialNum+0x44>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016670:	4b0e      	ldr	r3, [pc, #56]	; (80166ac <Get_SerialNum+0x48>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016676:	4b0e      	ldr	r3, [pc, #56]	; (80166b0 <Get_SerialNum+0x4c>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801667c:	68fa      	ldr	r2, [r7, #12]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4413      	add	r3, r2
 8016682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d009      	beq.n	801669e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801668a:	2208      	movs	r2, #8
 801668c:	4909      	ldr	r1, [pc, #36]	; (80166b4 <Get_SerialNum+0x50>)
 801668e:	68f8      	ldr	r0, [r7, #12]
 8016690:	f000 f814 	bl	80166bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016694:	2204      	movs	r2, #4
 8016696:	4908      	ldr	r1, [pc, #32]	; (80166b8 <Get_SerialNum+0x54>)
 8016698:	68b8      	ldr	r0, [r7, #8]
 801669a:	f000 f80f 	bl	80166bc <IntToUnicode>
  }
}
 801669e:	bf00      	nop
 80166a0:	3710      	adds	r7, #16
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	1fff7a10 	.word	0x1fff7a10
 80166ac:	1fff7a14 	.word	0x1fff7a14
 80166b0:	1fff7a18 	.word	0x1fff7a18
 80166b4:	200001b2 	.word	0x200001b2
 80166b8:	200001c2 	.word	0x200001c2

080166bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80166bc:	b480      	push	{r7}
 80166be:	b087      	sub	sp, #28
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	60f8      	str	r0, [r7, #12]
 80166c4:	60b9      	str	r1, [r7, #8]
 80166c6:	4613      	mov	r3, r2
 80166c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80166ca:	2300      	movs	r3, #0
 80166cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80166ce:	2300      	movs	r3, #0
 80166d0:	75fb      	strb	r3, [r7, #23]
 80166d2:	e027      	b.n	8016724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	0f1b      	lsrs	r3, r3, #28
 80166d8:	2b09      	cmp	r3, #9
 80166da:	d80b      	bhi.n	80166f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	0f1b      	lsrs	r3, r3, #28
 80166e0:	b2da      	uxtb	r2, r3
 80166e2:	7dfb      	ldrb	r3, [r7, #23]
 80166e4:	005b      	lsls	r3, r3, #1
 80166e6:	4619      	mov	r1, r3
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	440b      	add	r3, r1
 80166ec:	3230      	adds	r2, #48	; 0x30
 80166ee:	b2d2      	uxtb	r2, r2
 80166f0:	701a      	strb	r2, [r3, #0]
 80166f2:	e00a      	b.n	801670a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	0f1b      	lsrs	r3, r3, #28
 80166f8:	b2da      	uxtb	r2, r3
 80166fa:	7dfb      	ldrb	r3, [r7, #23]
 80166fc:	005b      	lsls	r3, r3, #1
 80166fe:	4619      	mov	r1, r3
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	440b      	add	r3, r1
 8016704:	3237      	adds	r2, #55	; 0x37
 8016706:	b2d2      	uxtb	r2, r2
 8016708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	011b      	lsls	r3, r3, #4
 801670e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016710:	7dfb      	ldrb	r3, [r7, #23]
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	3301      	adds	r3, #1
 8016716:	68ba      	ldr	r2, [r7, #8]
 8016718:	4413      	add	r3, r2
 801671a:	2200      	movs	r2, #0
 801671c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801671e:	7dfb      	ldrb	r3, [r7, #23]
 8016720:	3301      	adds	r3, #1
 8016722:	75fb      	strb	r3, [r7, #23]
 8016724:	7dfa      	ldrb	r2, [r7, #23]
 8016726:	79fb      	ldrb	r3, [r7, #7]
 8016728:	429a      	cmp	r2, r3
 801672a:	d3d3      	bcc.n	80166d4 <IntToUnicode+0x18>
  }
}
 801672c:	bf00      	nop
 801672e:	bf00      	nop
 8016730:	371c      	adds	r7, #28
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr
	...

0801673c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b08a      	sub	sp, #40	; 0x28
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016744:	f107 0314 	add.w	r3, r7, #20
 8016748:	2200      	movs	r2, #0
 801674a:	601a      	str	r2, [r3, #0]
 801674c:	605a      	str	r2, [r3, #4]
 801674e:	609a      	str	r2, [r3, #8]
 8016750:	60da      	str	r2, [r3, #12]
 8016752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801675c:	d13a      	bne.n	80167d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801675e:	2300      	movs	r3, #0
 8016760:	613b      	str	r3, [r7, #16]
 8016762:	4b1e      	ldr	r3, [pc, #120]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 8016764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016766:	4a1d      	ldr	r2, [pc, #116]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 8016768:	f043 0301 	orr.w	r3, r3, #1
 801676c:	6313      	str	r3, [r2, #48]	; 0x30
 801676e:	4b1b      	ldr	r3, [pc, #108]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 8016770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016772:	f003 0301 	and.w	r3, r3, #1
 8016776:	613b      	str	r3, [r7, #16]
 8016778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801677a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801677e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016780:	2302      	movs	r3, #2
 8016782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016784:	2300      	movs	r3, #0
 8016786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016788:	2303      	movs	r3, #3
 801678a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801678c:	230a      	movs	r3, #10
 801678e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016790:	f107 0314 	add.w	r3, r7, #20
 8016794:	4619      	mov	r1, r3
 8016796:	4812      	ldr	r0, [pc, #72]	; (80167e0 <HAL_PCD_MspInit+0xa4>)
 8016798:	f7f5 fc5c 	bl	800c054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801679c:	4b0f      	ldr	r3, [pc, #60]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 801679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167a0:	4a0e      	ldr	r2, [pc, #56]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 80167a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167a6:	6353      	str	r3, [r2, #52]	; 0x34
 80167a8:	2300      	movs	r3, #0
 80167aa:	60fb      	str	r3, [r7, #12]
 80167ac:	4b0b      	ldr	r3, [pc, #44]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 80167ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167b0:	4a0a      	ldr	r2, [pc, #40]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 80167b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80167b6:	6453      	str	r3, [r2, #68]	; 0x44
 80167b8:	4b08      	ldr	r3, [pc, #32]	; (80167dc <HAL_PCD_MspInit+0xa0>)
 80167ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167c0:	60fb      	str	r3, [r7, #12]
 80167c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80167c4:	2200      	movs	r2, #0
 80167c6:	2105      	movs	r1, #5
 80167c8:	2043      	movs	r0, #67	; 0x43
 80167ca:	f7f5 f817 	bl	800b7fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167ce:	2043      	movs	r0, #67	; 0x43
 80167d0:	f7f5 f830 	bl	800b834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80167d4:	bf00      	nop
 80167d6:	3728      	adds	r7, #40	; 0x28
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	40023800 	.word	0x40023800
 80167e0:	40020000 	.word	0x40020000

080167e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80167f8:	4619      	mov	r1, r3
 80167fa:	4610      	mov	r0, r2
 80167fc:	f7fe fcf6 	bl	80151ec <USBD_LL_SetupStage>
}
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	460b      	mov	r3, r1
 8016812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801681a:	78fa      	ldrb	r2, [r7, #3]
 801681c:	6879      	ldr	r1, [r7, #4]
 801681e:	4613      	mov	r3, r2
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	1a9b      	subs	r3, r3, r2
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	440b      	add	r3, r1
 8016828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	78fb      	ldrb	r3, [r7, #3]
 8016830:	4619      	mov	r1, r3
 8016832:	f7fe fd30 	bl	8015296 <USBD_LL_DataOutStage>
}
 8016836:	bf00      	nop
 8016838:	3708      	adds	r7, #8
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}

0801683e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801683e:	b580      	push	{r7, lr}
 8016840:	b082      	sub	sp, #8
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]
 8016846:	460b      	mov	r3, r1
 8016848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016850:	78fa      	ldrb	r2, [r7, #3]
 8016852:	6879      	ldr	r1, [r7, #4]
 8016854:	4613      	mov	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	1a9b      	subs	r3, r3, r2
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	440b      	add	r3, r1
 801685e:	3348      	adds	r3, #72	; 0x48
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	78fb      	ldrb	r3, [r7, #3]
 8016864:	4619      	mov	r1, r3
 8016866:	f7fe fd79 	bl	801535c <USBD_LL_DataInStage>
}
 801686a:	bf00      	nop
 801686c:	3708      	adds	r7, #8
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}

08016872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016872:	b580      	push	{r7, lr}
 8016874:	b082      	sub	sp, #8
 8016876:	af00      	add	r7, sp, #0
 8016878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016880:	4618      	mov	r0, r3
 8016882:	f7fe fe8d 	bl	80155a0 <USBD_LL_SOF>
}
 8016886:	bf00      	nop
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b084      	sub	sp, #16
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016896:	2301      	movs	r3, #1
 8016898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	68db      	ldr	r3, [r3, #12]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d102      	bne.n	80168a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80168a2:	2300      	movs	r3, #0
 80168a4:	73fb      	strb	r3, [r7, #15]
 80168a6:	e008      	b.n	80168ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	68db      	ldr	r3, [r3, #12]
 80168ac:	2b02      	cmp	r3, #2
 80168ae:	d102      	bne.n	80168b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80168b0:	2301      	movs	r3, #1
 80168b2:	73fb      	strb	r3, [r7, #15]
 80168b4:	e001      	b.n	80168ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80168b6:	f7ec fe59 	bl	800356c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168c0:	7bfa      	ldrb	r2, [r7, #15]
 80168c2:	4611      	mov	r1, r2
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fe fe2d 	bl	8015524 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7fe fdd9 	bl	8015488 <USBD_LL_Reset>
}
 80168d6:	bf00      	nop
 80168d8:	3710      	adds	r7, #16
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
	...

080168e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fe fe28 	bl	8015544 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	6812      	ldr	r2, [r2, #0]
 8016902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016906:	f043 0301 	orr.w	r3, r3, #1
 801690a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6a1b      	ldr	r3, [r3, #32]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d005      	beq.n	8016920 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016914:	4b04      	ldr	r3, [pc, #16]	; (8016928 <HAL_PCD_SuspendCallback+0x48>)
 8016916:	691b      	ldr	r3, [r3, #16]
 8016918:	4a03      	ldr	r2, [pc, #12]	; (8016928 <HAL_PCD_SuspendCallback+0x48>)
 801691a:	f043 0306 	orr.w	r3, r3, #6
 801691e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016920:	bf00      	nop
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	e000ed00 	.word	0xe000ed00

0801692c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801693a:	4618      	mov	r0, r3
 801693c:	f7fe fe18 	bl	8015570 <USBD_LL_Resume>
}
 8016940:	bf00      	nop
 8016942:	3708      	adds	r7, #8
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	460b      	mov	r3, r1
 8016952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801695a:	78fa      	ldrb	r2, [r7, #3]
 801695c:	4611      	mov	r1, r2
 801695e:	4618      	mov	r0, r3
 8016960:	f7fe fe66 	bl	8015630 <USBD_LL_IsoOUTIncomplete>
}
 8016964:	bf00      	nop
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	460b      	mov	r3, r1
 8016976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801697e:	78fa      	ldrb	r2, [r7, #3]
 8016980:	4611      	mov	r1, r2
 8016982:	4618      	mov	r0, r3
 8016984:	f7fe fe2e 	bl	80155e4 <USBD_LL_IsoINIncomplete>
}
 8016988:	bf00      	nop
 801698a:	3708      	adds	r7, #8
 801698c:	46bd      	mov	sp, r7
 801698e:	bd80      	pop	{r7, pc}

08016990 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b082      	sub	sp, #8
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801699e:	4618      	mov	r0, r3
 80169a0:	f7fe fe6c 	bl	801567c <USBD_LL_DevConnected>
}
 80169a4:	bf00      	nop
 80169a6:	3708      	adds	r7, #8
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7fe fe69 	bl	8015692 <USBD_LL_DevDisconnected>
}
 80169c0:	bf00      	nop
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}

080169c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d13c      	bne.n	8016a52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80169d8:	4a20      	ldr	r2, [pc, #128]	; (8016a5c <USBD_LL_Init+0x94>)
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	4a1e      	ldr	r2, [pc, #120]	; (8016a5c <USBD_LL_Init+0x94>)
 80169e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80169e8:	4b1c      	ldr	r3, [pc, #112]	; (8016a5c <USBD_LL_Init+0x94>)
 80169ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80169ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80169f0:	4b1a      	ldr	r3, [pc, #104]	; (8016a5c <USBD_LL_Init+0x94>)
 80169f2:	2204      	movs	r2, #4
 80169f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80169f6:	4b19      	ldr	r3, [pc, #100]	; (8016a5c <USBD_LL_Init+0x94>)
 80169f8:	2202      	movs	r2, #2
 80169fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80169fc:	4b17      	ldr	r3, [pc, #92]	; (8016a5c <USBD_LL_Init+0x94>)
 80169fe:	2200      	movs	r2, #0
 8016a00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016a02:	4b16      	ldr	r3, [pc, #88]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a04:	2202      	movs	r2, #2
 8016a06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016a08:	4b14      	ldr	r3, [pc, #80]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016a0e:	4b13      	ldr	r3, [pc, #76]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a10:	2200      	movs	r2, #0
 8016a12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016a14:	4b11      	ldr	r3, [pc, #68]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a16:	2200      	movs	r2, #0
 8016a18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016a1a:	4b10      	ldr	r3, [pc, #64]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016a20:	4b0e      	ldr	r3, [pc, #56]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a22:	2200      	movs	r2, #0
 8016a24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016a26:	480d      	ldr	r0, [pc, #52]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a28:	f7f5 fcd9 	bl	800c3de <HAL_PCD_Init>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d001      	beq.n	8016a36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016a32:	f7ec fd9b 	bl	800356c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016a36:	2180      	movs	r1, #128	; 0x80
 8016a38:	4808      	ldr	r0, [pc, #32]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a3a:	f7f6 fe36 	bl	800d6aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a3e:	2240      	movs	r2, #64	; 0x40
 8016a40:	2100      	movs	r1, #0
 8016a42:	4806      	ldr	r0, [pc, #24]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a44:	f7f6 fdea 	bl	800d61c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a48:	2280      	movs	r2, #128	; 0x80
 8016a4a:	2101      	movs	r1, #1
 8016a4c:	4803      	ldr	r0, [pc, #12]	; (8016a5c <USBD_LL_Init+0x94>)
 8016a4e:	f7f6 fde5 	bl	800d61c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016a52:	2300      	movs	r3, #0
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	20009b64 	.word	0x20009b64

08016a60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b084      	sub	sp, #16
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7f5 fdce 	bl	800c618 <HAL_PCD_Start>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f000 f942 	bl	8016d0c <USBD_Get_USB_Status>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3710      	adds	r7, #16
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}

08016a96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a96:	b580      	push	{r7, lr}
 8016a98:	b084      	sub	sp, #16
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	6078      	str	r0, [r7, #4]
 8016a9e:	4608      	mov	r0, r1
 8016aa0:	4611      	mov	r1, r2
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	70fb      	strb	r3, [r7, #3]
 8016aa8:	460b      	mov	r3, r1
 8016aaa:	70bb      	strb	r3, [r7, #2]
 8016aac:	4613      	mov	r3, r2
 8016aae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016abe:	78bb      	ldrb	r3, [r7, #2]
 8016ac0:	883a      	ldrh	r2, [r7, #0]
 8016ac2:	78f9      	ldrb	r1, [r7, #3]
 8016ac4:	f7f6 f9b2 	bl	800ce2c <HAL_PCD_EP_Open>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016acc:	7bfb      	ldrb	r3, [r7, #15]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f000 f91c 	bl	8016d0c <USBD_Get_USB_Status>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	b084      	sub	sp, #16
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	6078      	str	r0, [r7, #4]
 8016aea:	460b      	mov	r3, r1
 8016aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af2:	2300      	movs	r3, #0
 8016af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016afc:	78fa      	ldrb	r2, [r7, #3]
 8016afe:	4611      	mov	r1, r2
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7f6 f9fb 	bl	800cefc <HAL_PCD_EP_Close>
 8016b06:	4603      	mov	r3, r0
 8016b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b0a:	7bfb      	ldrb	r3, [r7, #15]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f000 f8fd 	bl	8016d0c <USBD_Get_USB_Status>
 8016b12:	4603      	mov	r3, r0
 8016b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3710      	adds	r7, #16
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}

08016b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b084      	sub	sp, #16
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
 8016b28:	460b      	mov	r3, r1
 8016b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b30:	2300      	movs	r3, #0
 8016b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b3a:	78fa      	ldrb	r2, [r7, #3]
 8016b3c:	4611      	mov	r1, r2
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7f6 fad3 	bl	800d0ea <HAL_PCD_EP_SetStall>
 8016b44:	4603      	mov	r3, r0
 8016b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b48:	7bfb      	ldrb	r3, [r7, #15]
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f000 f8de 	bl	8016d0c <USBD_Get_USB_Status>
 8016b50:	4603      	mov	r3, r0
 8016b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b084      	sub	sp, #16
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	460b      	mov	r3, r1
 8016b68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b78:	78fa      	ldrb	r2, [r7, #3]
 8016b7a:	4611      	mov	r1, r2
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f7f6 fb18 	bl	800d1b2 <HAL_PCD_EP_ClrStall>
 8016b82:	4603      	mov	r3, r0
 8016b84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f000 f8bf 	bl	8016d0c <USBD_Get_USB_Status>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3710      	adds	r7, #16
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}

08016b9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b085      	sub	sp, #20
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	da0b      	bge.n	8016bd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016bb8:	78fb      	ldrb	r3, [r7, #3]
 8016bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bbe:	68f9      	ldr	r1, [r7, #12]
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	1a9b      	subs	r3, r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	440b      	add	r3, r1
 8016bca:	333e      	adds	r3, #62	; 0x3e
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	e00b      	b.n	8016be8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016bd0:	78fb      	ldrb	r3, [r7, #3]
 8016bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bd6:	68f9      	ldr	r1, [r7, #12]
 8016bd8:	4613      	mov	r3, r2
 8016bda:	00db      	lsls	r3, r3, #3
 8016bdc:	1a9b      	subs	r3, r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	440b      	add	r3, r1
 8016be2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016be6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3714      	adds	r7, #20
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr

08016bf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c04:	2300      	movs	r3, #0
 8016c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c0e:	78fa      	ldrb	r2, [r7, #3]
 8016c10:	4611      	mov	r1, r2
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7f6 f8e5 	bl	800cde2 <HAL_PCD_SetAddress>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c1c:	7bfb      	ldrb	r3, [r7, #15]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f000 f874 	bl	8016d0c <USBD_Get_USB_Status>
 8016c24:	4603      	mov	r3, r0
 8016c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3710      	adds	r7, #16
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}

08016c32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c32:	b580      	push	{r7, lr}
 8016c34:	b086      	sub	sp, #24
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	60f8      	str	r0, [r7, #12]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	603b      	str	r3, [r7, #0]
 8016c3e:	460b      	mov	r3, r1
 8016c40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c42:	2300      	movs	r3, #0
 8016c44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c46:	2300      	movs	r3, #0
 8016c48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c50:	7af9      	ldrb	r1, [r7, #11]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	f7f6 f9fe 	bl	800d056 <HAL_PCD_EP_Transmit>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c5e:	7dfb      	ldrb	r3, [r7, #23]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 f853 	bl	8016d0c <USBD_Get_USB_Status>
 8016c66:	4603      	mov	r3, r0
 8016c68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3718      	adds	r7, #24
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	607a      	str	r2, [r7, #4]
 8016c7e:	603b      	str	r3, [r7, #0]
 8016c80:	460b      	mov	r3, r1
 8016c82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c92:	7af9      	ldrb	r1, [r7, #11]
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	687a      	ldr	r2, [r7, #4]
 8016c98:	f7f6 f97a 	bl	800cf90 <HAL_PCD_EP_Receive>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ca0:	7dfb      	ldrb	r3, [r7, #23]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f000 f832 	bl	8016d0c <USBD_Get_USB_Status>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016cac:	7dbb      	ldrb	r3, [r7, #22]
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3718      	adds	r7, #24
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b082      	sub	sp, #8
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cc8:	78fa      	ldrb	r2, [r7, #3]
 8016cca:	4611      	mov	r1, r2
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f6 f9aa 	bl	800d026 <HAL_PCD_EP_GetRxCount>
 8016cd2:	4603      	mov	r3, r0
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016cdc:	b480      	push	{r7}
 8016cde:	b083      	sub	sp, #12
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ce4:	4b03      	ldr	r3, [pc, #12]	; (8016cf4 <USBD_static_malloc+0x18>)
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop
 8016cf4:	20007408 	.word	0x20007408

08016cf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]

}
 8016d00:	bf00      	nop
 8016d02:	370c      	adds	r7, #12
 8016d04:	46bd      	mov	sp, r7
 8016d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0a:	4770      	bx	lr

08016d0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b085      	sub	sp, #20
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	4603      	mov	r3, r0
 8016d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d16:	2300      	movs	r3, #0
 8016d18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016d1a:	79fb      	ldrb	r3, [r7, #7]
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d817      	bhi.n	8016d50 <USBD_Get_USB_Status+0x44>
 8016d20:	a201      	add	r2, pc, #4	; (adr r2, 8016d28 <USBD_Get_USB_Status+0x1c>)
 8016d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d26:	bf00      	nop
 8016d28:	08016d39 	.word	0x08016d39
 8016d2c:	08016d3f 	.word	0x08016d3f
 8016d30:	08016d45 	.word	0x08016d45
 8016d34:	08016d4b 	.word	0x08016d4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8016d3c:	e00b      	b.n	8016d56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d3e:	2303      	movs	r3, #3
 8016d40:	73fb      	strb	r3, [r7, #15]
    break;
 8016d42:	e008      	b.n	8016d56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d44:	2301      	movs	r3, #1
 8016d46:	73fb      	strb	r3, [r7, #15]
    break;
 8016d48:	e005      	b.n	8016d56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d4a:	2303      	movs	r3, #3
 8016d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8016d4e:	e002      	b.n	8016d56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d50:	2303      	movs	r3, #3
 8016d52:	73fb      	strb	r3, [r7, #15]
    break;
 8016d54:	bf00      	nop
  }
  return usb_status;
 8016d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3714      	adds	r7, #20
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr

08016d64 <__assert_func>:
 8016d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d66:	4614      	mov	r4, r2
 8016d68:	461a      	mov	r2, r3
 8016d6a:	4b09      	ldr	r3, [pc, #36]	; (8016d90 <__assert_func+0x2c>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	4605      	mov	r5, r0
 8016d70:	68d8      	ldr	r0, [r3, #12]
 8016d72:	b14c      	cbz	r4, 8016d88 <__assert_func+0x24>
 8016d74:	4b07      	ldr	r3, [pc, #28]	; (8016d94 <__assert_func+0x30>)
 8016d76:	9100      	str	r1, [sp, #0]
 8016d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d7c:	4906      	ldr	r1, [pc, #24]	; (8016d98 <__assert_func+0x34>)
 8016d7e:	462b      	mov	r3, r5
 8016d80:	f000 f8ea 	bl	8016f58 <fiprintf>
 8016d84:	f000 ffbe 	bl	8017d04 <abort>
 8016d88:	4b04      	ldr	r3, [pc, #16]	; (8016d9c <__assert_func+0x38>)
 8016d8a:	461c      	mov	r4, r3
 8016d8c:	e7f3      	b.n	8016d76 <__assert_func+0x12>
 8016d8e:	bf00      	nop
 8016d90:	200001cc 	.word	0x200001cc
 8016d94:	0801a178 	.word	0x0801a178
 8016d98:	0801a185 	.word	0x0801a185
 8016d9c:	0801a1b3 	.word	0x0801a1b3

08016da0 <__errno>:
 8016da0:	4b01      	ldr	r3, [pc, #4]	; (8016da8 <__errno+0x8>)
 8016da2:	6818      	ldr	r0, [r3, #0]
 8016da4:	4770      	bx	lr
 8016da6:	bf00      	nop
 8016da8:	200001cc 	.word	0x200001cc

08016dac <std>:
 8016dac:	2300      	movs	r3, #0
 8016dae:	b510      	push	{r4, lr}
 8016db0:	4604      	mov	r4, r0
 8016db2:	e9c0 3300 	strd	r3, r3, [r0]
 8016db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016dba:	6083      	str	r3, [r0, #8]
 8016dbc:	8181      	strh	r1, [r0, #12]
 8016dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8016dc0:	81c2      	strh	r2, [r0, #14]
 8016dc2:	6183      	str	r3, [r0, #24]
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	2208      	movs	r2, #8
 8016dc8:	305c      	adds	r0, #92	; 0x5c
 8016dca:	f000 f94b 	bl	8017064 <memset>
 8016dce:	4b05      	ldr	r3, [pc, #20]	; (8016de4 <std+0x38>)
 8016dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8016dd2:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <std+0x3c>)
 8016dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016dd6:	4b05      	ldr	r3, [pc, #20]	; (8016dec <std+0x40>)
 8016dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016dda:	4b05      	ldr	r3, [pc, #20]	; (8016df0 <std+0x44>)
 8016ddc:	6224      	str	r4, [r4, #32]
 8016dde:	6323      	str	r3, [r4, #48]	; 0x30
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	bf00      	nop
 8016de4:	080179f5 	.word	0x080179f5
 8016de8:	08017a17 	.word	0x08017a17
 8016dec:	08017a4f 	.word	0x08017a4f
 8016df0:	08017a73 	.word	0x08017a73

08016df4 <_cleanup_r>:
 8016df4:	4901      	ldr	r1, [pc, #4]	; (8016dfc <_cleanup_r+0x8>)
 8016df6:	f000 b8c1 	b.w	8016f7c <_fwalk_reent>
 8016dfa:	bf00      	nop
 8016dfc:	08017e41 	.word	0x08017e41

08016e00 <__sfmoreglue>:
 8016e00:	b570      	push	{r4, r5, r6, lr}
 8016e02:	1e4a      	subs	r2, r1, #1
 8016e04:	2568      	movs	r5, #104	; 0x68
 8016e06:	4355      	muls	r5, r2
 8016e08:	460e      	mov	r6, r1
 8016e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016e0e:	f000 f981 	bl	8017114 <_malloc_r>
 8016e12:	4604      	mov	r4, r0
 8016e14:	b140      	cbz	r0, 8016e28 <__sfmoreglue+0x28>
 8016e16:	2100      	movs	r1, #0
 8016e18:	e9c0 1600 	strd	r1, r6, [r0]
 8016e1c:	300c      	adds	r0, #12
 8016e1e:	60a0      	str	r0, [r4, #8]
 8016e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016e24:	f000 f91e 	bl	8017064 <memset>
 8016e28:	4620      	mov	r0, r4
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}

08016e2c <__sfp_lock_acquire>:
 8016e2c:	4801      	ldr	r0, [pc, #4]	; (8016e34 <__sfp_lock_acquire+0x8>)
 8016e2e:	f000 b8ea 	b.w	8017006 <__retarget_lock_acquire_recursive>
 8016e32:	bf00      	nop
 8016e34:	20009f74 	.word	0x20009f74

08016e38 <__sfp_lock_release>:
 8016e38:	4801      	ldr	r0, [pc, #4]	; (8016e40 <__sfp_lock_release+0x8>)
 8016e3a:	f000 b8e5 	b.w	8017008 <__retarget_lock_release_recursive>
 8016e3e:	bf00      	nop
 8016e40:	20009f74 	.word	0x20009f74

08016e44 <__sinit_lock_acquire>:
 8016e44:	4801      	ldr	r0, [pc, #4]	; (8016e4c <__sinit_lock_acquire+0x8>)
 8016e46:	f000 b8de 	b.w	8017006 <__retarget_lock_acquire_recursive>
 8016e4a:	bf00      	nop
 8016e4c:	20009f6f 	.word	0x20009f6f

08016e50 <__sinit_lock_release>:
 8016e50:	4801      	ldr	r0, [pc, #4]	; (8016e58 <__sinit_lock_release+0x8>)
 8016e52:	f000 b8d9 	b.w	8017008 <__retarget_lock_release_recursive>
 8016e56:	bf00      	nop
 8016e58:	20009f6f 	.word	0x20009f6f

08016e5c <__sinit>:
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	4604      	mov	r4, r0
 8016e60:	f7ff fff0 	bl	8016e44 <__sinit_lock_acquire>
 8016e64:	69a3      	ldr	r3, [r4, #24]
 8016e66:	b11b      	cbz	r3, 8016e70 <__sinit+0x14>
 8016e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e6c:	f7ff bff0 	b.w	8016e50 <__sinit_lock_release>
 8016e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016e74:	6523      	str	r3, [r4, #80]	; 0x50
 8016e76:	4b13      	ldr	r3, [pc, #76]	; (8016ec4 <__sinit+0x68>)
 8016e78:	4a13      	ldr	r2, [pc, #76]	; (8016ec8 <__sinit+0x6c>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e7e:	42a3      	cmp	r3, r4
 8016e80:	bf04      	itt	eq
 8016e82:	2301      	moveq	r3, #1
 8016e84:	61a3      	streq	r3, [r4, #24]
 8016e86:	4620      	mov	r0, r4
 8016e88:	f000 f820 	bl	8016ecc <__sfp>
 8016e8c:	6060      	str	r0, [r4, #4]
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f000 f81c 	bl	8016ecc <__sfp>
 8016e94:	60a0      	str	r0, [r4, #8]
 8016e96:	4620      	mov	r0, r4
 8016e98:	f000 f818 	bl	8016ecc <__sfp>
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	60e0      	str	r0, [r4, #12]
 8016ea0:	2104      	movs	r1, #4
 8016ea2:	6860      	ldr	r0, [r4, #4]
 8016ea4:	f7ff ff82 	bl	8016dac <std>
 8016ea8:	68a0      	ldr	r0, [r4, #8]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	2109      	movs	r1, #9
 8016eae:	f7ff ff7d 	bl	8016dac <std>
 8016eb2:	68e0      	ldr	r0, [r4, #12]
 8016eb4:	2202      	movs	r2, #2
 8016eb6:	2112      	movs	r1, #18
 8016eb8:	f7ff ff78 	bl	8016dac <std>
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	61a3      	str	r3, [r4, #24]
 8016ec0:	e7d2      	b.n	8016e68 <__sinit+0xc>
 8016ec2:	bf00      	nop
 8016ec4:	0801a214 	.word	0x0801a214
 8016ec8:	08016df5 	.word	0x08016df5

08016ecc <__sfp>:
 8016ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ece:	4607      	mov	r7, r0
 8016ed0:	f7ff ffac 	bl	8016e2c <__sfp_lock_acquire>
 8016ed4:	4b1e      	ldr	r3, [pc, #120]	; (8016f50 <__sfp+0x84>)
 8016ed6:	681e      	ldr	r6, [r3, #0]
 8016ed8:	69b3      	ldr	r3, [r6, #24]
 8016eda:	b913      	cbnz	r3, 8016ee2 <__sfp+0x16>
 8016edc:	4630      	mov	r0, r6
 8016ede:	f7ff ffbd 	bl	8016e5c <__sinit>
 8016ee2:	3648      	adds	r6, #72	; 0x48
 8016ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ee8:	3b01      	subs	r3, #1
 8016eea:	d503      	bpl.n	8016ef4 <__sfp+0x28>
 8016eec:	6833      	ldr	r3, [r6, #0]
 8016eee:	b30b      	cbz	r3, 8016f34 <__sfp+0x68>
 8016ef0:	6836      	ldr	r6, [r6, #0]
 8016ef2:	e7f7      	b.n	8016ee4 <__sfp+0x18>
 8016ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016ef8:	b9d5      	cbnz	r5, 8016f30 <__sfp+0x64>
 8016efa:	4b16      	ldr	r3, [pc, #88]	; (8016f54 <__sfp+0x88>)
 8016efc:	60e3      	str	r3, [r4, #12]
 8016efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f02:	6665      	str	r5, [r4, #100]	; 0x64
 8016f04:	f000 f87e 	bl	8017004 <__retarget_lock_init_recursive>
 8016f08:	f7ff ff96 	bl	8016e38 <__sfp_lock_release>
 8016f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016f14:	6025      	str	r5, [r4, #0]
 8016f16:	61a5      	str	r5, [r4, #24]
 8016f18:	2208      	movs	r2, #8
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016f20:	f000 f8a0 	bl	8017064 <memset>
 8016f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f30:	3468      	adds	r4, #104	; 0x68
 8016f32:	e7d9      	b.n	8016ee8 <__sfp+0x1c>
 8016f34:	2104      	movs	r1, #4
 8016f36:	4638      	mov	r0, r7
 8016f38:	f7ff ff62 	bl	8016e00 <__sfmoreglue>
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	6030      	str	r0, [r6, #0]
 8016f40:	2800      	cmp	r0, #0
 8016f42:	d1d5      	bne.n	8016ef0 <__sfp+0x24>
 8016f44:	f7ff ff78 	bl	8016e38 <__sfp_lock_release>
 8016f48:	230c      	movs	r3, #12
 8016f4a:	603b      	str	r3, [r7, #0]
 8016f4c:	e7ee      	b.n	8016f2c <__sfp+0x60>
 8016f4e:	bf00      	nop
 8016f50:	0801a214 	.word	0x0801a214
 8016f54:	ffff0001 	.word	0xffff0001

08016f58 <fiprintf>:
 8016f58:	b40e      	push	{r1, r2, r3}
 8016f5a:	b503      	push	{r0, r1, lr}
 8016f5c:	4601      	mov	r1, r0
 8016f5e:	ab03      	add	r3, sp, #12
 8016f60:	4805      	ldr	r0, [pc, #20]	; (8016f78 <fiprintf+0x20>)
 8016f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f66:	6800      	ldr	r0, [r0, #0]
 8016f68:	9301      	str	r3, [sp, #4]
 8016f6a:	f000 f957 	bl	801721c <_vfiprintf_r>
 8016f6e:	b002      	add	sp, #8
 8016f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f74:	b003      	add	sp, #12
 8016f76:	4770      	bx	lr
 8016f78:	200001cc 	.word	0x200001cc

08016f7c <_fwalk_reent>:
 8016f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f80:	4606      	mov	r6, r0
 8016f82:	4688      	mov	r8, r1
 8016f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016f88:	2700      	movs	r7, #0
 8016f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8016f92:	d505      	bpl.n	8016fa0 <_fwalk_reent+0x24>
 8016f94:	6824      	ldr	r4, [r4, #0]
 8016f96:	2c00      	cmp	r4, #0
 8016f98:	d1f7      	bne.n	8016f8a <_fwalk_reent+0xe>
 8016f9a:	4638      	mov	r0, r7
 8016f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fa0:	89ab      	ldrh	r3, [r5, #12]
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	d907      	bls.n	8016fb6 <_fwalk_reent+0x3a>
 8016fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016faa:	3301      	adds	r3, #1
 8016fac:	d003      	beq.n	8016fb6 <_fwalk_reent+0x3a>
 8016fae:	4629      	mov	r1, r5
 8016fb0:	4630      	mov	r0, r6
 8016fb2:	47c0      	blx	r8
 8016fb4:	4307      	orrs	r7, r0
 8016fb6:	3568      	adds	r5, #104	; 0x68
 8016fb8:	e7e9      	b.n	8016f8e <_fwalk_reent+0x12>
	...

08016fbc <__libc_init_array>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	4d0d      	ldr	r5, [pc, #52]	; (8016ff4 <__libc_init_array+0x38>)
 8016fc0:	4c0d      	ldr	r4, [pc, #52]	; (8016ff8 <__libc_init_array+0x3c>)
 8016fc2:	1b64      	subs	r4, r4, r5
 8016fc4:	10a4      	asrs	r4, r4, #2
 8016fc6:	2600      	movs	r6, #0
 8016fc8:	42a6      	cmp	r6, r4
 8016fca:	d109      	bne.n	8016fe0 <__libc_init_array+0x24>
 8016fcc:	4d0b      	ldr	r5, [pc, #44]	; (8016ffc <__libc_init_array+0x40>)
 8016fce:	4c0c      	ldr	r4, [pc, #48]	; (8017000 <__libc_init_array+0x44>)
 8016fd0:	f001 fa3a 	bl	8018448 <_init>
 8016fd4:	1b64      	subs	r4, r4, r5
 8016fd6:	10a4      	asrs	r4, r4, #2
 8016fd8:	2600      	movs	r6, #0
 8016fda:	42a6      	cmp	r6, r4
 8016fdc:	d105      	bne.n	8016fea <__libc_init_array+0x2e>
 8016fde:	bd70      	pop	{r4, r5, r6, pc}
 8016fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fe4:	4798      	blx	r3
 8016fe6:	3601      	adds	r6, #1
 8016fe8:	e7ee      	b.n	8016fc8 <__libc_init_array+0xc>
 8016fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fee:	4798      	blx	r3
 8016ff0:	3601      	adds	r6, #1
 8016ff2:	e7f2      	b.n	8016fda <__libc_init_array+0x1e>
 8016ff4:	0801a254 	.word	0x0801a254
 8016ff8:	0801a254 	.word	0x0801a254
 8016ffc:	0801a254 	.word	0x0801a254
 8017000:	0801a258 	.word	0x0801a258

08017004 <__retarget_lock_init_recursive>:
 8017004:	4770      	bx	lr

08017006 <__retarget_lock_acquire_recursive>:
 8017006:	4770      	bx	lr

08017008 <__retarget_lock_release_recursive>:
 8017008:	4770      	bx	lr
	...

0801700c <malloc>:
 801700c:	4b02      	ldr	r3, [pc, #8]	; (8017018 <malloc+0xc>)
 801700e:	4601      	mov	r1, r0
 8017010:	6818      	ldr	r0, [r3, #0]
 8017012:	f000 b87f 	b.w	8017114 <_malloc_r>
 8017016:	bf00      	nop
 8017018:	200001cc 	.word	0x200001cc

0801701c <free>:
 801701c:	4b02      	ldr	r3, [pc, #8]	; (8017028 <free+0xc>)
 801701e:	4601      	mov	r1, r0
 8017020:	6818      	ldr	r0, [r3, #0]
 8017022:	f000 b827 	b.w	8017074 <_free_r>
 8017026:	bf00      	nop
 8017028:	200001cc 	.word	0x200001cc

0801702c <memcmp>:
 801702c:	b530      	push	{r4, r5, lr}
 801702e:	3901      	subs	r1, #1
 8017030:	2400      	movs	r4, #0
 8017032:	42a2      	cmp	r2, r4
 8017034:	d101      	bne.n	801703a <memcmp+0xe>
 8017036:	2000      	movs	r0, #0
 8017038:	e005      	b.n	8017046 <memcmp+0x1a>
 801703a:	5d03      	ldrb	r3, [r0, r4]
 801703c:	3401      	adds	r4, #1
 801703e:	5d0d      	ldrb	r5, [r1, r4]
 8017040:	42ab      	cmp	r3, r5
 8017042:	d0f6      	beq.n	8017032 <memcmp+0x6>
 8017044:	1b58      	subs	r0, r3, r5
 8017046:	bd30      	pop	{r4, r5, pc}

08017048 <memcpy>:
 8017048:	440a      	add	r2, r1
 801704a:	4291      	cmp	r1, r2
 801704c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017050:	d100      	bne.n	8017054 <memcpy+0xc>
 8017052:	4770      	bx	lr
 8017054:	b510      	push	{r4, lr}
 8017056:	f811 4b01 	ldrb.w	r4, [r1], #1
 801705a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801705e:	4291      	cmp	r1, r2
 8017060:	d1f9      	bne.n	8017056 <memcpy+0xe>
 8017062:	bd10      	pop	{r4, pc}

08017064 <memset>:
 8017064:	4402      	add	r2, r0
 8017066:	4603      	mov	r3, r0
 8017068:	4293      	cmp	r3, r2
 801706a:	d100      	bne.n	801706e <memset+0xa>
 801706c:	4770      	bx	lr
 801706e:	f803 1b01 	strb.w	r1, [r3], #1
 8017072:	e7f9      	b.n	8017068 <memset+0x4>

08017074 <_free_r>:
 8017074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017076:	2900      	cmp	r1, #0
 8017078:	d048      	beq.n	801710c <_free_r+0x98>
 801707a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801707e:	9001      	str	r0, [sp, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	f1a1 0404 	sub.w	r4, r1, #4
 8017086:	bfb8      	it	lt
 8017088:	18e4      	addlt	r4, r4, r3
 801708a:	f000 ffa5 	bl	8017fd8 <__malloc_lock>
 801708e:	4a20      	ldr	r2, [pc, #128]	; (8017110 <_free_r+0x9c>)
 8017090:	9801      	ldr	r0, [sp, #4]
 8017092:	6813      	ldr	r3, [r2, #0]
 8017094:	4615      	mov	r5, r2
 8017096:	b933      	cbnz	r3, 80170a6 <_free_r+0x32>
 8017098:	6063      	str	r3, [r4, #4]
 801709a:	6014      	str	r4, [r2, #0]
 801709c:	b003      	add	sp, #12
 801709e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170a2:	f000 bf9f 	b.w	8017fe4 <__malloc_unlock>
 80170a6:	42a3      	cmp	r3, r4
 80170a8:	d90b      	bls.n	80170c2 <_free_r+0x4e>
 80170aa:	6821      	ldr	r1, [r4, #0]
 80170ac:	1862      	adds	r2, r4, r1
 80170ae:	4293      	cmp	r3, r2
 80170b0:	bf04      	itt	eq
 80170b2:	681a      	ldreq	r2, [r3, #0]
 80170b4:	685b      	ldreq	r3, [r3, #4]
 80170b6:	6063      	str	r3, [r4, #4]
 80170b8:	bf04      	itt	eq
 80170ba:	1852      	addeq	r2, r2, r1
 80170bc:	6022      	streq	r2, [r4, #0]
 80170be:	602c      	str	r4, [r5, #0]
 80170c0:	e7ec      	b.n	801709c <_free_r+0x28>
 80170c2:	461a      	mov	r2, r3
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	b10b      	cbz	r3, 80170cc <_free_r+0x58>
 80170c8:	42a3      	cmp	r3, r4
 80170ca:	d9fa      	bls.n	80170c2 <_free_r+0x4e>
 80170cc:	6811      	ldr	r1, [r2, #0]
 80170ce:	1855      	adds	r5, r2, r1
 80170d0:	42a5      	cmp	r5, r4
 80170d2:	d10b      	bne.n	80170ec <_free_r+0x78>
 80170d4:	6824      	ldr	r4, [r4, #0]
 80170d6:	4421      	add	r1, r4
 80170d8:	1854      	adds	r4, r2, r1
 80170da:	42a3      	cmp	r3, r4
 80170dc:	6011      	str	r1, [r2, #0]
 80170de:	d1dd      	bne.n	801709c <_free_r+0x28>
 80170e0:	681c      	ldr	r4, [r3, #0]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	6053      	str	r3, [r2, #4]
 80170e6:	4421      	add	r1, r4
 80170e8:	6011      	str	r1, [r2, #0]
 80170ea:	e7d7      	b.n	801709c <_free_r+0x28>
 80170ec:	d902      	bls.n	80170f4 <_free_r+0x80>
 80170ee:	230c      	movs	r3, #12
 80170f0:	6003      	str	r3, [r0, #0]
 80170f2:	e7d3      	b.n	801709c <_free_r+0x28>
 80170f4:	6825      	ldr	r5, [r4, #0]
 80170f6:	1961      	adds	r1, r4, r5
 80170f8:	428b      	cmp	r3, r1
 80170fa:	bf04      	itt	eq
 80170fc:	6819      	ldreq	r1, [r3, #0]
 80170fe:	685b      	ldreq	r3, [r3, #4]
 8017100:	6063      	str	r3, [r4, #4]
 8017102:	bf04      	itt	eq
 8017104:	1949      	addeq	r1, r1, r5
 8017106:	6021      	streq	r1, [r4, #0]
 8017108:	6054      	str	r4, [r2, #4]
 801710a:	e7c7      	b.n	801709c <_free_r+0x28>
 801710c:	b003      	add	sp, #12
 801710e:	bd30      	pop	{r4, r5, pc}
 8017110:	20007628 	.word	0x20007628

08017114 <_malloc_r>:
 8017114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017116:	1ccd      	adds	r5, r1, #3
 8017118:	f025 0503 	bic.w	r5, r5, #3
 801711c:	3508      	adds	r5, #8
 801711e:	2d0c      	cmp	r5, #12
 8017120:	bf38      	it	cc
 8017122:	250c      	movcc	r5, #12
 8017124:	2d00      	cmp	r5, #0
 8017126:	4606      	mov	r6, r0
 8017128:	db01      	blt.n	801712e <_malloc_r+0x1a>
 801712a:	42a9      	cmp	r1, r5
 801712c:	d903      	bls.n	8017136 <_malloc_r+0x22>
 801712e:	230c      	movs	r3, #12
 8017130:	6033      	str	r3, [r6, #0]
 8017132:	2000      	movs	r0, #0
 8017134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017136:	f000 ff4f 	bl	8017fd8 <__malloc_lock>
 801713a:	4921      	ldr	r1, [pc, #132]	; (80171c0 <_malloc_r+0xac>)
 801713c:	680a      	ldr	r2, [r1, #0]
 801713e:	4614      	mov	r4, r2
 8017140:	b99c      	cbnz	r4, 801716a <_malloc_r+0x56>
 8017142:	4f20      	ldr	r7, [pc, #128]	; (80171c4 <_malloc_r+0xb0>)
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	b923      	cbnz	r3, 8017152 <_malloc_r+0x3e>
 8017148:	4621      	mov	r1, r4
 801714a:	4630      	mov	r0, r6
 801714c:	f000 fc22 	bl	8017994 <_sbrk_r>
 8017150:	6038      	str	r0, [r7, #0]
 8017152:	4629      	mov	r1, r5
 8017154:	4630      	mov	r0, r6
 8017156:	f000 fc1d 	bl	8017994 <_sbrk_r>
 801715a:	1c43      	adds	r3, r0, #1
 801715c:	d123      	bne.n	80171a6 <_malloc_r+0x92>
 801715e:	230c      	movs	r3, #12
 8017160:	6033      	str	r3, [r6, #0]
 8017162:	4630      	mov	r0, r6
 8017164:	f000 ff3e 	bl	8017fe4 <__malloc_unlock>
 8017168:	e7e3      	b.n	8017132 <_malloc_r+0x1e>
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	1b5b      	subs	r3, r3, r5
 801716e:	d417      	bmi.n	80171a0 <_malloc_r+0x8c>
 8017170:	2b0b      	cmp	r3, #11
 8017172:	d903      	bls.n	801717c <_malloc_r+0x68>
 8017174:	6023      	str	r3, [r4, #0]
 8017176:	441c      	add	r4, r3
 8017178:	6025      	str	r5, [r4, #0]
 801717a:	e004      	b.n	8017186 <_malloc_r+0x72>
 801717c:	6863      	ldr	r3, [r4, #4]
 801717e:	42a2      	cmp	r2, r4
 8017180:	bf0c      	ite	eq
 8017182:	600b      	streq	r3, [r1, #0]
 8017184:	6053      	strne	r3, [r2, #4]
 8017186:	4630      	mov	r0, r6
 8017188:	f000 ff2c 	bl	8017fe4 <__malloc_unlock>
 801718c:	f104 000b 	add.w	r0, r4, #11
 8017190:	1d23      	adds	r3, r4, #4
 8017192:	f020 0007 	bic.w	r0, r0, #7
 8017196:	1ac2      	subs	r2, r0, r3
 8017198:	d0cc      	beq.n	8017134 <_malloc_r+0x20>
 801719a:	1a1b      	subs	r3, r3, r0
 801719c:	50a3      	str	r3, [r4, r2]
 801719e:	e7c9      	b.n	8017134 <_malloc_r+0x20>
 80171a0:	4622      	mov	r2, r4
 80171a2:	6864      	ldr	r4, [r4, #4]
 80171a4:	e7cc      	b.n	8017140 <_malloc_r+0x2c>
 80171a6:	1cc4      	adds	r4, r0, #3
 80171a8:	f024 0403 	bic.w	r4, r4, #3
 80171ac:	42a0      	cmp	r0, r4
 80171ae:	d0e3      	beq.n	8017178 <_malloc_r+0x64>
 80171b0:	1a21      	subs	r1, r4, r0
 80171b2:	4630      	mov	r0, r6
 80171b4:	f000 fbee 	bl	8017994 <_sbrk_r>
 80171b8:	3001      	adds	r0, #1
 80171ba:	d1dd      	bne.n	8017178 <_malloc_r+0x64>
 80171bc:	e7cf      	b.n	801715e <_malloc_r+0x4a>
 80171be:	bf00      	nop
 80171c0:	20007628 	.word	0x20007628
 80171c4:	2000762c 	.word	0x2000762c

080171c8 <__sfputc_r>:
 80171c8:	6893      	ldr	r3, [r2, #8]
 80171ca:	3b01      	subs	r3, #1
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	b410      	push	{r4}
 80171d0:	6093      	str	r3, [r2, #8]
 80171d2:	da08      	bge.n	80171e6 <__sfputc_r+0x1e>
 80171d4:	6994      	ldr	r4, [r2, #24]
 80171d6:	42a3      	cmp	r3, r4
 80171d8:	db01      	blt.n	80171de <__sfputc_r+0x16>
 80171da:	290a      	cmp	r1, #10
 80171dc:	d103      	bne.n	80171e6 <__sfputc_r+0x1e>
 80171de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171e2:	f000 bcbd 	b.w	8017b60 <__swbuf_r>
 80171e6:	6813      	ldr	r3, [r2, #0]
 80171e8:	1c58      	adds	r0, r3, #1
 80171ea:	6010      	str	r0, [r2, #0]
 80171ec:	7019      	strb	r1, [r3, #0]
 80171ee:	4608      	mov	r0, r1
 80171f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171f4:	4770      	bx	lr

080171f6 <__sfputs_r>:
 80171f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f8:	4606      	mov	r6, r0
 80171fa:	460f      	mov	r7, r1
 80171fc:	4614      	mov	r4, r2
 80171fe:	18d5      	adds	r5, r2, r3
 8017200:	42ac      	cmp	r4, r5
 8017202:	d101      	bne.n	8017208 <__sfputs_r+0x12>
 8017204:	2000      	movs	r0, #0
 8017206:	e007      	b.n	8017218 <__sfputs_r+0x22>
 8017208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801720c:	463a      	mov	r2, r7
 801720e:	4630      	mov	r0, r6
 8017210:	f7ff ffda 	bl	80171c8 <__sfputc_r>
 8017214:	1c43      	adds	r3, r0, #1
 8017216:	d1f3      	bne.n	8017200 <__sfputs_r+0xa>
 8017218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801721c <_vfiprintf_r>:
 801721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017220:	460d      	mov	r5, r1
 8017222:	b09d      	sub	sp, #116	; 0x74
 8017224:	4614      	mov	r4, r2
 8017226:	4698      	mov	r8, r3
 8017228:	4606      	mov	r6, r0
 801722a:	b118      	cbz	r0, 8017234 <_vfiprintf_r+0x18>
 801722c:	6983      	ldr	r3, [r0, #24]
 801722e:	b90b      	cbnz	r3, 8017234 <_vfiprintf_r+0x18>
 8017230:	f7ff fe14 	bl	8016e5c <__sinit>
 8017234:	4b89      	ldr	r3, [pc, #548]	; (801745c <_vfiprintf_r+0x240>)
 8017236:	429d      	cmp	r5, r3
 8017238:	d11b      	bne.n	8017272 <_vfiprintf_r+0x56>
 801723a:	6875      	ldr	r5, [r6, #4]
 801723c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801723e:	07d9      	lsls	r1, r3, #31
 8017240:	d405      	bmi.n	801724e <_vfiprintf_r+0x32>
 8017242:	89ab      	ldrh	r3, [r5, #12]
 8017244:	059a      	lsls	r2, r3, #22
 8017246:	d402      	bmi.n	801724e <_vfiprintf_r+0x32>
 8017248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801724a:	f7ff fedc 	bl	8017006 <__retarget_lock_acquire_recursive>
 801724e:	89ab      	ldrh	r3, [r5, #12]
 8017250:	071b      	lsls	r3, r3, #28
 8017252:	d501      	bpl.n	8017258 <_vfiprintf_r+0x3c>
 8017254:	692b      	ldr	r3, [r5, #16]
 8017256:	b9eb      	cbnz	r3, 8017294 <_vfiprintf_r+0x78>
 8017258:	4629      	mov	r1, r5
 801725a:	4630      	mov	r0, r6
 801725c:	f000 fce4 	bl	8017c28 <__swsetup_r>
 8017260:	b1c0      	cbz	r0, 8017294 <_vfiprintf_r+0x78>
 8017262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017264:	07dc      	lsls	r4, r3, #31
 8017266:	d50e      	bpl.n	8017286 <_vfiprintf_r+0x6a>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295
 801726c:	b01d      	add	sp, #116	; 0x74
 801726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017272:	4b7b      	ldr	r3, [pc, #492]	; (8017460 <_vfiprintf_r+0x244>)
 8017274:	429d      	cmp	r5, r3
 8017276:	d101      	bne.n	801727c <_vfiprintf_r+0x60>
 8017278:	68b5      	ldr	r5, [r6, #8]
 801727a:	e7df      	b.n	801723c <_vfiprintf_r+0x20>
 801727c:	4b79      	ldr	r3, [pc, #484]	; (8017464 <_vfiprintf_r+0x248>)
 801727e:	429d      	cmp	r5, r3
 8017280:	bf08      	it	eq
 8017282:	68f5      	ldreq	r5, [r6, #12]
 8017284:	e7da      	b.n	801723c <_vfiprintf_r+0x20>
 8017286:	89ab      	ldrh	r3, [r5, #12]
 8017288:	0598      	lsls	r0, r3, #22
 801728a:	d4ed      	bmi.n	8017268 <_vfiprintf_r+0x4c>
 801728c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801728e:	f7ff febb 	bl	8017008 <__retarget_lock_release_recursive>
 8017292:	e7e9      	b.n	8017268 <_vfiprintf_r+0x4c>
 8017294:	2300      	movs	r3, #0
 8017296:	9309      	str	r3, [sp, #36]	; 0x24
 8017298:	2320      	movs	r3, #32
 801729a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801729e:	f8cd 800c 	str.w	r8, [sp, #12]
 80172a2:	2330      	movs	r3, #48	; 0x30
 80172a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017468 <_vfiprintf_r+0x24c>
 80172a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172ac:	f04f 0901 	mov.w	r9, #1
 80172b0:	4623      	mov	r3, r4
 80172b2:	469a      	mov	sl, r3
 80172b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172b8:	b10a      	cbz	r2, 80172be <_vfiprintf_r+0xa2>
 80172ba:	2a25      	cmp	r2, #37	; 0x25
 80172bc:	d1f9      	bne.n	80172b2 <_vfiprintf_r+0x96>
 80172be:	ebba 0b04 	subs.w	fp, sl, r4
 80172c2:	d00b      	beq.n	80172dc <_vfiprintf_r+0xc0>
 80172c4:	465b      	mov	r3, fp
 80172c6:	4622      	mov	r2, r4
 80172c8:	4629      	mov	r1, r5
 80172ca:	4630      	mov	r0, r6
 80172cc:	f7ff ff93 	bl	80171f6 <__sfputs_r>
 80172d0:	3001      	adds	r0, #1
 80172d2:	f000 80aa 	beq.w	801742a <_vfiprintf_r+0x20e>
 80172d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172d8:	445a      	add	r2, fp
 80172da:	9209      	str	r2, [sp, #36]	; 0x24
 80172dc:	f89a 3000 	ldrb.w	r3, [sl]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	f000 80a2 	beq.w	801742a <_vfiprintf_r+0x20e>
 80172e6:	2300      	movs	r3, #0
 80172e8:	f04f 32ff 	mov.w	r2, #4294967295
 80172ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172f0:	f10a 0a01 	add.w	sl, sl, #1
 80172f4:	9304      	str	r3, [sp, #16]
 80172f6:	9307      	str	r3, [sp, #28]
 80172f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172fc:	931a      	str	r3, [sp, #104]	; 0x68
 80172fe:	4654      	mov	r4, sl
 8017300:	2205      	movs	r2, #5
 8017302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017306:	4858      	ldr	r0, [pc, #352]	; (8017468 <_vfiprintf_r+0x24c>)
 8017308:	f7e8 ff7a 	bl	8000200 <memchr>
 801730c:	9a04      	ldr	r2, [sp, #16]
 801730e:	b9d8      	cbnz	r0, 8017348 <_vfiprintf_r+0x12c>
 8017310:	06d1      	lsls	r1, r2, #27
 8017312:	bf44      	itt	mi
 8017314:	2320      	movmi	r3, #32
 8017316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801731a:	0713      	lsls	r3, r2, #28
 801731c:	bf44      	itt	mi
 801731e:	232b      	movmi	r3, #43	; 0x2b
 8017320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017324:	f89a 3000 	ldrb.w	r3, [sl]
 8017328:	2b2a      	cmp	r3, #42	; 0x2a
 801732a:	d015      	beq.n	8017358 <_vfiprintf_r+0x13c>
 801732c:	9a07      	ldr	r2, [sp, #28]
 801732e:	4654      	mov	r4, sl
 8017330:	2000      	movs	r0, #0
 8017332:	f04f 0c0a 	mov.w	ip, #10
 8017336:	4621      	mov	r1, r4
 8017338:	f811 3b01 	ldrb.w	r3, [r1], #1
 801733c:	3b30      	subs	r3, #48	; 0x30
 801733e:	2b09      	cmp	r3, #9
 8017340:	d94e      	bls.n	80173e0 <_vfiprintf_r+0x1c4>
 8017342:	b1b0      	cbz	r0, 8017372 <_vfiprintf_r+0x156>
 8017344:	9207      	str	r2, [sp, #28]
 8017346:	e014      	b.n	8017372 <_vfiprintf_r+0x156>
 8017348:	eba0 0308 	sub.w	r3, r0, r8
 801734c:	fa09 f303 	lsl.w	r3, r9, r3
 8017350:	4313      	orrs	r3, r2
 8017352:	9304      	str	r3, [sp, #16]
 8017354:	46a2      	mov	sl, r4
 8017356:	e7d2      	b.n	80172fe <_vfiprintf_r+0xe2>
 8017358:	9b03      	ldr	r3, [sp, #12]
 801735a:	1d19      	adds	r1, r3, #4
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	9103      	str	r1, [sp, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	bfbb      	ittet	lt
 8017364:	425b      	neglt	r3, r3
 8017366:	f042 0202 	orrlt.w	r2, r2, #2
 801736a:	9307      	strge	r3, [sp, #28]
 801736c:	9307      	strlt	r3, [sp, #28]
 801736e:	bfb8      	it	lt
 8017370:	9204      	strlt	r2, [sp, #16]
 8017372:	7823      	ldrb	r3, [r4, #0]
 8017374:	2b2e      	cmp	r3, #46	; 0x2e
 8017376:	d10c      	bne.n	8017392 <_vfiprintf_r+0x176>
 8017378:	7863      	ldrb	r3, [r4, #1]
 801737a:	2b2a      	cmp	r3, #42	; 0x2a
 801737c:	d135      	bne.n	80173ea <_vfiprintf_r+0x1ce>
 801737e:	9b03      	ldr	r3, [sp, #12]
 8017380:	1d1a      	adds	r2, r3, #4
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	9203      	str	r2, [sp, #12]
 8017386:	2b00      	cmp	r3, #0
 8017388:	bfb8      	it	lt
 801738a:	f04f 33ff 	movlt.w	r3, #4294967295
 801738e:	3402      	adds	r4, #2
 8017390:	9305      	str	r3, [sp, #20]
 8017392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017478 <_vfiprintf_r+0x25c>
 8017396:	7821      	ldrb	r1, [r4, #0]
 8017398:	2203      	movs	r2, #3
 801739a:	4650      	mov	r0, sl
 801739c:	f7e8 ff30 	bl	8000200 <memchr>
 80173a0:	b140      	cbz	r0, 80173b4 <_vfiprintf_r+0x198>
 80173a2:	2340      	movs	r3, #64	; 0x40
 80173a4:	eba0 000a 	sub.w	r0, r0, sl
 80173a8:	fa03 f000 	lsl.w	r0, r3, r0
 80173ac:	9b04      	ldr	r3, [sp, #16]
 80173ae:	4303      	orrs	r3, r0
 80173b0:	3401      	adds	r4, #1
 80173b2:	9304      	str	r3, [sp, #16]
 80173b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173b8:	482c      	ldr	r0, [pc, #176]	; (801746c <_vfiprintf_r+0x250>)
 80173ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173be:	2206      	movs	r2, #6
 80173c0:	f7e8 ff1e 	bl	8000200 <memchr>
 80173c4:	2800      	cmp	r0, #0
 80173c6:	d03f      	beq.n	8017448 <_vfiprintf_r+0x22c>
 80173c8:	4b29      	ldr	r3, [pc, #164]	; (8017470 <_vfiprintf_r+0x254>)
 80173ca:	bb1b      	cbnz	r3, 8017414 <_vfiprintf_r+0x1f8>
 80173cc:	9b03      	ldr	r3, [sp, #12]
 80173ce:	3307      	adds	r3, #7
 80173d0:	f023 0307 	bic.w	r3, r3, #7
 80173d4:	3308      	adds	r3, #8
 80173d6:	9303      	str	r3, [sp, #12]
 80173d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173da:	443b      	add	r3, r7
 80173dc:	9309      	str	r3, [sp, #36]	; 0x24
 80173de:	e767      	b.n	80172b0 <_vfiprintf_r+0x94>
 80173e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80173e4:	460c      	mov	r4, r1
 80173e6:	2001      	movs	r0, #1
 80173e8:	e7a5      	b.n	8017336 <_vfiprintf_r+0x11a>
 80173ea:	2300      	movs	r3, #0
 80173ec:	3401      	adds	r4, #1
 80173ee:	9305      	str	r3, [sp, #20]
 80173f0:	4619      	mov	r1, r3
 80173f2:	f04f 0c0a 	mov.w	ip, #10
 80173f6:	4620      	mov	r0, r4
 80173f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173fc:	3a30      	subs	r2, #48	; 0x30
 80173fe:	2a09      	cmp	r2, #9
 8017400:	d903      	bls.n	801740a <_vfiprintf_r+0x1ee>
 8017402:	2b00      	cmp	r3, #0
 8017404:	d0c5      	beq.n	8017392 <_vfiprintf_r+0x176>
 8017406:	9105      	str	r1, [sp, #20]
 8017408:	e7c3      	b.n	8017392 <_vfiprintf_r+0x176>
 801740a:	fb0c 2101 	mla	r1, ip, r1, r2
 801740e:	4604      	mov	r4, r0
 8017410:	2301      	movs	r3, #1
 8017412:	e7f0      	b.n	80173f6 <_vfiprintf_r+0x1da>
 8017414:	ab03      	add	r3, sp, #12
 8017416:	9300      	str	r3, [sp, #0]
 8017418:	462a      	mov	r2, r5
 801741a:	4b16      	ldr	r3, [pc, #88]	; (8017474 <_vfiprintf_r+0x258>)
 801741c:	a904      	add	r1, sp, #16
 801741e:	4630      	mov	r0, r6
 8017420:	f3af 8000 	nop.w
 8017424:	4607      	mov	r7, r0
 8017426:	1c78      	adds	r0, r7, #1
 8017428:	d1d6      	bne.n	80173d8 <_vfiprintf_r+0x1bc>
 801742a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801742c:	07d9      	lsls	r1, r3, #31
 801742e:	d405      	bmi.n	801743c <_vfiprintf_r+0x220>
 8017430:	89ab      	ldrh	r3, [r5, #12]
 8017432:	059a      	lsls	r2, r3, #22
 8017434:	d402      	bmi.n	801743c <_vfiprintf_r+0x220>
 8017436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017438:	f7ff fde6 	bl	8017008 <__retarget_lock_release_recursive>
 801743c:	89ab      	ldrh	r3, [r5, #12]
 801743e:	065b      	lsls	r3, r3, #25
 8017440:	f53f af12 	bmi.w	8017268 <_vfiprintf_r+0x4c>
 8017444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017446:	e711      	b.n	801726c <_vfiprintf_r+0x50>
 8017448:	ab03      	add	r3, sp, #12
 801744a:	9300      	str	r3, [sp, #0]
 801744c:	462a      	mov	r2, r5
 801744e:	4b09      	ldr	r3, [pc, #36]	; (8017474 <_vfiprintf_r+0x258>)
 8017450:	a904      	add	r1, sp, #16
 8017452:	4630      	mov	r0, r6
 8017454:	f000 f880 	bl	8017558 <_printf_i>
 8017458:	e7e4      	b.n	8017424 <_vfiprintf_r+0x208>
 801745a:	bf00      	nop
 801745c:	0801a1d4 	.word	0x0801a1d4
 8017460:	0801a1f4 	.word	0x0801a1f4
 8017464:	0801a1b4 	.word	0x0801a1b4
 8017468:	0801a218 	.word	0x0801a218
 801746c:	0801a222 	.word	0x0801a222
 8017470:	00000000 	.word	0x00000000
 8017474:	080171f7 	.word	0x080171f7
 8017478:	0801a21e 	.word	0x0801a21e

0801747c <_printf_common>:
 801747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017480:	4616      	mov	r6, r2
 8017482:	4699      	mov	r9, r3
 8017484:	688a      	ldr	r2, [r1, #8]
 8017486:	690b      	ldr	r3, [r1, #16]
 8017488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801748c:	4293      	cmp	r3, r2
 801748e:	bfb8      	it	lt
 8017490:	4613      	movlt	r3, r2
 8017492:	6033      	str	r3, [r6, #0]
 8017494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017498:	4607      	mov	r7, r0
 801749a:	460c      	mov	r4, r1
 801749c:	b10a      	cbz	r2, 80174a2 <_printf_common+0x26>
 801749e:	3301      	adds	r3, #1
 80174a0:	6033      	str	r3, [r6, #0]
 80174a2:	6823      	ldr	r3, [r4, #0]
 80174a4:	0699      	lsls	r1, r3, #26
 80174a6:	bf42      	ittt	mi
 80174a8:	6833      	ldrmi	r3, [r6, #0]
 80174aa:	3302      	addmi	r3, #2
 80174ac:	6033      	strmi	r3, [r6, #0]
 80174ae:	6825      	ldr	r5, [r4, #0]
 80174b0:	f015 0506 	ands.w	r5, r5, #6
 80174b4:	d106      	bne.n	80174c4 <_printf_common+0x48>
 80174b6:	f104 0a19 	add.w	sl, r4, #25
 80174ba:	68e3      	ldr	r3, [r4, #12]
 80174bc:	6832      	ldr	r2, [r6, #0]
 80174be:	1a9b      	subs	r3, r3, r2
 80174c0:	42ab      	cmp	r3, r5
 80174c2:	dc26      	bgt.n	8017512 <_printf_common+0x96>
 80174c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80174c8:	1e13      	subs	r3, r2, #0
 80174ca:	6822      	ldr	r2, [r4, #0]
 80174cc:	bf18      	it	ne
 80174ce:	2301      	movne	r3, #1
 80174d0:	0692      	lsls	r2, r2, #26
 80174d2:	d42b      	bmi.n	801752c <_printf_common+0xb0>
 80174d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80174d8:	4649      	mov	r1, r9
 80174da:	4638      	mov	r0, r7
 80174dc:	47c0      	blx	r8
 80174de:	3001      	adds	r0, #1
 80174e0:	d01e      	beq.n	8017520 <_printf_common+0xa4>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	68e5      	ldr	r5, [r4, #12]
 80174e6:	6832      	ldr	r2, [r6, #0]
 80174e8:	f003 0306 	and.w	r3, r3, #6
 80174ec:	2b04      	cmp	r3, #4
 80174ee:	bf08      	it	eq
 80174f0:	1aad      	subeq	r5, r5, r2
 80174f2:	68a3      	ldr	r3, [r4, #8]
 80174f4:	6922      	ldr	r2, [r4, #16]
 80174f6:	bf0c      	ite	eq
 80174f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174fc:	2500      	movne	r5, #0
 80174fe:	4293      	cmp	r3, r2
 8017500:	bfc4      	itt	gt
 8017502:	1a9b      	subgt	r3, r3, r2
 8017504:	18ed      	addgt	r5, r5, r3
 8017506:	2600      	movs	r6, #0
 8017508:	341a      	adds	r4, #26
 801750a:	42b5      	cmp	r5, r6
 801750c:	d11a      	bne.n	8017544 <_printf_common+0xc8>
 801750e:	2000      	movs	r0, #0
 8017510:	e008      	b.n	8017524 <_printf_common+0xa8>
 8017512:	2301      	movs	r3, #1
 8017514:	4652      	mov	r2, sl
 8017516:	4649      	mov	r1, r9
 8017518:	4638      	mov	r0, r7
 801751a:	47c0      	blx	r8
 801751c:	3001      	adds	r0, #1
 801751e:	d103      	bne.n	8017528 <_printf_common+0xac>
 8017520:	f04f 30ff 	mov.w	r0, #4294967295
 8017524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017528:	3501      	adds	r5, #1
 801752a:	e7c6      	b.n	80174ba <_printf_common+0x3e>
 801752c:	18e1      	adds	r1, r4, r3
 801752e:	1c5a      	adds	r2, r3, #1
 8017530:	2030      	movs	r0, #48	; 0x30
 8017532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017536:	4422      	add	r2, r4
 8017538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801753c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017540:	3302      	adds	r3, #2
 8017542:	e7c7      	b.n	80174d4 <_printf_common+0x58>
 8017544:	2301      	movs	r3, #1
 8017546:	4622      	mov	r2, r4
 8017548:	4649      	mov	r1, r9
 801754a:	4638      	mov	r0, r7
 801754c:	47c0      	blx	r8
 801754e:	3001      	adds	r0, #1
 8017550:	d0e6      	beq.n	8017520 <_printf_common+0xa4>
 8017552:	3601      	adds	r6, #1
 8017554:	e7d9      	b.n	801750a <_printf_common+0x8e>
	...

08017558 <_printf_i>:
 8017558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801755c:	460c      	mov	r4, r1
 801755e:	4691      	mov	r9, r2
 8017560:	7e27      	ldrb	r7, [r4, #24]
 8017562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017564:	2f78      	cmp	r7, #120	; 0x78
 8017566:	4680      	mov	r8, r0
 8017568:	469a      	mov	sl, r3
 801756a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801756e:	d807      	bhi.n	8017580 <_printf_i+0x28>
 8017570:	2f62      	cmp	r7, #98	; 0x62
 8017572:	d80a      	bhi.n	801758a <_printf_i+0x32>
 8017574:	2f00      	cmp	r7, #0
 8017576:	f000 80d8 	beq.w	801772a <_printf_i+0x1d2>
 801757a:	2f58      	cmp	r7, #88	; 0x58
 801757c:	f000 80a3 	beq.w	80176c6 <_printf_i+0x16e>
 8017580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017588:	e03a      	b.n	8017600 <_printf_i+0xa8>
 801758a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801758e:	2b15      	cmp	r3, #21
 8017590:	d8f6      	bhi.n	8017580 <_printf_i+0x28>
 8017592:	a001      	add	r0, pc, #4	; (adr r0, 8017598 <_printf_i+0x40>)
 8017594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017598:	080175f1 	.word	0x080175f1
 801759c:	08017605 	.word	0x08017605
 80175a0:	08017581 	.word	0x08017581
 80175a4:	08017581 	.word	0x08017581
 80175a8:	08017581 	.word	0x08017581
 80175ac:	08017581 	.word	0x08017581
 80175b0:	08017605 	.word	0x08017605
 80175b4:	08017581 	.word	0x08017581
 80175b8:	08017581 	.word	0x08017581
 80175bc:	08017581 	.word	0x08017581
 80175c0:	08017581 	.word	0x08017581
 80175c4:	08017711 	.word	0x08017711
 80175c8:	08017635 	.word	0x08017635
 80175cc:	080176f3 	.word	0x080176f3
 80175d0:	08017581 	.word	0x08017581
 80175d4:	08017581 	.word	0x08017581
 80175d8:	08017733 	.word	0x08017733
 80175dc:	08017581 	.word	0x08017581
 80175e0:	08017635 	.word	0x08017635
 80175e4:	08017581 	.word	0x08017581
 80175e8:	08017581 	.word	0x08017581
 80175ec:	080176fb 	.word	0x080176fb
 80175f0:	680b      	ldr	r3, [r1, #0]
 80175f2:	1d1a      	adds	r2, r3, #4
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	600a      	str	r2, [r1, #0]
 80175f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80175fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017600:	2301      	movs	r3, #1
 8017602:	e0a3      	b.n	801774c <_printf_i+0x1f4>
 8017604:	6825      	ldr	r5, [r4, #0]
 8017606:	6808      	ldr	r0, [r1, #0]
 8017608:	062e      	lsls	r6, r5, #24
 801760a:	f100 0304 	add.w	r3, r0, #4
 801760e:	d50a      	bpl.n	8017626 <_printf_i+0xce>
 8017610:	6805      	ldr	r5, [r0, #0]
 8017612:	600b      	str	r3, [r1, #0]
 8017614:	2d00      	cmp	r5, #0
 8017616:	da03      	bge.n	8017620 <_printf_i+0xc8>
 8017618:	232d      	movs	r3, #45	; 0x2d
 801761a:	426d      	negs	r5, r5
 801761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017620:	485e      	ldr	r0, [pc, #376]	; (801779c <_printf_i+0x244>)
 8017622:	230a      	movs	r3, #10
 8017624:	e019      	b.n	801765a <_printf_i+0x102>
 8017626:	f015 0f40 	tst.w	r5, #64	; 0x40
 801762a:	6805      	ldr	r5, [r0, #0]
 801762c:	600b      	str	r3, [r1, #0]
 801762e:	bf18      	it	ne
 8017630:	b22d      	sxthne	r5, r5
 8017632:	e7ef      	b.n	8017614 <_printf_i+0xbc>
 8017634:	680b      	ldr	r3, [r1, #0]
 8017636:	6825      	ldr	r5, [r4, #0]
 8017638:	1d18      	adds	r0, r3, #4
 801763a:	6008      	str	r0, [r1, #0]
 801763c:	0628      	lsls	r0, r5, #24
 801763e:	d501      	bpl.n	8017644 <_printf_i+0xec>
 8017640:	681d      	ldr	r5, [r3, #0]
 8017642:	e002      	b.n	801764a <_printf_i+0xf2>
 8017644:	0669      	lsls	r1, r5, #25
 8017646:	d5fb      	bpl.n	8017640 <_printf_i+0xe8>
 8017648:	881d      	ldrh	r5, [r3, #0]
 801764a:	4854      	ldr	r0, [pc, #336]	; (801779c <_printf_i+0x244>)
 801764c:	2f6f      	cmp	r7, #111	; 0x6f
 801764e:	bf0c      	ite	eq
 8017650:	2308      	moveq	r3, #8
 8017652:	230a      	movne	r3, #10
 8017654:	2100      	movs	r1, #0
 8017656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801765a:	6866      	ldr	r6, [r4, #4]
 801765c:	60a6      	str	r6, [r4, #8]
 801765e:	2e00      	cmp	r6, #0
 8017660:	bfa2      	ittt	ge
 8017662:	6821      	ldrge	r1, [r4, #0]
 8017664:	f021 0104 	bicge.w	r1, r1, #4
 8017668:	6021      	strge	r1, [r4, #0]
 801766a:	b90d      	cbnz	r5, 8017670 <_printf_i+0x118>
 801766c:	2e00      	cmp	r6, #0
 801766e:	d04d      	beq.n	801770c <_printf_i+0x1b4>
 8017670:	4616      	mov	r6, r2
 8017672:	fbb5 f1f3 	udiv	r1, r5, r3
 8017676:	fb03 5711 	mls	r7, r3, r1, r5
 801767a:	5dc7      	ldrb	r7, [r0, r7]
 801767c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017680:	462f      	mov	r7, r5
 8017682:	42bb      	cmp	r3, r7
 8017684:	460d      	mov	r5, r1
 8017686:	d9f4      	bls.n	8017672 <_printf_i+0x11a>
 8017688:	2b08      	cmp	r3, #8
 801768a:	d10b      	bne.n	80176a4 <_printf_i+0x14c>
 801768c:	6823      	ldr	r3, [r4, #0]
 801768e:	07df      	lsls	r7, r3, #31
 8017690:	d508      	bpl.n	80176a4 <_printf_i+0x14c>
 8017692:	6923      	ldr	r3, [r4, #16]
 8017694:	6861      	ldr	r1, [r4, #4]
 8017696:	4299      	cmp	r1, r3
 8017698:	bfde      	ittt	le
 801769a:	2330      	movle	r3, #48	; 0x30
 801769c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80176a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80176a4:	1b92      	subs	r2, r2, r6
 80176a6:	6122      	str	r2, [r4, #16]
 80176a8:	f8cd a000 	str.w	sl, [sp]
 80176ac:	464b      	mov	r3, r9
 80176ae:	aa03      	add	r2, sp, #12
 80176b0:	4621      	mov	r1, r4
 80176b2:	4640      	mov	r0, r8
 80176b4:	f7ff fee2 	bl	801747c <_printf_common>
 80176b8:	3001      	adds	r0, #1
 80176ba:	d14c      	bne.n	8017756 <_printf_i+0x1fe>
 80176bc:	f04f 30ff 	mov.w	r0, #4294967295
 80176c0:	b004      	add	sp, #16
 80176c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176c6:	4835      	ldr	r0, [pc, #212]	; (801779c <_printf_i+0x244>)
 80176c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80176cc:	6823      	ldr	r3, [r4, #0]
 80176ce:	680e      	ldr	r6, [r1, #0]
 80176d0:	061f      	lsls	r7, r3, #24
 80176d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80176d6:	600e      	str	r6, [r1, #0]
 80176d8:	d514      	bpl.n	8017704 <_printf_i+0x1ac>
 80176da:	07d9      	lsls	r1, r3, #31
 80176dc:	bf44      	itt	mi
 80176de:	f043 0320 	orrmi.w	r3, r3, #32
 80176e2:	6023      	strmi	r3, [r4, #0]
 80176e4:	b91d      	cbnz	r5, 80176ee <_printf_i+0x196>
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	f023 0320 	bic.w	r3, r3, #32
 80176ec:	6023      	str	r3, [r4, #0]
 80176ee:	2310      	movs	r3, #16
 80176f0:	e7b0      	b.n	8017654 <_printf_i+0xfc>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	f043 0320 	orr.w	r3, r3, #32
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	2378      	movs	r3, #120	; 0x78
 80176fc:	4828      	ldr	r0, [pc, #160]	; (80177a0 <_printf_i+0x248>)
 80176fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017702:	e7e3      	b.n	80176cc <_printf_i+0x174>
 8017704:	065e      	lsls	r6, r3, #25
 8017706:	bf48      	it	mi
 8017708:	b2ad      	uxthmi	r5, r5
 801770a:	e7e6      	b.n	80176da <_printf_i+0x182>
 801770c:	4616      	mov	r6, r2
 801770e:	e7bb      	b.n	8017688 <_printf_i+0x130>
 8017710:	680b      	ldr	r3, [r1, #0]
 8017712:	6826      	ldr	r6, [r4, #0]
 8017714:	6960      	ldr	r0, [r4, #20]
 8017716:	1d1d      	adds	r5, r3, #4
 8017718:	600d      	str	r5, [r1, #0]
 801771a:	0635      	lsls	r5, r6, #24
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	d501      	bpl.n	8017724 <_printf_i+0x1cc>
 8017720:	6018      	str	r0, [r3, #0]
 8017722:	e002      	b.n	801772a <_printf_i+0x1d2>
 8017724:	0671      	lsls	r1, r6, #25
 8017726:	d5fb      	bpl.n	8017720 <_printf_i+0x1c8>
 8017728:	8018      	strh	r0, [r3, #0]
 801772a:	2300      	movs	r3, #0
 801772c:	6123      	str	r3, [r4, #16]
 801772e:	4616      	mov	r6, r2
 8017730:	e7ba      	b.n	80176a8 <_printf_i+0x150>
 8017732:	680b      	ldr	r3, [r1, #0]
 8017734:	1d1a      	adds	r2, r3, #4
 8017736:	600a      	str	r2, [r1, #0]
 8017738:	681e      	ldr	r6, [r3, #0]
 801773a:	6862      	ldr	r2, [r4, #4]
 801773c:	2100      	movs	r1, #0
 801773e:	4630      	mov	r0, r6
 8017740:	f7e8 fd5e 	bl	8000200 <memchr>
 8017744:	b108      	cbz	r0, 801774a <_printf_i+0x1f2>
 8017746:	1b80      	subs	r0, r0, r6
 8017748:	6060      	str	r0, [r4, #4]
 801774a:	6863      	ldr	r3, [r4, #4]
 801774c:	6123      	str	r3, [r4, #16]
 801774e:	2300      	movs	r3, #0
 8017750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017754:	e7a8      	b.n	80176a8 <_printf_i+0x150>
 8017756:	6923      	ldr	r3, [r4, #16]
 8017758:	4632      	mov	r2, r6
 801775a:	4649      	mov	r1, r9
 801775c:	4640      	mov	r0, r8
 801775e:	47d0      	blx	sl
 8017760:	3001      	adds	r0, #1
 8017762:	d0ab      	beq.n	80176bc <_printf_i+0x164>
 8017764:	6823      	ldr	r3, [r4, #0]
 8017766:	079b      	lsls	r3, r3, #30
 8017768:	d413      	bmi.n	8017792 <_printf_i+0x23a>
 801776a:	68e0      	ldr	r0, [r4, #12]
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	4298      	cmp	r0, r3
 8017770:	bfb8      	it	lt
 8017772:	4618      	movlt	r0, r3
 8017774:	e7a4      	b.n	80176c0 <_printf_i+0x168>
 8017776:	2301      	movs	r3, #1
 8017778:	4632      	mov	r2, r6
 801777a:	4649      	mov	r1, r9
 801777c:	4640      	mov	r0, r8
 801777e:	47d0      	blx	sl
 8017780:	3001      	adds	r0, #1
 8017782:	d09b      	beq.n	80176bc <_printf_i+0x164>
 8017784:	3501      	adds	r5, #1
 8017786:	68e3      	ldr	r3, [r4, #12]
 8017788:	9903      	ldr	r1, [sp, #12]
 801778a:	1a5b      	subs	r3, r3, r1
 801778c:	42ab      	cmp	r3, r5
 801778e:	dcf2      	bgt.n	8017776 <_printf_i+0x21e>
 8017790:	e7eb      	b.n	801776a <_printf_i+0x212>
 8017792:	2500      	movs	r5, #0
 8017794:	f104 0619 	add.w	r6, r4, #25
 8017798:	e7f5      	b.n	8017786 <_printf_i+0x22e>
 801779a:	bf00      	nop
 801779c:	0801a229 	.word	0x0801a229
 80177a0:	0801a23a 	.word	0x0801a23a

080177a4 <iprintf>:
 80177a4:	b40f      	push	{r0, r1, r2, r3}
 80177a6:	4b0a      	ldr	r3, [pc, #40]	; (80177d0 <iprintf+0x2c>)
 80177a8:	b513      	push	{r0, r1, r4, lr}
 80177aa:	681c      	ldr	r4, [r3, #0]
 80177ac:	b124      	cbz	r4, 80177b8 <iprintf+0x14>
 80177ae:	69a3      	ldr	r3, [r4, #24]
 80177b0:	b913      	cbnz	r3, 80177b8 <iprintf+0x14>
 80177b2:	4620      	mov	r0, r4
 80177b4:	f7ff fb52 	bl	8016e5c <__sinit>
 80177b8:	ab05      	add	r3, sp, #20
 80177ba:	9a04      	ldr	r2, [sp, #16]
 80177bc:	68a1      	ldr	r1, [r4, #8]
 80177be:	9301      	str	r3, [sp, #4]
 80177c0:	4620      	mov	r0, r4
 80177c2:	f7ff fd2b 	bl	801721c <_vfiprintf_r>
 80177c6:	b002      	add	sp, #8
 80177c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177cc:	b004      	add	sp, #16
 80177ce:	4770      	bx	lr
 80177d0:	200001cc 	.word	0x200001cc

080177d4 <_puts_r>:
 80177d4:	b570      	push	{r4, r5, r6, lr}
 80177d6:	460e      	mov	r6, r1
 80177d8:	4605      	mov	r5, r0
 80177da:	b118      	cbz	r0, 80177e4 <_puts_r+0x10>
 80177dc:	6983      	ldr	r3, [r0, #24]
 80177de:	b90b      	cbnz	r3, 80177e4 <_puts_r+0x10>
 80177e0:	f7ff fb3c 	bl	8016e5c <__sinit>
 80177e4:	69ab      	ldr	r3, [r5, #24]
 80177e6:	68ac      	ldr	r4, [r5, #8]
 80177e8:	b913      	cbnz	r3, 80177f0 <_puts_r+0x1c>
 80177ea:	4628      	mov	r0, r5
 80177ec:	f7ff fb36 	bl	8016e5c <__sinit>
 80177f0:	4b2c      	ldr	r3, [pc, #176]	; (80178a4 <_puts_r+0xd0>)
 80177f2:	429c      	cmp	r4, r3
 80177f4:	d120      	bne.n	8017838 <_puts_r+0x64>
 80177f6:	686c      	ldr	r4, [r5, #4]
 80177f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177fa:	07db      	lsls	r3, r3, #31
 80177fc:	d405      	bmi.n	801780a <_puts_r+0x36>
 80177fe:	89a3      	ldrh	r3, [r4, #12]
 8017800:	0598      	lsls	r0, r3, #22
 8017802:	d402      	bmi.n	801780a <_puts_r+0x36>
 8017804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017806:	f7ff fbfe 	bl	8017006 <__retarget_lock_acquire_recursive>
 801780a:	89a3      	ldrh	r3, [r4, #12]
 801780c:	0719      	lsls	r1, r3, #28
 801780e:	d51d      	bpl.n	801784c <_puts_r+0x78>
 8017810:	6923      	ldr	r3, [r4, #16]
 8017812:	b1db      	cbz	r3, 801784c <_puts_r+0x78>
 8017814:	3e01      	subs	r6, #1
 8017816:	68a3      	ldr	r3, [r4, #8]
 8017818:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801781c:	3b01      	subs	r3, #1
 801781e:	60a3      	str	r3, [r4, #8]
 8017820:	bb39      	cbnz	r1, 8017872 <_puts_r+0x9e>
 8017822:	2b00      	cmp	r3, #0
 8017824:	da38      	bge.n	8017898 <_puts_r+0xc4>
 8017826:	4622      	mov	r2, r4
 8017828:	210a      	movs	r1, #10
 801782a:	4628      	mov	r0, r5
 801782c:	f000 f998 	bl	8017b60 <__swbuf_r>
 8017830:	3001      	adds	r0, #1
 8017832:	d011      	beq.n	8017858 <_puts_r+0x84>
 8017834:	250a      	movs	r5, #10
 8017836:	e011      	b.n	801785c <_puts_r+0x88>
 8017838:	4b1b      	ldr	r3, [pc, #108]	; (80178a8 <_puts_r+0xd4>)
 801783a:	429c      	cmp	r4, r3
 801783c:	d101      	bne.n	8017842 <_puts_r+0x6e>
 801783e:	68ac      	ldr	r4, [r5, #8]
 8017840:	e7da      	b.n	80177f8 <_puts_r+0x24>
 8017842:	4b1a      	ldr	r3, [pc, #104]	; (80178ac <_puts_r+0xd8>)
 8017844:	429c      	cmp	r4, r3
 8017846:	bf08      	it	eq
 8017848:	68ec      	ldreq	r4, [r5, #12]
 801784a:	e7d5      	b.n	80177f8 <_puts_r+0x24>
 801784c:	4621      	mov	r1, r4
 801784e:	4628      	mov	r0, r5
 8017850:	f000 f9ea 	bl	8017c28 <__swsetup_r>
 8017854:	2800      	cmp	r0, #0
 8017856:	d0dd      	beq.n	8017814 <_puts_r+0x40>
 8017858:	f04f 35ff 	mov.w	r5, #4294967295
 801785c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801785e:	07da      	lsls	r2, r3, #31
 8017860:	d405      	bmi.n	801786e <_puts_r+0x9a>
 8017862:	89a3      	ldrh	r3, [r4, #12]
 8017864:	059b      	lsls	r3, r3, #22
 8017866:	d402      	bmi.n	801786e <_puts_r+0x9a>
 8017868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801786a:	f7ff fbcd 	bl	8017008 <__retarget_lock_release_recursive>
 801786e:	4628      	mov	r0, r5
 8017870:	bd70      	pop	{r4, r5, r6, pc}
 8017872:	2b00      	cmp	r3, #0
 8017874:	da04      	bge.n	8017880 <_puts_r+0xac>
 8017876:	69a2      	ldr	r2, [r4, #24]
 8017878:	429a      	cmp	r2, r3
 801787a:	dc06      	bgt.n	801788a <_puts_r+0xb6>
 801787c:	290a      	cmp	r1, #10
 801787e:	d004      	beq.n	801788a <_puts_r+0xb6>
 8017880:	6823      	ldr	r3, [r4, #0]
 8017882:	1c5a      	adds	r2, r3, #1
 8017884:	6022      	str	r2, [r4, #0]
 8017886:	7019      	strb	r1, [r3, #0]
 8017888:	e7c5      	b.n	8017816 <_puts_r+0x42>
 801788a:	4622      	mov	r2, r4
 801788c:	4628      	mov	r0, r5
 801788e:	f000 f967 	bl	8017b60 <__swbuf_r>
 8017892:	3001      	adds	r0, #1
 8017894:	d1bf      	bne.n	8017816 <_puts_r+0x42>
 8017896:	e7df      	b.n	8017858 <_puts_r+0x84>
 8017898:	6823      	ldr	r3, [r4, #0]
 801789a:	250a      	movs	r5, #10
 801789c:	1c5a      	adds	r2, r3, #1
 801789e:	6022      	str	r2, [r4, #0]
 80178a0:	701d      	strb	r5, [r3, #0]
 80178a2:	e7db      	b.n	801785c <_puts_r+0x88>
 80178a4:	0801a1d4 	.word	0x0801a1d4
 80178a8:	0801a1f4 	.word	0x0801a1f4
 80178ac:	0801a1b4 	.word	0x0801a1b4

080178b0 <puts>:
 80178b0:	4b02      	ldr	r3, [pc, #8]	; (80178bc <puts+0xc>)
 80178b2:	4601      	mov	r1, r0
 80178b4:	6818      	ldr	r0, [r3, #0]
 80178b6:	f7ff bf8d 	b.w	80177d4 <_puts_r>
 80178ba:	bf00      	nop
 80178bc:	200001cc 	.word	0x200001cc

080178c0 <cleanup_glue>:
 80178c0:	b538      	push	{r3, r4, r5, lr}
 80178c2:	460c      	mov	r4, r1
 80178c4:	6809      	ldr	r1, [r1, #0]
 80178c6:	4605      	mov	r5, r0
 80178c8:	b109      	cbz	r1, 80178ce <cleanup_glue+0xe>
 80178ca:	f7ff fff9 	bl	80178c0 <cleanup_glue>
 80178ce:	4621      	mov	r1, r4
 80178d0:	4628      	mov	r0, r5
 80178d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178d6:	f7ff bbcd 	b.w	8017074 <_free_r>
	...

080178dc <_reclaim_reent>:
 80178dc:	4b2c      	ldr	r3, [pc, #176]	; (8017990 <_reclaim_reent+0xb4>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	4283      	cmp	r3, r0
 80178e2:	b570      	push	{r4, r5, r6, lr}
 80178e4:	4604      	mov	r4, r0
 80178e6:	d051      	beq.n	801798c <_reclaim_reent+0xb0>
 80178e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80178ea:	b143      	cbz	r3, 80178fe <_reclaim_reent+0x22>
 80178ec:	68db      	ldr	r3, [r3, #12]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d14a      	bne.n	8017988 <_reclaim_reent+0xac>
 80178f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178f4:	6819      	ldr	r1, [r3, #0]
 80178f6:	b111      	cbz	r1, 80178fe <_reclaim_reent+0x22>
 80178f8:	4620      	mov	r0, r4
 80178fa:	f7ff fbbb 	bl	8017074 <_free_r>
 80178fe:	6961      	ldr	r1, [r4, #20]
 8017900:	b111      	cbz	r1, 8017908 <_reclaim_reent+0x2c>
 8017902:	4620      	mov	r0, r4
 8017904:	f7ff fbb6 	bl	8017074 <_free_r>
 8017908:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801790a:	b111      	cbz	r1, 8017912 <_reclaim_reent+0x36>
 801790c:	4620      	mov	r0, r4
 801790e:	f7ff fbb1 	bl	8017074 <_free_r>
 8017912:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017914:	b111      	cbz	r1, 801791c <_reclaim_reent+0x40>
 8017916:	4620      	mov	r0, r4
 8017918:	f7ff fbac 	bl	8017074 <_free_r>
 801791c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801791e:	b111      	cbz	r1, 8017926 <_reclaim_reent+0x4a>
 8017920:	4620      	mov	r0, r4
 8017922:	f7ff fba7 	bl	8017074 <_free_r>
 8017926:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017928:	b111      	cbz	r1, 8017930 <_reclaim_reent+0x54>
 801792a:	4620      	mov	r0, r4
 801792c:	f7ff fba2 	bl	8017074 <_free_r>
 8017930:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017932:	b111      	cbz	r1, 801793a <_reclaim_reent+0x5e>
 8017934:	4620      	mov	r0, r4
 8017936:	f7ff fb9d 	bl	8017074 <_free_r>
 801793a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801793c:	b111      	cbz	r1, 8017944 <_reclaim_reent+0x68>
 801793e:	4620      	mov	r0, r4
 8017940:	f7ff fb98 	bl	8017074 <_free_r>
 8017944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017946:	b111      	cbz	r1, 801794e <_reclaim_reent+0x72>
 8017948:	4620      	mov	r0, r4
 801794a:	f7ff fb93 	bl	8017074 <_free_r>
 801794e:	69a3      	ldr	r3, [r4, #24]
 8017950:	b1e3      	cbz	r3, 801798c <_reclaim_reent+0xb0>
 8017952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017954:	4620      	mov	r0, r4
 8017956:	4798      	blx	r3
 8017958:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801795a:	b1b9      	cbz	r1, 801798c <_reclaim_reent+0xb0>
 801795c:	4620      	mov	r0, r4
 801795e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017962:	f7ff bfad 	b.w	80178c0 <cleanup_glue>
 8017966:	5949      	ldr	r1, [r1, r5]
 8017968:	b941      	cbnz	r1, 801797c <_reclaim_reent+0xa0>
 801796a:	3504      	adds	r5, #4
 801796c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801796e:	2d80      	cmp	r5, #128	; 0x80
 8017970:	68d9      	ldr	r1, [r3, #12]
 8017972:	d1f8      	bne.n	8017966 <_reclaim_reent+0x8a>
 8017974:	4620      	mov	r0, r4
 8017976:	f7ff fb7d 	bl	8017074 <_free_r>
 801797a:	e7ba      	b.n	80178f2 <_reclaim_reent+0x16>
 801797c:	680e      	ldr	r6, [r1, #0]
 801797e:	4620      	mov	r0, r4
 8017980:	f7ff fb78 	bl	8017074 <_free_r>
 8017984:	4631      	mov	r1, r6
 8017986:	e7ef      	b.n	8017968 <_reclaim_reent+0x8c>
 8017988:	2500      	movs	r5, #0
 801798a:	e7ef      	b.n	801796c <_reclaim_reent+0x90>
 801798c:	bd70      	pop	{r4, r5, r6, pc}
 801798e:	bf00      	nop
 8017990:	200001cc 	.word	0x200001cc

08017994 <_sbrk_r>:
 8017994:	b538      	push	{r3, r4, r5, lr}
 8017996:	4d06      	ldr	r5, [pc, #24]	; (80179b0 <_sbrk_r+0x1c>)
 8017998:	2300      	movs	r3, #0
 801799a:	4604      	mov	r4, r0
 801799c:	4608      	mov	r0, r1
 801799e:	602b      	str	r3, [r5, #0]
 80179a0:	f7ec fb42 	bl	8004028 <_sbrk>
 80179a4:	1c43      	adds	r3, r0, #1
 80179a6:	d102      	bne.n	80179ae <_sbrk_r+0x1a>
 80179a8:	682b      	ldr	r3, [r5, #0]
 80179aa:	b103      	cbz	r3, 80179ae <_sbrk_r+0x1a>
 80179ac:	6023      	str	r3, [r4, #0]
 80179ae:	bd38      	pop	{r3, r4, r5, pc}
 80179b0:	20009f78 	.word	0x20009f78

080179b4 <siprintf>:
 80179b4:	b40e      	push	{r1, r2, r3}
 80179b6:	b500      	push	{lr}
 80179b8:	b09c      	sub	sp, #112	; 0x70
 80179ba:	ab1d      	add	r3, sp, #116	; 0x74
 80179bc:	9002      	str	r0, [sp, #8]
 80179be:	9006      	str	r0, [sp, #24]
 80179c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80179c4:	4809      	ldr	r0, [pc, #36]	; (80179ec <siprintf+0x38>)
 80179c6:	9107      	str	r1, [sp, #28]
 80179c8:	9104      	str	r1, [sp, #16]
 80179ca:	4909      	ldr	r1, [pc, #36]	; (80179f0 <siprintf+0x3c>)
 80179cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80179d0:	9105      	str	r1, [sp, #20]
 80179d2:	6800      	ldr	r0, [r0, #0]
 80179d4:	9301      	str	r3, [sp, #4]
 80179d6:	a902      	add	r1, sp, #8
 80179d8:	f000 fb8c 	bl	80180f4 <_svfiprintf_r>
 80179dc:	9b02      	ldr	r3, [sp, #8]
 80179de:	2200      	movs	r2, #0
 80179e0:	701a      	strb	r2, [r3, #0]
 80179e2:	b01c      	add	sp, #112	; 0x70
 80179e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80179e8:	b003      	add	sp, #12
 80179ea:	4770      	bx	lr
 80179ec:	200001cc 	.word	0x200001cc
 80179f0:	ffff0208 	.word	0xffff0208

080179f4 <__sread>:
 80179f4:	b510      	push	{r4, lr}
 80179f6:	460c      	mov	r4, r1
 80179f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179fc:	f000 fc7a 	bl	80182f4 <_read_r>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	bfab      	itete	ge
 8017a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017a06:	89a3      	ldrhlt	r3, [r4, #12]
 8017a08:	181b      	addge	r3, r3, r0
 8017a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017a0e:	bfac      	ite	ge
 8017a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8017a12:	81a3      	strhlt	r3, [r4, #12]
 8017a14:	bd10      	pop	{r4, pc}

08017a16 <__swrite>:
 8017a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a1a:	461f      	mov	r7, r3
 8017a1c:	898b      	ldrh	r3, [r1, #12]
 8017a1e:	05db      	lsls	r3, r3, #23
 8017a20:	4605      	mov	r5, r0
 8017a22:	460c      	mov	r4, r1
 8017a24:	4616      	mov	r6, r2
 8017a26:	d505      	bpl.n	8017a34 <__swrite+0x1e>
 8017a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a2c:	2302      	movs	r3, #2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	f000 fa42 	bl	8017eb8 <_lseek_r>
 8017a34:	89a3      	ldrh	r3, [r4, #12]
 8017a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a3e:	81a3      	strh	r3, [r4, #12]
 8017a40:	4632      	mov	r2, r6
 8017a42:	463b      	mov	r3, r7
 8017a44:	4628      	mov	r0, r5
 8017a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a4a:	f000 b8db 	b.w	8017c04 <_write_r>

08017a4e <__sseek>:
 8017a4e:	b510      	push	{r4, lr}
 8017a50:	460c      	mov	r4, r1
 8017a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a56:	f000 fa2f 	bl	8017eb8 <_lseek_r>
 8017a5a:	1c43      	adds	r3, r0, #1
 8017a5c:	89a3      	ldrh	r3, [r4, #12]
 8017a5e:	bf15      	itete	ne
 8017a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a6a:	81a3      	strheq	r3, [r4, #12]
 8017a6c:	bf18      	it	ne
 8017a6e:	81a3      	strhne	r3, [r4, #12]
 8017a70:	bd10      	pop	{r4, pc}

08017a72 <__sclose>:
 8017a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a76:	f000 b94d 	b.w	8017d14 <_close_r>

08017a7a <strchr>:
 8017a7a:	b2c9      	uxtb	r1, r1
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a82:	b11a      	cbz	r2, 8017a8c <strchr+0x12>
 8017a84:	428a      	cmp	r2, r1
 8017a86:	d1f9      	bne.n	8017a7c <strchr+0x2>
 8017a88:	4618      	mov	r0, r3
 8017a8a:	4770      	bx	lr
 8017a8c:	2900      	cmp	r1, #0
 8017a8e:	bf18      	it	ne
 8017a90:	2300      	movne	r3, #0
 8017a92:	e7f9      	b.n	8017a88 <strchr+0xe>

08017a94 <strcspn>:
 8017a94:	b570      	push	{r4, r5, r6, lr}
 8017a96:	4603      	mov	r3, r0
 8017a98:	461e      	mov	r6, r3
 8017a9a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8017a9e:	b144      	cbz	r4, 8017ab2 <strcspn+0x1e>
 8017aa0:	1e4a      	subs	r2, r1, #1
 8017aa2:	e001      	b.n	8017aa8 <strcspn+0x14>
 8017aa4:	42a5      	cmp	r5, r4
 8017aa6:	d004      	beq.n	8017ab2 <strcspn+0x1e>
 8017aa8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8017aac:	2d00      	cmp	r5, #0
 8017aae:	d1f9      	bne.n	8017aa4 <strcspn+0x10>
 8017ab0:	e7f2      	b.n	8017a98 <strcspn+0x4>
 8017ab2:	1a30      	subs	r0, r6, r0
 8017ab4:	bd70      	pop	{r4, r5, r6, pc}

08017ab6 <strspn>:
 8017ab6:	b570      	push	{r4, r5, r6, lr}
 8017ab8:	4603      	mov	r3, r0
 8017aba:	461e      	mov	r6, r3
 8017abc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8017ac0:	b13c      	cbz	r4, 8017ad2 <strspn+0x1c>
 8017ac2:	1e4a      	subs	r2, r1, #1
 8017ac4:	e001      	b.n	8017aca <strspn+0x14>
 8017ac6:	42a5      	cmp	r5, r4
 8017ac8:	d0f7      	beq.n	8017aba <strspn+0x4>
 8017aca:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8017ace:	2d00      	cmp	r5, #0
 8017ad0:	d1f9      	bne.n	8017ac6 <strspn+0x10>
 8017ad2:	1a30      	subs	r0, r6, r0
 8017ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08017ad8 <write>:
 8017ad8:	4613      	mov	r3, r2
 8017ada:	460a      	mov	r2, r1
 8017adc:	4601      	mov	r1, r0
 8017ade:	4802      	ldr	r0, [pc, #8]	; (8017ae8 <write+0x10>)
 8017ae0:	6800      	ldr	r0, [r0, #0]
 8017ae2:	f000 b88f 	b.w	8017c04 <_write_r>
 8017ae6:	bf00      	nop
 8017ae8:	200001cc 	.word	0x200001cc

08017aec <_vsniprintf_r>:
 8017aec:	b530      	push	{r4, r5, lr}
 8017aee:	1e14      	subs	r4, r2, #0
 8017af0:	4605      	mov	r5, r0
 8017af2:	b09b      	sub	sp, #108	; 0x6c
 8017af4:	4618      	mov	r0, r3
 8017af6:	da05      	bge.n	8017b04 <_vsniprintf_r+0x18>
 8017af8:	238b      	movs	r3, #139	; 0x8b
 8017afa:	602b      	str	r3, [r5, #0]
 8017afc:	f04f 30ff 	mov.w	r0, #4294967295
 8017b00:	b01b      	add	sp, #108	; 0x6c
 8017b02:	bd30      	pop	{r4, r5, pc}
 8017b04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017b08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b0c:	bf14      	ite	ne
 8017b0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b12:	4623      	moveq	r3, r4
 8017b14:	9302      	str	r3, [sp, #8]
 8017b16:	9305      	str	r3, [sp, #20]
 8017b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b1c:	9100      	str	r1, [sp, #0]
 8017b1e:	9104      	str	r1, [sp, #16]
 8017b20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b24:	4602      	mov	r2, r0
 8017b26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017b28:	4669      	mov	r1, sp
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	f000 fae2 	bl	80180f4 <_svfiprintf_r>
 8017b30:	1c43      	adds	r3, r0, #1
 8017b32:	bfbc      	itt	lt
 8017b34:	238b      	movlt	r3, #139	; 0x8b
 8017b36:	602b      	strlt	r3, [r5, #0]
 8017b38:	2c00      	cmp	r4, #0
 8017b3a:	d0e1      	beq.n	8017b00 <_vsniprintf_r+0x14>
 8017b3c:	9b00      	ldr	r3, [sp, #0]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	701a      	strb	r2, [r3, #0]
 8017b42:	e7dd      	b.n	8017b00 <_vsniprintf_r+0x14>

08017b44 <vsniprintf>:
 8017b44:	b507      	push	{r0, r1, r2, lr}
 8017b46:	9300      	str	r3, [sp, #0]
 8017b48:	4613      	mov	r3, r2
 8017b4a:	460a      	mov	r2, r1
 8017b4c:	4601      	mov	r1, r0
 8017b4e:	4803      	ldr	r0, [pc, #12]	; (8017b5c <vsniprintf+0x18>)
 8017b50:	6800      	ldr	r0, [r0, #0]
 8017b52:	f7ff ffcb 	bl	8017aec <_vsniprintf_r>
 8017b56:	b003      	add	sp, #12
 8017b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b5c:	200001cc 	.word	0x200001cc

08017b60 <__swbuf_r>:
 8017b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b62:	460e      	mov	r6, r1
 8017b64:	4614      	mov	r4, r2
 8017b66:	4605      	mov	r5, r0
 8017b68:	b118      	cbz	r0, 8017b72 <__swbuf_r+0x12>
 8017b6a:	6983      	ldr	r3, [r0, #24]
 8017b6c:	b90b      	cbnz	r3, 8017b72 <__swbuf_r+0x12>
 8017b6e:	f7ff f975 	bl	8016e5c <__sinit>
 8017b72:	4b21      	ldr	r3, [pc, #132]	; (8017bf8 <__swbuf_r+0x98>)
 8017b74:	429c      	cmp	r4, r3
 8017b76:	d12b      	bne.n	8017bd0 <__swbuf_r+0x70>
 8017b78:	686c      	ldr	r4, [r5, #4]
 8017b7a:	69a3      	ldr	r3, [r4, #24]
 8017b7c:	60a3      	str	r3, [r4, #8]
 8017b7e:	89a3      	ldrh	r3, [r4, #12]
 8017b80:	071a      	lsls	r2, r3, #28
 8017b82:	d52f      	bpl.n	8017be4 <__swbuf_r+0x84>
 8017b84:	6923      	ldr	r3, [r4, #16]
 8017b86:	b36b      	cbz	r3, 8017be4 <__swbuf_r+0x84>
 8017b88:	6923      	ldr	r3, [r4, #16]
 8017b8a:	6820      	ldr	r0, [r4, #0]
 8017b8c:	1ac0      	subs	r0, r0, r3
 8017b8e:	6963      	ldr	r3, [r4, #20]
 8017b90:	b2f6      	uxtb	r6, r6
 8017b92:	4283      	cmp	r3, r0
 8017b94:	4637      	mov	r7, r6
 8017b96:	dc04      	bgt.n	8017ba2 <__swbuf_r+0x42>
 8017b98:	4621      	mov	r1, r4
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	f000 f950 	bl	8017e40 <_fflush_r>
 8017ba0:	bb30      	cbnz	r0, 8017bf0 <__swbuf_r+0x90>
 8017ba2:	68a3      	ldr	r3, [r4, #8]
 8017ba4:	3b01      	subs	r3, #1
 8017ba6:	60a3      	str	r3, [r4, #8]
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	1c5a      	adds	r2, r3, #1
 8017bac:	6022      	str	r2, [r4, #0]
 8017bae:	701e      	strb	r6, [r3, #0]
 8017bb0:	6963      	ldr	r3, [r4, #20]
 8017bb2:	3001      	adds	r0, #1
 8017bb4:	4283      	cmp	r3, r0
 8017bb6:	d004      	beq.n	8017bc2 <__swbuf_r+0x62>
 8017bb8:	89a3      	ldrh	r3, [r4, #12]
 8017bba:	07db      	lsls	r3, r3, #31
 8017bbc:	d506      	bpl.n	8017bcc <__swbuf_r+0x6c>
 8017bbe:	2e0a      	cmp	r6, #10
 8017bc0:	d104      	bne.n	8017bcc <__swbuf_r+0x6c>
 8017bc2:	4621      	mov	r1, r4
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	f000 f93b 	bl	8017e40 <_fflush_r>
 8017bca:	b988      	cbnz	r0, 8017bf0 <__swbuf_r+0x90>
 8017bcc:	4638      	mov	r0, r7
 8017bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bd0:	4b0a      	ldr	r3, [pc, #40]	; (8017bfc <__swbuf_r+0x9c>)
 8017bd2:	429c      	cmp	r4, r3
 8017bd4:	d101      	bne.n	8017bda <__swbuf_r+0x7a>
 8017bd6:	68ac      	ldr	r4, [r5, #8]
 8017bd8:	e7cf      	b.n	8017b7a <__swbuf_r+0x1a>
 8017bda:	4b09      	ldr	r3, [pc, #36]	; (8017c00 <__swbuf_r+0xa0>)
 8017bdc:	429c      	cmp	r4, r3
 8017bde:	bf08      	it	eq
 8017be0:	68ec      	ldreq	r4, [r5, #12]
 8017be2:	e7ca      	b.n	8017b7a <__swbuf_r+0x1a>
 8017be4:	4621      	mov	r1, r4
 8017be6:	4628      	mov	r0, r5
 8017be8:	f000 f81e 	bl	8017c28 <__swsetup_r>
 8017bec:	2800      	cmp	r0, #0
 8017bee:	d0cb      	beq.n	8017b88 <__swbuf_r+0x28>
 8017bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8017bf4:	e7ea      	b.n	8017bcc <__swbuf_r+0x6c>
 8017bf6:	bf00      	nop
 8017bf8:	0801a1d4 	.word	0x0801a1d4
 8017bfc:	0801a1f4 	.word	0x0801a1f4
 8017c00:	0801a1b4 	.word	0x0801a1b4

08017c04 <_write_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4d07      	ldr	r5, [pc, #28]	; (8017c24 <_write_r+0x20>)
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	2200      	movs	r2, #0
 8017c10:	602a      	str	r2, [r5, #0]
 8017c12:	461a      	mov	r2, r3
 8017c14:	f7ec f9b7 	bl	8003f86 <_write>
 8017c18:	1c43      	adds	r3, r0, #1
 8017c1a:	d102      	bne.n	8017c22 <_write_r+0x1e>
 8017c1c:	682b      	ldr	r3, [r5, #0]
 8017c1e:	b103      	cbz	r3, 8017c22 <_write_r+0x1e>
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	20009f78 	.word	0x20009f78

08017c28 <__swsetup_r>:
 8017c28:	4b32      	ldr	r3, [pc, #200]	; (8017cf4 <__swsetup_r+0xcc>)
 8017c2a:	b570      	push	{r4, r5, r6, lr}
 8017c2c:	681d      	ldr	r5, [r3, #0]
 8017c2e:	4606      	mov	r6, r0
 8017c30:	460c      	mov	r4, r1
 8017c32:	b125      	cbz	r5, 8017c3e <__swsetup_r+0x16>
 8017c34:	69ab      	ldr	r3, [r5, #24]
 8017c36:	b913      	cbnz	r3, 8017c3e <__swsetup_r+0x16>
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f7ff f90f 	bl	8016e5c <__sinit>
 8017c3e:	4b2e      	ldr	r3, [pc, #184]	; (8017cf8 <__swsetup_r+0xd0>)
 8017c40:	429c      	cmp	r4, r3
 8017c42:	d10f      	bne.n	8017c64 <__swsetup_r+0x3c>
 8017c44:	686c      	ldr	r4, [r5, #4]
 8017c46:	89a3      	ldrh	r3, [r4, #12]
 8017c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c4c:	0719      	lsls	r1, r3, #28
 8017c4e:	d42c      	bmi.n	8017caa <__swsetup_r+0x82>
 8017c50:	06dd      	lsls	r5, r3, #27
 8017c52:	d411      	bmi.n	8017c78 <__swsetup_r+0x50>
 8017c54:	2309      	movs	r3, #9
 8017c56:	6033      	str	r3, [r6, #0]
 8017c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c5c:	81a3      	strh	r3, [r4, #12]
 8017c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c62:	e03e      	b.n	8017ce2 <__swsetup_r+0xba>
 8017c64:	4b25      	ldr	r3, [pc, #148]	; (8017cfc <__swsetup_r+0xd4>)
 8017c66:	429c      	cmp	r4, r3
 8017c68:	d101      	bne.n	8017c6e <__swsetup_r+0x46>
 8017c6a:	68ac      	ldr	r4, [r5, #8]
 8017c6c:	e7eb      	b.n	8017c46 <__swsetup_r+0x1e>
 8017c6e:	4b24      	ldr	r3, [pc, #144]	; (8017d00 <__swsetup_r+0xd8>)
 8017c70:	429c      	cmp	r4, r3
 8017c72:	bf08      	it	eq
 8017c74:	68ec      	ldreq	r4, [r5, #12]
 8017c76:	e7e6      	b.n	8017c46 <__swsetup_r+0x1e>
 8017c78:	0758      	lsls	r0, r3, #29
 8017c7a:	d512      	bpl.n	8017ca2 <__swsetup_r+0x7a>
 8017c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c7e:	b141      	cbz	r1, 8017c92 <__swsetup_r+0x6a>
 8017c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c84:	4299      	cmp	r1, r3
 8017c86:	d002      	beq.n	8017c8e <__swsetup_r+0x66>
 8017c88:	4630      	mov	r0, r6
 8017c8a:	f7ff f9f3 	bl	8017074 <_free_r>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	6363      	str	r3, [r4, #52]	; 0x34
 8017c92:	89a3      	ldrh	r3, [r4, #12]
 8017c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c98:	81a3      	strh	r3, [r4, #12]
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	6063      	str	r3, [r4, #4]
 8017c9e:	6923      	ldr	r3, [r4, #16]
 8017ca0:	6023      	str	r3, [r4, #0]
 8017ca2:	89a3      	ldrh	r3, [r4, #12]
 8017ca4:	f043 0308 	orr.w	r3, r3, #8
 8017ca8:	81a3      	strh	r3, [r4, #12]
 8017caa:	6923      	ldr	r3, [r4, #16]
 8017cac:	b94b      	cbnz	r3, 8017cc2 <__swsetup_r+0x9a>
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cb8:	d003      	beq.n	8017cc2 <__swsetup_r+0x9a>
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	f000 f931 	bl	8017f24 <__smakebuf_r>
 8017cc2:	89a0      	ldrh	r0, [r4, #12]
 8017cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017cc8:	f010 0301 	ands.w	r3, r0, #1
 8017ccc:	d00a      	beq.n	8017ce4 <__swsetup_r+0xbc>
 8017cce:	2300      	movs	r3, #0
 8017cd0:	60a3      	str	r3, [r4, #8]
 8017cd2:	6963      	ldr	r3, [r4, #20]
 8017cd4:	425b      	negs	r3, r3
 8017cd6:	61a3      	str	r3, [r4, #24]
 8017cd8:	6923      	ldr	r3, [r4, #16]
 8017cda:	b943      	cbnz	r3, 8017cee <__swsetup_r+0xc6>
 8017cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ce0:	d1ba      	bne.n	8017c58 <__swsetup_r+0x30>
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}
 8017ce4:	0781      	lsls	r1, r0, #30
 8017ce6:	bf58      	it	pl
 8017ce8:	6963      	ldrpl	r3, [r4, #20]
 8017cea:	60a3      	str	r3, [r4, #8]
 8017cec:	e7f4      	b.n	8017cd8 <__swsetup_r+0xb0>
 8017cee:	2000      	movs	r0, #0
 8017cf0:	e7f7      	b.n	8017ce2 <__swsetup_r+0xba>
 8017cf2:	bf00      	nop
 8017cf4:	200001cc 	.word	0x200001cc
 8017cf8:	0801a1d4 	.word	0x0801a1d4
 8017cfc:	0801a1f4 	.word	0x0801a1f4
 8017d00:	0801a1b4 	.word	0x0801a1b4

08017d04 <abort>:
 8017d04:	b508      	push	{r3, lr}
 8017d06:	2006      	movs	r0, #6
 8017d08:	f000 fb2e 	bl	8018368 <raise>
 8017d0c:	2001      	movs	r0, #1
 8017d0e:	f7ec f913 	bl	8003f38 <_exit>
	...

08017d14 <_close_r>:
 8017d14:	b538      	push	{r3, r4, r5, lr}
 8017d16:	4d06      	ldr	r5, [pc, #24]	; (8017d30 <_close_r+0x1c>)
 8017d18:	2300      	movs	r3, #0
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	4608      	mov	r0, r1
 8017d1e:	602b      	str	r3, [r5, #0]
 8017d20:	f7ec f94d 	bl	8003fbe <_close>
 8017d24:	1c43      	adds	r3, r0, #1
 8017d26:	d102      	bne.n	8017d2e <_close_r+0x1a>
 8017d28:	682b      	ldr	r3, [r5, #0]
 8017d2a:	b103      	cbz	r3, 8017d2e <_close_r+0x1a>
 8017d2c:	6023      	str	r3, [r4, #0]
 8017d2e:	bd38      	pop	{r3, r4, r5, pc}
 8017d30:	20009f78 	.word	0x20009f78

08017d34 <__sflush_r>:
 8017d34:	898a      	ldrh	r2, [r1, #12]
 8017d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	0710      	lsls	r0, r2, #28
 8017d3e:	460c      	mov	r4, r1
 8017d40:	d458      	bmi.n	8017df4 <__sflush_r+0xc0>
 8017d42:	684b      	ldr	r3, [r1, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dc05      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	dc02      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d56:	2e00      	cmp	r6, #0
 8017d58:	d0f9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d60:	682f      	ldr	r7, [r5, #0]
 8017d62:	602b      	str	r3, [r5, #0]
 8017d64:	d032      	beq.n	8017dcc <__sflush_r+0x98>
 8017d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d68:	89a3      	ldrh	r3, [r4, #12]
 8017d6a:	075a      	lsls	r2, r3, #29
 8017d6c:	d505      	bpl.n	8017d7a <__sflush_r+0x46>
 8017d6e:	6863      	ldr	r3, [r4, #4]
 8017d70:	1ac0      	subs	r0, r0, r3
 8017d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d74:	b10b      	cbz	r3, 8017d7a <__sflush_r+0x46>
 8017d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d78:	1ac0      	subs	r0, r0, r3
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d80:	6a21      	ldr	r1, [r4, #32]
 8017d82:	4628      	mov	r0, r5
 8017d84:	47b0      	blx	r6
 8017d86:	1c43      	adds	r3, r0, #1
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	d106      	bne.n	8017d9a <__sflush_r+0x66>
 8017d8c:	6829      	ldr	r1, [r5, #0]
 8017d8e:	291d      	cmp	r1, #29
 8017d90:	d82c      	bhi.n	8017dec <__sflush_r+0xb8>
 8017d92:	4a2a      	ldr	r2, [pc, #168]	; (8017e3c <__sflush_r+0x108>)
 8017d94:	40ca      	lsrs	r2, r1
 8017d96:	07d6      	lsls	r6, r2, #31
 8017d98:	d528      	bpl.n	8017dec <__sflush_r+0xb8>
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6062      	str	r2, [r4, #4]
 8017d9e:	04d9      	lsls	r1, r3, #19
 8017da0:	6922      	ldr	r2, [r4, #16]
 8017da2:	6022      	str	r2, [r4, #0]
 8017da4:	d504      	bpl.n	8017db0 <__sflush_r+0x7c>
 8017da6:	1c42      	adds	r2, r0, #1
 8017da8:	d101      	bne.n	8017dae <__sflush_r+0x7a>
 8017daa:	682b      	ldr	r3, [r5, #0]
 8017dac:	b903      	cbnz	r3, 8017db0 <__sflush_r+0x7c>
 8017dae:	6560      	str	r0, [r4, #84]	; 0x54
 8017db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017db2:	602f      	str	r7, [r5, #0]
 8017db4:	2900      	cmp	r1, #0
 8017db6:	d0ca      	beq.n	8017d4e <__sflush_r+0x1a>
 8017db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017dbc:	4299      	cmp	r1, r3
 8017dbe:	d002      	beq.n	8017dc6 <__sflush_r+0x92>
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f7ff f957 	bl	8017074 <_free_r>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8017dca:	e7c1      	b.n	8017d50 <__sflush_r+0x1c>
 8017dcc:	6a21      	ldr	r1, [r4, #32]
 8017dce:	2301      	movs	r3, #1
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	47b0      	blx	r6
 8017dd4:	1c41      	adds	r1, r0, #1
 8017dd6:	d1c7      	bne.n	8017d68 <__sflush_r+0x34>
 8017dd8:	682b      	ldr	r3, [r5, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d0c4      	beq.n	8017d68 <__sflush_r+0x34>
 8017dde:	2b1d      	cmp	r3, #29
 8017de0:	d001      	beq.n	8017de6 <__sflush_r+0xb2>
 8017de2:	2b16      	cmp	r3, #22
 8017de4:	d101      	bne.n	8017dea <__sflush_r+0xb6>
 8017de6:	602f      	str	r7, [r5, #0]
 8017de8:	e7b1      	b.n	8017d4e <__sflush_r+0x1a>
 8017dea:	89a3      	ldrh	r3, [r4, #12]
 8017dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017df0:	81a3      	strh	r3, [r4, #12]
 8017df2:	e7ad      	b.n	8017d50 <__sflush_r+0x1c>
 8017df4:	690f      	ldr	r7, [r1, #16]
 8017df6:	2f00      	cmp	r7, #0
 8017df8:	d0a9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017dfa:	0793      	lsls	r3, r2, #30
 8017dfc:	680e      	ldr	r6, [r1, #0]
 8017dfe:	bf08      	it	eq
 8017e00:	694b      	ldreq	r3, [r1, #20]
 8017e02:	600f      	str	r7, [r1, #0]
 8017e04:	bf18      	it	ne
 8017e06:	2300      	movne	r3, #0
 8017e08:	eba6 0807 	sub.w	r8, r6, r7
 8017e0c:	608b      	str	r3, [r1, #8]
 8017e0e:	f1b8 0f00 	cmp.w	r8, #0
 8017e12:	dd9c      	ble.n	8017d4e <__sflush_r+0x1a>
 8017e14:	6a21      	ldr	r1, [r4, #32]
 8017e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e18:	4643      	mov	r3, r8
 8017e1a:	463a      	mov	r2, r7
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	47b0      	blx	r6
 8017e20:	2800      	cmp	r0, #0
 8017e22:	dc06      	bgt.n	8017e32 <__sflush_r+0xfe>
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e2a:	81a3      	strh	r3, [r4, #12]
 8017e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e30:	e78e      	b.n	8017d50 <__sflush_r+0x1c>
 8017e32:	4407      	add	r7, r0
 8017e34:	eba8 0800 	sub.w	r8, r8, r0
 8017e38:	e7e9      	b.n	8017e0e <__sflush_r+0xda>
 8017e3a:	bf00      	nop
 8017e3c:	20400001 	.word	0x20400001

08017e40 <_fflush_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	690b      	ldr	r3, [r1, #16]
 8017e44:	4605      	mov	r5, r0
 8017e46:	460c      	mov	r4, r1
 8017e48:	b913      	cbnz	r3, 8017e50 <_fflush_r+0x10>
 8017e4a:	2500      	movs	r5, #0
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	b118      	cbz	r0, 8017e5a <_fflush_r+0x1a>
 8017e52:	6983      	ldr	r3, [r0, #24]
 8017e54:	b90b      	cbnz	r3, 8017e5a <_fflush_r+0x1a>
 8017e56:	f7ff f801 	bl	8016e5c <__sinit>
 8017e5a:	4b14      	ldr	r3, [pc, #80]	; (8017eac <_fflush_r+0x6c>)
 8017e5c:	429c      	cmp	r4, r3
 8017e5e:	d11b      	bne.n	8017e98 <_fflush_r+0x58>
 8017e60:	686c      	ldr	r4, [r5, #4]
 8017e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d0ef      	beq.n	8017e4a <_fflush_r+0xa>
 8017e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e6c:	07d0      	lsls	r0, r2, #31
 8017e6e:	d404      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e70:	0599      	lsls	r1, r3, #22
 8017e72:	d402      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e76:	f7ff f8c6 	bl	8017006 <__retarget_lock_acquire_recursive>
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	f7ff ff59 	bl	8017d34 <__sflush_r>
 8017e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e84:	07da      	lsls	r2, r3, #31
 8017e86:	4605      	mov	r5, r0
 8017e88:	d4e0      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e8a:	89a3      	ldrh	r3, [r4, #12]
 8017e8c:	059b      	lsls	r3, r3, #22
 8017e8e:	d4dd      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e92:	f7ff f8b9 	bl	8017008 <__retarget_lock_release_recursive>
 8017e96:	e7d9      	b.n	8017e4c <_fflush_r+0xc>
 8017e98:	4b05      	ldr	r3, [pc, #20]	; (8017eb0 <_fflush_r+0x70>)
 8017e9a:	429c      	cmp	r4, r3
 8017e9c:	d101      	bne.n	8017ea2 <_fflush_r+0x62>
 8017e9e:	68ac      	ldr	r4, [r5, #8]
 8017ea0:	e7df      	b.n	8017e62 <_fflush_r+0x22>
 8017ea2:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <_fflush_r+0x74>)
 8017ea4:	429c      	cmp	r4, r3
 8017ea6:	bf08      	it	eq
 8017ea8:	68ec      	ldreq	r4, [r5, #12]
 8017eaa:	e7da      	b.n	8017e62 <_fflush_r+0x22>
 8017eac:	0801a1d4 	.word	0x0801a1d4
 8017eb0:	0801a1f4 	.word	0x0801a1f4
 8017eb4:	0801a1b4 	.word	0x0801a1b4

08017eb8 <_lseek_r>:
 8017eb8:	b538      	push	{r3, r4, r5, lr}
 8017eba:	4d07      	ldr	r5, [pc, #28]	; (8017ed8 <_lseek_r+0x20>)
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	4608      	mov	r0, r1
 8017ec0:	4611      	mov	r1, r2
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	602a      	str	r2, [r5, #0]
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	f7ec f8a0 	bl	800400c <_lseek>
 8017ecc:	1c43      	adds	r3, r0, #1
 8017ece:	d102      	bne.n	8017ed6 <_lseek_r+0x1e>
 8017ed0:	682b      	ldr	r3, [r5, #0]
 8017ed2:	b103      	cbz	r3, 8017ed6 <_lseek_r+0x1e>
 8017ed4:	6023      	str	r3, [r4, #0]
 8017ed6:	bd38      	pop	{r3, r4, r5, pc}
 8017ed8:	20009f78 	.word	0x20009f78

08017edc <__swhatbuf_r>:
 8017edc:	b570      	push	{r4, r5, r6, lr}
 8017ede:	460e      	mov	r6, r1
 8017ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ee4:	2900      	cmp	r1, #0
 8017ee6:	b096      	sub	sp, #88	; 0x58
 8017ee8:	4614      	mov	r4, r2
 8017eea:	461d      	mov	r5, r3
 8017eec:	da07      	bge.n	8017efe <__swhatbuf_r+0x22>
 8017eee:	2300      	movs	r3, #0
 8017ef0:	602b      	str	r3, [r5, #0]
 8017ef2:	89b3      	ldrh	r3, [r6, #12]
 8017ef4:	061a      	lsls	r2, r3, #24
 8017ef6:	d410      	bmi.n	8017f1a <__swhatbuf_r+0x3e>
 8017ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017efc:	e00e      	b.n	8017f1c <__swhatbuf_r+0x40>
 8017efe:	466a      	mov	r2, sp
 8017f00:	f000 fa4e 	bl	80183a0 <_fstat_r>
 8017f04:	2800      	cmp	r0, #0
 8017f06:	dbf2      	blt.n	8017eee <__swhatbuf_r+0x12>
 8017f08:	9a01      	ldr	r2, [sp, #4]
 8017f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f12:	425a      	negs	r2, r3
 8017f14:	415a      	adcs	r2, r3
 8017f16:	602a      	str	r2, [r5, #0]
 8017f18:	e7ee      	b.n	8017ef8 <__swhatbuf_r+0x1c>
 8017f1a:	2340      	movs	r3, #64	; 0x40
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	6023      	str	r3, [r4, #0]
 8017f20:	b016      	add	sp, #88	; 0x58
 8017f22:	bd70      	pop	{r4, r5, r6, pc}

08017f24 <__smakebuf_r>:
 8017f24:	898b      	ldrh	r3, [r1, #12]
 8017f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f28:	079d      	lsls	r5, r3, #30
 8017f2a:	4606      	mov	r6, r0
 8017f2c:	460c      	mov	r4, r1
 8017f2e:	d507      	bpl.n	8017f40 <__smakebuf_r+0x1c>
 8017f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	6123      	str	r3, [r4, #16]
 8017f38:	2301      	movs	r3, #1
 8017f3a:	6163      	str	r3, [r4, #20]
 8017f3c:	b002      	add	sp, #8
 8017f3e:	bd70      	pop	{r4, r5, r6, pc}
 8017f40:	ab01      	add	r3, sp, #4
 8017f42:	466a      	mov	r2, sp
 8017f44:	f7ff ffca 	bl	8017edc <__swhatbuf_r>
 8017f48:	9900      	ldr	r1, [sp, #0]
 8017f4a:	4605      	mov	r5, r0
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	f7ff f8e1 	bl	8017114 <_malloc_r>
 8017f52:	b948      	cbnz	r0, 8017f68 <__smakebuf_r+0x44>
 8017f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f58:	059a      	lsls	r2, r3, #22
 8017f5a:	d4ef      	bmi.n	8017f3c <__smakebuf_r+0x18>
 8017f5c:	f023 0303 	bic.w	r3, r3, #3
 8017f60:	f043 0302 	orr.w	r3, r3, #2
 8017f64:	81a3      	strh	r3, [r4, #12]
 8017f66:	e7e3      	b.n	8017f30 <__smakebuf_r+0xc>
 8017f68:	4b0d      	ldr	r3, [pc, #52]	; (8017fa0 <__smakebuf_r+0x7c>)
 8017f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f6c:	89a3      	ldrh	r3, [r4, #12]
 8017f6e:	6020      	str	r0, [r4, #0]
 8017f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f74:	81a3      	strh	r3, [r4, #12]
 8017f76:	9b00      	ldr	r3, [sp, #0]
 8017f78:	6163      	str	r3, [r4, #20]
 8017f7a:	9b01      	ldr	r3, [sp, #4]
 8017f7c:	6120      	str	r0, [r4, #16]
 8017f7e:	b15b      	cbz	r3, 8017f98 <__smakebuf_r+0x74>
 8017f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f84:	4630      	mov	r0, r6
 8017f86:	f000 fa1d 	bl	80183c4 <_isatty_r>
 8017f8a:	b128      	cbz	r0, 8017f98 <__smakebuf_r+0x74>
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	f023 0303 	bic.w	r3, r3, #3
 8017f92:	f043 0301 	orr.w	r3, r3, #1
 8017f96:	81a3      	strh	r3, [r4, #12]
 8017f98:	89a0      	ldrh	r0, [r4, #12]
 8017f9a:	4305      	orrs	r5, r0
 8017f9c:	81a5      	strh	r5, [r4, #12]
 8017f9e:	e7cd      	b.n	8017f3c <__smakebuf_r+0x18>
 8017fa0:	08016df5 	.word	0x08016df5

08017fa4 <memmove>:
 8017fa4:	4288      	cmp	r0, r1
 8017fa6:	b510      	push	{r4, lr}
 8017fa8:	eb01 0402 	add.w	r4, r1, r2
 8017fac:	d902      	bls.n	8017fb4 <memmove+0x10>
 8017fae:	4284      	cmp	r4, r0
 8017fb0:	4623      	mov	r3, r4
 8017fb2:	d807      	bhi.n	8017fc4 <memmove+0x20>
 8017fb4:	1e43      	subs	r3, r0, #1
 8017fb6:	42a1      	cmp	r1, r4
 8017fb8:	d008      	beq.n	8017fcc <memmove+0x28>
 8017fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017fc2:	e7f8      	b.n	8017fb6 <memmove+0x12>
 8017fc4:	4402      	add	r2, r0
 8017fc6:	4601      	mov	r1, r0
 8017fc8:	428a      	cmp	r2, r1
 8017fca:	d100      	bne.n	8017fce <memmove+0x2a>
 8017fcc:	bd10      	pop	{r4, pc}
 8017fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017fd6:	e7f7      	b.n	8017fc8 <memmove+0x24>

08017fd8 <__malloc_lock>:
 8017fd8:	4801      	ldr	r0, [pc, #4]	; (8017fe0 <__malloc_lock+0x8>)
 8017fda:	f7ff b814 	b.w	8017006 <__retarget_lock_acquire_recursive>
 8017fde:	bf00      	nop
 8017fe0:	20009f70 	.word	0x20009f70

08017fe4 <__malloc_unlock>:
 8017fe4:	4801      	ldr	r0, [pc, #4]	; (8017fec <__malloc_unlock+0x8>)
 8017fe6:	f7ff b80f 	b.w	8017008 <__retarget_lock_release_recursive>
 8017fea:	bf00      	nop
 8017fec:	20009f70 	.word	0x20009f70

08017ff0 <_realloc_r>:
 8017ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff2:	4607      	mov	r7, r0
 8017ff4:	4614      	mov	r4, r2
 8017ff6:	460e      	mov	r6, r1
 8017ff8:	b921      	cbnz	r1, 8018004 <_realloc_r+0x14>
 8017ffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ffe:	4611      	mov	r1, r2
 8018000:	f7ff b888 	b.w	8017114 <_malloc_r>
 8018004:	b922      	cbnz	r2, 8018010 <_realloc_r+0x20>
 8018006:	f7ff f835 	bl	8017074 <_free_r>
 801800a:	4625      	mov	r5, r4
 801800c:	4628      	mov	r0, r5
 801800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018010:	f000 f9e8 	bl	80183e4 <_malloc_usable_size_r>
 8018014:	42a0      	cmp	r0, r4
 8018016:	d20f      	bcs.n	8018038 <_realloc_r+0x48>
 8018018:	4621      	mov	r1, r4
 801801a:	4638      	mov	r0, r7
 801801c:	f7ff f87a 	bl	8017114 <_malloc_r>
 8018020:	4605      	mov	r5, r0
 8018022:	2800      	cmp	r0, #0
 8018024:	d0f2      	beq.n	801800c <_realloc_r+0x1c>
 8018026:	4631      	mov	r1, r6
 8018028:	4622      	mov	r2, r4
 801802a:	f7ff f80d 	bl	8017048 <memcpy>
 801802e:	4631      	mov	r1, r6
 8018030:	4638      	mov	r0, r7
 8018032:	f7ff f81f 	bl	8017074 <_free_r>
 8018036:	e7e9      	b.n	801800c <_realloc_r+0x1c>
 8018038:	4635      	mov	r5, r6
 801803a:	e7e7      	b.n	801800c <_realloc_r+0x1c>

0801803c <__ssputs_r>:
 801803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018040:	688e      	ldr	r6, [r1, #8]
 8018042:	429e      	cmp	r6, r3
 8018044:	4682      	mov	sl, r0
 8018046:	460c      	mov	r4, r1
 8018048:	4690      	mov	r8, r2
 801804a:	461f      	mov	r7, r3
 801804c:	d838      	bhi.n	80180c0 <__ssputs_r+0x84>
 801804e:	898a      	ldrh	r2, [r1, #12]
 8018050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018054:	d032      	beq.n	80180bc <__ssputs_r+0x80>
 8018056:	6825      	ldr	r5, [r4, #0]
 8018058:	6909      	ldr	r1, [r1, #16]
 801805a:	eba5 0901 	sub.w	r9, r5, r1
 801805e:	6965      	ldr	r5, [r4, #20]
 8018060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018068:	3301      	adds	r3, #1
 801806a:	444b      	add	r3, r9
 801806c:	106d      	asrs	r5, r5, #1
 801806e:	429d      	cmp	r5, r3
 8018070:	bf38      	it	cc
 8018072:	461d      	movcc	r5, r3
 8018074:	0553      	lsls	r3, r2, #21
 8018076:	d531      	bpl.n	80180dc <__ssputs_r+0xa0>
 8018078:	4629      	mov	r1, r5
 801807a:	f7ff f84b 	bl	8017114 <_malloc_r>
 801807e:	4606      	mov	r6, r0
 8018080:	b950      	cbnz	r0, 8018098 <__ssputs_r+0x5c>
 8018082:	230c      	movs	r3, #12
 8018084:	f8ca 3000 	str.w	r3, [sl]
 8018088:	89a3      	ldrh	r3, [r4, #12]
 801808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801808e:	81a3      	strh	r3, [r4, #12]
 8018090:	f04f 30ff 	mov.w	r0, #4294967295
 8018094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018098:	6921      	ldr	r1, [r4, #16]
 801809a:	464a      	mov	r2, r9
 801809c:	f7fe ffd4 	bl	8017048 <memcpy>
 80180a0:	89a3      	ldrh	r3, [r4, #12]
 80180a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80180a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180aa:	81a3      	strh	r3, [r4, #12]
 80180ac:	6126      	str	r6, [r4, #16]
 80180ae:	6165      	str	r5, [r4, #20]
 80180b0:	444e      	add	r6, r9
 80180b2:	eba5 0509 	sub.w	r5, r5, r9
 80180b6:	6026      	str	r6, [r4, #0]
 80180b8:	60a5      	str	r5, [r4, #8]
 80180ba:	463e      	mov	r6, r7
 80180bc:	42be      	cmp	r6, r7
 80180be:	d900      	bls.n	80180c2 <__ssputs_r+0x86>
 80180c0:	463e      	mov	r6, r7
 80180c2:	4632      	mov	r2, r6
 80180c4:	6820      	ldr	r0, [r4, #0]
 80180c6:	4641      	mov	r1, r8
 80180c8:	f7ff ff6c 	bl	8017fa4 <memmove>
 80180cc:	68a3      	ldr	r3, [r4, #8]
 80180ce:	6822      	ldr	r2, [r4, #0]
 80180d0:	1b9b      	subs	r3, r3, r6
 80180d2:	4432      	add	r2, r6
 80180d4:	60a3      	str	r3, [r4, #8]
 80180d6:	6022      	str	r2, [r4, #0]
 80180d8:	2000      	movs	r0, #0
 80180da:	e7db      	b.n	8018094 <__ssputs_r+0x58>
 80180dc:	462a      	mov	r2, r5
 80180de:	f7ff ff87 	bl	8017ff0 <_realloc_r>
 80180e2:	4606      	mov	r6, r0
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d1e1      	bne.n	80180ac <__ssputs_r+0x70>
 80180e8:	6921      	ldr	r1, [r4, #16]
 80180ea:	4650      	mov	r0, sl
 80180ec:	f7fe ffc2 	bl	8017074 <_free_r>
 80180f0:	e7c7      	b.n	8018082 <__ssputs_r+0x46>
	...

080180f4 <_svfiprintf_r>:
 80180f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f8:	4698      	mov	r8, r3
 80180fa:	898b      	ldrh	r3, [r1, #12]
 80180fc:	061b      	lsls	r3, r3, #24
 80180fe:	b09d      	sub	sp, #116	; 0x74
 8018100:	4607      	mov	r7, r0
 8018102:	460d      	mov	r5, r1
 8018104:	4614      	mov	r4, r2
 8018106:	d50e      	bpl.n	8018126 <_svfiprintf_r+0x32>
 8018108:	690b      	ldr	r3, [r1, #16]
 801810a:	b963      	cbnz	r3, 8018126 <_svfiprintf_r+0x32>
 801810c:	2140      	movs	r1, #64	; 0x40
 801810e:	f7ff f801 	bl	8017114 <_malloc_r>
 8018112:	6028      	str	r0, [r5, #0]
 8018114:	6128      	str	r0, [r5, #16]
 8018116:	b920      	cbnz	r0, 8018122 <_svfiprintf_r+0x2e>
 8018118:	230c      	movs	r3, #12
 801811a:	603b      	str	r3, [r7, #0]
 801811c:	f04f 30ff 	mov.w	r0, #4294967295
 8018120:	e0d1      	b.n	80182c6 <_svfiprintf_r+0x1d2>
 8018122:	2340      	movs	r3, #64	; 0x40
 8018124:	616b      	str	r3, [r5, #20]
 8018126:	2300      	movs	r3, #0
 8018128:	9309      	str	r3, [sp, #36]	; 0x24
 801812a:	2320      	movs	r3, #32
 801812c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018130:	f8cd 800c 	str.w	r8, [sp, #12]
 8018134:	2330      	movs	r3, #48	; 0x30
 8018136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80182e0 <_svfiprintf_r+0x1ec>
 801813a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801813e:	f04f 0901 	mov.w	r9, #1
 8018142:	4623      	mov	r3, r4
 8018144:	469a      	mov	sl, r3
 8018146:	f813 2b01 	ldrb.w	r2, [r3], #1
 801814a:	b10a      	cbz	r2, 8018150 <_svfiprintf_r+0x5c>
 801814c:	2a25      	cmp	r2, #37	; 0x25
 801814e:	d1f9      	bne.n	8018144 <_svfiprintf_r+0x50>
 8018150:	ebba 0b04 	subs.w	fp, sl, r4
 8018154:	d00b      	beq.n	801816e <_svfiprintf_r+0x7a>
 8018156:	465b      	mov	r3, fp
 8018158:	4622      	mov	r2, r4
 801815a:	4629      	mov	r1, r5
 801815c:	4638      	mov	r0, r7
 801815e:	f7ff ff6d 	bl	801803c <__ssputs_r>
 8018162:	3001      	adds	r0, #1
 8018164:	f000 80aa 	beq.w	80182bc <_svfiprintf_r+0x1c8>
 8018168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801816a:	445a      	add	r2, fp
 801816c:	9209      	str	r2, [sp, #36]	; 0x24
 801816e:	f89a 3000 	ldrb.w	r3, [sl]
 8018172:	2b00      	cmp	r3, #0
 8018174:	f000 80a2 	beq.w	80182bc <_svfiprintf_r+0x1c8>
 8018178:	2300      	movs	r3, #0
 801817a:	f04f 32ff 	mov.w	r2, #4294967295
 801817e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018182:	f10a 0a01 	add.w	sl, sl, #1
 8018186:	9304      	str	r3, [sp, #16]
 8018188:	9307      	str	r3, [sp, #28]
 801818a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801818e:	931a      	str	r3, [sp, #104]	; 0x68
 8018190:	4654      	mov	r4, sl
 8018192:	2205      	movs	r2, #5
 8018194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018198:	4851      	ldr	r0, [pc, #324]	; (80182e0 <_svfiprintf_r+0x1ec>)
 801819a:	f7e8 f831 	bl	8000200 <memchr>
 801819e:	9a04      	ldr	r2, [sp, #16]
 80181a0:	b9d8      	cbnz	r0, 80181da <_svfiprintf_r+0xe6>
 80181a2:	06d0      	lsls	r0, r2, #27
 80181a4:	bf44      	itt	mi
 80181a6:	2320      	movmi	r3, #32
 80181a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181ac:	0711      	lsls	r1, r2, #28
 80181ae:	bf44      	itt	mi
 80181b0:	232b      	movmi	r3, #43	; 0x2b
 80181b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181b6:	f89a 3000 	ldrb.w	r3, [sl]
 80181ba:	2b2a      	cmp	r3, #42	; 0x2a
 80181bc:	d015      	beq.n	80181ea <_svfiprintf_r+0xf6>
 80181be:	9a07      	ldr	r2, [sp, #28]
 80181c0:	4654      	mov	r4, sl
 80181c2:	2000      	movs	r0, #0
 80181c4:	f04f 0c0a 	mov.w	ip, #10
 80181c8:	4621      	mov	r1, r4
 80181ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181ce:	3b30      	subs	r3, #48	; 0x30
 80181d0:	2b09      	cmp	r3, #9
 80181d2:	d94e      	bls.n	8018272 <_svfiprintf_r+0x17e>
 80181d4:	b1b0      	cbz	r0, 8018204 <_svfiprintf_r+0x110>
 80181d6:	9207      	str	r2, [sp, #28]
 80181d8:	e014      	b.n	8018204 <_svfiprintf_r+0x110>
 80181da:	eba0 0308 	sub.w	r3, r0, r8
 80181de:	fa09 f303 	lsl.w	r3, r9, r3
 80181e2:	4313      	orrs	r3, r2
 80181e4:	9304      	str	r3, [sp, #16]
 80181e6:	46a2      	mov	sl, r4
 80181e8:	e7d2      	b.n	8018190 <_svfiprintf_r+0x9c>
 80181ea:	9b03      	ldr	r3, [sp, #12]
 80181ec:	1d19      	adds	r1, r3, #4
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	9103      	str	r1, [sp, #12]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	bfbb      	ittet	lt
 80181f6:	425b      	neglt	r3, r3
 80181f8:	f042 0202 	orrlt.w	r2, r2, #2
 80181fc:	9307      	strge	r3, [sp, #28]
 80181fe:	9307      	strlt	r3, [sp, #28]
 8018200:	bfb8      	it	lt
 8018202:	9204      	strlt	r2, [sp, #16]
 8018204:	7823      	ldrb	r3, [r4, #0]
 8018206:	2b2e      	cmp	r3, #46	; 0x2e
 8018208:	d10c      	bne.n	8018224 <_svfiprintf_r+0x130>
 801820a:	7863      	ldrb	r3, [r4, #1]
 801820c:	2b2a      	cmp	r3, #42	; 0x2a
 801820e:	d135      	bne.n	801827c <_svfiprintf_r+0x188>
 8018210:	9b03      	ldr	r3, [sp, #12]
 8018212:	1d1a      	adds	r2, r3, #4
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	9203      	str	r2, [sp, #12]
 8018218:	2b00      	cmp	r3, #0
 801821a:	bfb8      	it	lt
 801821c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018220:	3402      	adds	r4, #2
 8018222:	9305      	str	r3, [sp, #20]
 8018224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80182f0 <_svfiprintf_r+0x1fc>
 8018228:	7821      	ldrb	r1, [r4, #0]
 801822a:	2203      	movs	r2, #3
 801822c:	4650      	mov	r0, sl
 801822e:	f7e7 ffe7 	bl	8000200 <memchr>
 8018232:	b140      	cbz	r0, 8018246 <_svfiprintf_r+0x152>
 8018234:	2340      	movs	r3, #64	; 0x40
 8018236:	eba0 000a 	sub.w	r0, r0, sl
 801823a:	fa03 f000 	lsl.w	r0, r3, r0
 801823e:	9b04      	ldr	r3, [sp, #16]
 8018240:	4303      	orrs	r3, r0
 8018242:	3401      	adds	r4, #1
 8018244:	9304      	str	r3, [sp, #16]
 8018246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801824a:	4826      	ldr	r0, [pc, #152]	; (80182e4 <_svfiprintf_r+0x1f0>)
 801824c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018250:	2206      	movs	r2, #6
 8018252:	f7e7 ffd5 	bl	8000200 <memchr>
 8018256:	2800      	cmp	r0, #0
 8018258:	d038      	beq.n	80182cc <_svfiprintf_r+0x1d8>
 801825a:	4b23      	ldr	r3, [pc, #140]	; (80182e8 <_svfiprintf_r+0x1f4>)
 801825c:	bb1b      	cbnz	r3, 80182a6 <_svfiprintf_r+0x1b2>
 801825e:	9b03      	ldr	r3, [sp, #12]
 8018260:	3307      	adds	r3, #7
 8018262:	f023 0307 	bic.w	r3, r3, #7
 8018266:	3308      	adds	r3, #8
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801826c:	4433      	add	r3, r6
 801826e:	9309      	str	r3, [sp, #36]	; 0x24
 8018270:	e767      	b.n	8018142 <_svfiprintf_r+0x4e>
 8018272:	fb0c 3202 	mla	r2, ip, r2, r3
 8018276:	460c      	mov	r4, r1
 8018278:	2001      	movs	r0, #1
 801827a:	e7a5      	b.n	80181c8 <_svfiprintf_r+0xd4>
 801827c:	2300      	movs	r3, #0
 801827e:	3401      	adds	r4, #1
 8018280:	9305      	str	r3, [sp, #20]
 8018282:	4619      	mov	r1, r3
 8018284:	f04f 0c0a 	mov.w	ip, #10
 8018288:	4620      	mov	r0, r4
 801828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801828e:	3a30      	subs	r2, #48	; 0x30
 8018290:	2a09      	cmp	r2, #9
 8018292:	d903      	bls.n	801829c <_svfiprintf_r+0x1a8>
 8018294:	2b00      	cmp	r3, #0
 8018296:	d0c5      	beq.n	8018224 <_svfiprintf_r+0x130>
 8018298:	9105      	str	r1, [sp, #20]
 801829a:	e7c3      	b.n	8018224 <_svfiprintf_r+0x130>
 801829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80182a0:	4604      	mov	r4, r0
 80182a2:	2301      	movs	r3, #1
 80182a4:	e7f0      	b.n	8018288 <_svfiprintf_r+0x194>
 80182a6:	ab03      	add	r3, sp, #12
 80182a8:	9300      	str	r3, [sp, #0]
 80182aa:	462a      	mov	r2, r5
 80182ac:	4b0f      	ldr	r3, [pc, #60]	; (80182ec <_svfiprintf_r+0x1f8>)
 80182ae:	a904      	add	r1, sp, #16
 80182b0:	4638      	mov	r0, r7
 80182b2:	f3af 8000 	nop.w
 80182b6:	1c42      	adds	r2, r0, #1
 80182b8:	4606      	mov	r6, r0
 80182ba:	d1d6      	bne.n	801826a <_svfiprintf_r+0x176>
 80182bc:	89ab      	ldrh	r3, [r5, #12]
 80182be:	065b      	lsls	r3, r3, #25
 80182c0:	f53f af2c 	bmi.w	801811c <_svfiprintf_r+0x28>
 80182c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80182c6:	b01d      	add	sp, #116	; 0x74
 80182c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182cc:	ab03      	add	r3, sp, #12
 80182ce:	9300      	str	r3, [sp, #0]
 80182d0:	462a      	mov	r2, r5
 80182d2:	4b06      	ldr	r3, [pc, #24]	; (80182ec <_svfiprintf_r+0x1f8>)
 80182d4:	a904      	add	r1, sp, #16
 80182d6:	4638      	mov	r0, r7
 80182d8:	f7ff f93e 	bl	8017558 <_printf_i>
 80182dc:	e7eb      	b.n	80182b6 <_svfiprintf_r+0x1c2>
 80182de:	bf00      	nop
 80182e0:	0801a218 	.word	0x0801a218
 80182e4:	0801a222 	.word	0x0801a222
 80182e8:	00000000 	.word	0x00000000
 80182ec:	0801803d 	.word	0x0801803d
 80182f0:	0801a21e 	.word	0x0801a21e

080182f4 <_read_r>:
 80182f4:	b538      	push	{r3, r4, r5, lr}
 80182f6:	4d07      	ldr	r5, [pc, #28]	; (8018314 <_read_r+0x20>)
 80182f8:	4604      	mov	r4, r0
 80182fa:	4608      	mov	r0, r1
 80182fc:	4611      	mov	r1, r2
 80182fe:	2200      	movs	r2, #0
 8018300:	602a      	str	r2, [r5, #0]
 8018302:	461a      	mov	r2, r3
 8018304:	f7eb fe22 	bl	8003f4c <_read>
 8018308:	1c43      	adds	r3, r0, #1
 801830a:	d102      	bne.n	8018312 <_read_r+0x1e>
 801830c:	682b      	ldr	r3, [r5, #0]
 801830e:	b103      	cbz	r3, 8018312 <_read_r+0x1e>
 8018310:	6023      	str	r3, [r4, #0]
 8018312:	bd38      	pop	{r3, r4, r5, pc}
 8018314:	20009f78 	.word	0x20009f78

08018318 <_raise_r>:
 8018318:	291f      	cmp	r1, #31
 801831a:	b538      	push	{r3, r4, r5, lr}
 801831c:	4604      	mov	r4, r0
 801831e:	460d      	mov	r5, r1
 8018320:	d904      	bls.n	801832c <_raise_r+0x14>
 8018322:	2316      	movs	r3, #22
 8018324:	6003      	str	r3, [r0, #0]
 8018326:	f04f 30ff 	mov.w	r0, #4294967295
 801832a:	bd38      	pop	{r3, r4, r5, pc}
 801832c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801832e:	b112      	cbz	r2, 8018336 <_raise_r+0x1e>
 8018330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018334:	b94b      	cbnz	r3, 801834a <_raise_r+0x32>
 8018336:	4620      	mov	r0, r4
 8018338:	f000 f830 	bl	801839c <_getpid_r>
 801833c:	462a      	mov	r2, r5
 801833e:	4601      	mov	r1, r0
 8018340:	4620      	mov	r0, r4
 8018342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018346:	f000 b817 	b.w	8018378 <_kill_r>
 801834a:	2b01      	cmp	r3, #1
 801834c:	d00a      	beq.n	8018364 <_raise_r+0x4c>
 801834e:	1c59      	adds	r1, r3, #1
 8018350:	d103      	bne.n	801835a <_raise_r+0x42>
 8018352:	2316      	movs	r3, #22
 8018354:	6003      	str	r3, [r0, #0]
 8018356:	2001      	movs	r0, #1
 8018358:	e7e7      	b.n	801832a <_raise_r+0x12>
 801835a:	2400      	movs	r4, #0
 801835c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018360:	4628      	mov	r0, r5
 8018362:	4798      	blx	r3
 8018364:	2000      	movs	r0, #0
 8018366:	e7e0      	b.n	801832a <_raise_r+0x12>

08018368 <raise>:
 8018368:	4b02      	ldr	r3, [pc, #8]	; (8018374 <raise+0xc>)
 801836a:	4601      	mov	r1, r0
 801836c:	6818      	ldr	r0, [r3, #0]
 801836e:	f7ff bfd3 	b.w	8018318 <_raise_r>
 8018372:	bf00      	nop
 8018374:	200001cc 	.word	0x200001cc

08018378 <_kill_r>:
 8018378:	b538      	push	{r3, r4, r5, lr}
 801837a:	4d07      	ldr	r5, [pc, #28]	; (8018398 <_kill_r+0x20>)
 801837c:	2300      	movs	r3, #0
 801837e:	4604      	mov	r4, r0
 8018380:	4608      	mov	r0, r1
 8018382:	4611      	mov	r1, r2
 8018384:	602b      	str	r3, [r5, #0]
 8018386:	f7eb fdc7 	bl	8003f18 <_kill>
 801838a:	1c43      	adds	r3, r0, #1
 801838c:	d102      	bne.n	8018394 <_kill_r+0x1c>
 801838e:	682b      	ldr	r3, [r5, #0]
 8018390:	b103      	cbz	r3, 8018394 <_kill_r+0x1c>
 8018392:	6023      	str	r3, [r4, #0]
 8018394:	bd38      	pop	{r3, r4, r5, pc}
 8018396:	bf00      	nop
 8018398:	20009f78 	.word	0x20009f78

0801839c <_getpid_r>:
 801839c:	f7eb bdb4 	b.w	8003f08 <_getpid>

080183a0 <_fstat_r>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4d07      	ldr	r5, [pc, #28]	; (80183c0 <_fstat_r+0x20>)
 80183a4:	2300      	movs	r3, #0
 80183a6:	4604      	mov	r4, r0
 80183a8:	4608      	mov	r0, r1
 80183aa:	4611      	mov	r1, r2
 80183ac:	602b      	str	r3, [r5, #0]
 80183ae:	f7eb fe12 	bl	8003fd6 <_fstat>
 80183b2:	1c43      	adds	r3, r0, #1
 80183b4:	d102      	bne.n	80183bc <_fstat_r+0x1c>
 80183b6:	682b      	ldr	r3, [r5, #0]
 80183b8:	b103      	cbz	r3, 80183bc <_fstat_r+0x1c>
 80183ba:	6023      	str	r3, [r4, #0]
 80183bc:	bd38      	pop	{r3, r4, r5, pc}
 80183be:	bf00      	nop
 80183c0:	20009f78 	.word	0x20009f78

080183c4 <_isatty_r>:
 80183c4:	b538      	push	{r3, r4, r5, lr}
 80183c6:	4d06      	ldr	r5, [pc, #24]	; (80183e0 <_isatty_r+0x1c>)
 80183c8:	2300      	movs	r3, #0
 80183ca:	4604      	mov	r4, r0
 80183cc:	4608      	mov	r0, r1
 80183ce:	602b      	str	r3, [r5, #0]
 80183d0:	f7eb fe11 	bl	8003ff6 <_isatty>
 80183d4:	1c43      	adds	r3, r0, #1
 80183d6:	d102      	bne.n	80183de <_isatty_r+0x1a>
 80183d8:	682b      	ldr	r3, [r5, #0]
 80183da:	b103      	cbz	r3, 80183de <_isatty_r+0x1a>
 80183dc:	6023      	str	r3, [r4, #0]
 80183de:	bd38      	pop	{r3, r4, r5, pc}
 80183e0:	20009f78 	.word	0x20009f78

080183e4 <_malloc_usable_size_r>:
 80183e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183e8:	1f18      	subs	r0, r3, #4
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	bfbc      	itt	lt
 80183ee:	580b      	ldrlt	r3, [r1, r0]
 80183f0:	18c0      	addlt	r0, r0, r3
 80183f2:	4770      	bx	lr

080183f4 <sqrtf>:
 80183f4:	b508      	push	{r3, lr}
 80183f6:	ed2d 8b02 	vpush	{d8}
 80183fa:	eeb0 8a40 	vmov.f32	s16, s0
 80183fe:	f000 f81f 	bl	8018440 <__ieee754_sqrtf>
 8018402:	4b0d      	ldr	r3, [pc, #52]	; (8018438 <sqrtf+0x44>)
 8018404:	f993 3000 	ldrsb.w	r3, [r3]
 8018408:	3301      	adds	r3, #1
 801840a:	d011      	beq.n	8018430 <sqrtf+0x3c>
 801840c:	eeb4 8a48 	vcmp.f32	s16, s16
 8018410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018414:	d60c      	bvs.n	8018430 <sqrtf+0x3c>
 8018416:	eddf 8a09 	vldr	s17, [pc, #36]	; 801843c <sqrtf+0x48>
 801841a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018422:	d505      	bpl.n	8018430 <sqrtf+0x3c>
 8018424:	f7fe fcbc 	bl	8016da0 <__errno>
 8018428:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801842c:	2321      	movs	r3, #33	; 0x21
 801842e:	6003      	str	r3, [r0, #0]
 8018430:	ecbd 8b02 	vpop	{d8}
 8018434:	bd08      	pop	{r3, pc}
 8018436:	bf00      	nop
 8018438:	20000230 	.word	0x20000230
 801843c:	00000000 	.word	0x00000000

08018440 <__ieee754_sqrtf>:
 8018440:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018444:	4770      	bx	lr
	...

08018448 <_init>:
 8018448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844a:	bf00      	nop
 801844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801844e:	bc08      	pop	{r3}
 8018450:	469e      	mov	lr, r3
 8018452:	4770      	bx	lr

08018454 <_fini>:
 8018454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018456:	bf00      	nop
 8018458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801845a:	bc08      	pop	{r3}
 801845c:	469e      	mov	lr, r3
 801845e:	4770      	bx	lr
